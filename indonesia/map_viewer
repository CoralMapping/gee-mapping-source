/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var centre_map = /* color: #d63000 */ee.Geometry.Point([122.97355459536129, -2.5240694931651593]),
    notReef_mask = /* color: #d63000 */ee.Geometry.MultiPoint(),
    artifact_layer = /* color: #98ff00 */ee.Geometry.MultiPoint(),
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    region_wcmcBound = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[125.61292878907614, 5.37738287551761],
          [118.58167878907614, 0.6391876452835566],
          [113.13246003907614, -1.865352297869458],
          [110.18812410157614, 2.264587617955663],
          [104.56312410157614, 2.1767630075246363],
          [97.97132722657614, 6.644763383602538],
          [93.88441316407614, 7.037454508127354],
          [94.58753816407614, 1.6936417075197112],
          [96.74085847657614, 0.24369235678350853],
          [100.60804597657614, -5.1983790124187905],
          [102.54163972657614, -7.643688572040937],
          [94.93910066407614, -12.44535783729859],
          [103.85999910157614, -13.772129866763253],
          [113.00062410157614, -11.154889077713621],
          [124.16273347657614, -12.273650598071253],
          [135.67640535157614, -8.339980293243885],
          [140.59828035157614, -5.329658903890787],
          [134.66566316407614, 2.220675965269313],
          [127.41468660157614, 5.289872798079709]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Viewing script for looking at reefs and classifications for each region. 
// From this region Timor Sea onwards the map_viewer script is going to be used from the very beginning
// in the workflow 

//Viewer for Indonesia

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove ;      //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.indonesia;       //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################


/*
// Choose which layers will be shown in the map viewer
var vars = {
  raw: true, // set to true if you want to view the raw classifications for benthic and geo
  geo_cleanup_stage: 3, // set to 0, 1, 2 or 3 - this controls the display of the geo clean stages (0 = cleanup not ready)
  benthic_cleanup_stage: 0, // set to 0, 1 or 2 - this controls the display of the benthic clean stages (0 = cleanup not ready)
};

*/
// choose where to centre the map (link this dynamically to map app?)
Map.centerObject(centre_map, 6);

// Add low-tide base map to viewer
// var low_tide_image = ee.Image(region_params.pixels);
// Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + " from stack", false); // image data

//print (region_params.image[0])
var low_tide_image_dove = ee.ImageCollection([region_params.image[0], region_params.image[1]]).mosaic();
Map.addLayer(low_tide_image_dove, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + ' low tide', false); // image data


var wcmc=wcmc.filterBounds(region_wcmcBound)

Map.addLayer(wcmc, {color:'#ffff00'}, "WCMC layer", false)




/*

// Load the raw classifications
if (vars.raw) {
// geo raw (test if more than one map exists for the region)
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0, false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }

  // benthic raw (test if more than one map exists for the region)
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
    var benthic_map_raw = ee.Image(region_params.benthic_map[0]).unmask(0, false)
                     .add(ee.Image(region_params.benthic_map[1]).unmask(0, false))
                     .selfMask();
  } else {
      var benthic_map_raw = ee.Image(region_params.benthic_map);
  }

  // Add the raw region classification to the viewer
  Map.addLayer(geo_map_raw, map_palettes.geo, 'Geomorphic RAW', false);
  Map.addLayer(benthic_map_raw.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW', false);
  Map.addLayer(benthic_subreg2_no_b4p.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW (no band4 outer reefs)', false); // test without band b4p
}

// Add geo clean stage 1 to the viewer
if (vars.geo_cleanup_stage == 1||vars.geo_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'Geomorphic - stage 1 clean', false);
  //Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean1_10m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_10m_4m), map_palettes.geo, 'timor_geo_clean1_10m_4m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_15m), map_palettes.geo, 'timor_geo_clean1_15m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_15m_4m), map_palettes.geo, 'timor_geo_clean1_15m_4m', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.geo_cleanup_stage == 2||vars.geo_cleanup_stage == 3) {
  Map.addLayer(ee.Image(region_params.geo_map_clean2), map_palettes.geo, 'Geomorphic - stage 2 clean', false);
  //Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean2_10m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_10m_4m), map_palettes.geo, 'timor_geo_clean2_10m_4m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_15m), map_palettes.geo, 'timor_geo_clean2_15m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_15m_4m), map_palettes.geo, 'timor_geo_clean2_15m_4m', false);
}

// Add geo clean stage 3 to the viewer
if (vars.geo_cleanup_stage == 3) {
  var geo_map_clean3 = ee.Image(region_params.geo_map_clean3)
  Map.addLayer(geo_map_clean3.updateMask(geo_map_clean3.gt(2)), map_palettes.geo, 'Geomorphic - stage 3 clean', true);
}

// Add benthic clean stage 1 to the viewer
if (vars.benthic_cleanup_stage == 1||vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean1), map_palettes.benthic, 'Benthic - stage 1 clean', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean2), map_palettes.benthic, 'Benthic - stage 2 clean', false);
}

// Geo Training Data - Needs more work + add flag to show
var geo_train = ee.FeatureCollection(region_params.geo_train_library);

var geo_buff = function(feature) {
  return feature.buffer(20);   // substitute in your value of Z here
};

var geo_train_buff = geo_train.map(geo_buff)

// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// Paint the interior of the polygons with different colors.
var geo_fill = empty.paint({
  featureCollection: geo_train_buff,
  color: 'class_num',
});

Map.addLayer(geo_fill, map_palettes.geo, 'Geo Training Data', false);


////////// UI SET UP //////////

//Generate title
var title = ui.Label({
  value: 'Coral Atlas map classes',
  style: {fontWeight: 'bold', fontSize: '14px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
pkg_vis.add_lgds([title, geo_legend, benthic_legend]);//, mask_legend])
// generate the legend

*/