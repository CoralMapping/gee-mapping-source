/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geo_east = ee.Image("projects/coral_atlas/Indonesia/in_out/indo_geo_clean3_east_RC"),
    geo_west = ee.Image("projects/coral_atlas/Indonesia/in_out/indo_geo_clean3_west_RC"),
    global_mask = ee.Image("projects/coral_atlas/reefMask/global_reef_mask_combined"),
    land_dist = ee.Image("projects/coral_atlas/global_datasets/ls8_global_distToLand"),
    region_west = ee.FeatureCollection("projects/coral_atlas/Indonesia/in_out/indo_west"),
    region_east = ee.FeatureCollection("projects/coral_atlas/Indonesia/in_out/indo_east"),
    gebco = ee.Image("projects/coral_atlas/global_datasets/GEBCO_RN5136"),
    image = ee.Image("projects/coral_atlas/Indonesia/in_out/indo_pixels");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// A bespoke cleanup script for the beast that is the Indonesian reef region!

var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');

// Load the clean 3 outputs ++
Map.addLayer(image, {bands:['b3','b2','b1'],min:0,max:2000}, "Dove image", false)
var man_geo = geo_east.unmask(0, false).add(geo_west.unmask(0, false)).selfMask();
Map.addLayer(man_geo, map_palettes.geo, 'Geo clean stage 3', false);

//Map.addLayer(gebco.gt(-100).selfMask(), {min:0, max:1}, "GEBCO", false)

/*//the "DEEP WATER" CLEAN

 - ML: when checking this reprojected to 5m (export), it is probably too intensive to do
   at 15 pixels (kernel), but also it's quite patchy so i think we'd really need to 
   dial it up to more than 15 pixels... so getting a bit hectic.
 
// Define a kernel for deep water Morphological Operations
var kernel_dw = ee.Kernel.circle({radius: 15});
// Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
var deepwater = man_geo.eq(2)
          .focal_max({kernel: kernel_dw, iterations: 2})
          .focal_min({kernel: kernel_dw, iterations: 2});
// Deep lagoon (outside reef mask and global mask) -> deepwater 
man_geo = man_geo.where({
  test: deepwater.eq(1)
                  .and(man_geo.eq(12)),
  value: ee.Image(2)
});var
// Reef classes in deepwater -> deepwater
man_geo = man_geo.where({
  test: deepwater.eq(1)
                  .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(24))),
  value: ee.Image(2)
});*/

// use the global reef mask "deep water" to remove just deep lagoon/BRS
var smooth_deep = global_mask.eq(2).focal_max(5)

man_geo = man_geo.where({
  test: smooth_deep.eq(1)
                   .and(man_geo.eq(12).or(man_geo.eq(24))),//.or(man_geo.eq(22)).or(man_geo.eq(24))),
  value: ee.Image(2)
})

// add in distance to land for to deal with non reef flat classes
man_geo = man_geo.where({
  test: smooth_deep.eq(1)
                   .and(land_dist.unmask(50000).gt(2000))
                   .and(man_geo.eq(15).or(man_geo.eq(16)).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(23))),
  value: ee.Image(2)
})

// add in distance to land + GEBCO to deal with reef flat classes
man_geo = man_geo.where({
  test: smooth_deep.eq(1)
                   .and(land_dist.unmask(50000).gt(2000))
                   .and(gebco.lt(-50))
                   .and(man_geo.eq(13).or(man_geo.eq(14))),
  value: ee.Image(2)
})

//Map.addLayer(man_geo.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.geo, 'Geo bespoke clean', false);
Map.addLayer(man_geo, map_palettes.geo, 'Geo bespoke clean', false);


// Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
