/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var map_centre = /* color: #d63000 */ee.Geometry.Point([121.23245564013276, -5.836208490092446]),
    region_extent = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[95.07287823076268, 2.914572958865811],
          [96.41321026201268, 1.1579394198646136],
          [105.18030010576268, -10.580643604685124],
          [105.61975323076268, -10.753387200258004],
          [113.19206467354273, -8.804681064100183],
          [115.65300217354273, -9.23869664771339],
          [121.23405686104273, -11.077013810880299],
          [122.77214279854273, -11.271018824085145],
          [131.20964279854275, -8.60920626244314],
          [132.08854904854275, -7.869852859005207],
          [133.20915451729275, -6.190740635001224],
          [133.42888107979275, -5.272512805945724],
          [133.02946326747278, -4.440844812838936],
          [134.17204139247278, -0.841751911066073],
          [134.50163123622278, 1.091745486875125],
          [127.25065467372278, 4.974709524404567],
          [124.8567261295262, 5.062263214294765],
          [124.4172730045262, 2.3435991781797507],
          [118.2429565982762, 1.926409440124578],
          [115.9797730045262, -2.840130093431536],
          [111.3655151920262, -2.466996131599118],
          [107.8938355045262, 1.8824884024017308],
          [103.8508667545262, 1.9483695359460274],
          [95.3694214420262, 6.28667856942217],
          [94.6553101139012, 6.232074405406377]]]),
    notReef_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[110.34992066800612, -2.8407286276914907],
           [110.16315308988112, -3.2137418697529565],
           [109.73468629300612, -3.707223670627178],
           [115.07404176175612, -4.988897504489022],
           [115.77203550912309, -4.263323548430918],
           [116.01083671894574, -4.16884763469857],
           [115.97492066800612, -3.7894448617990215],
           [115.73464492601963, -3.8291263595519953],
           [115.64818757055924, -3.737230691992262],
           [115.83631379165372, -3.63720617295028],
           [115.96879088507752, -3.8009574772486783],
           [116.44702244871868, -3.5593729124921487],
           [116.3648386655284, -3.2738851368760797],
           [116.99790044818869, -3.356999479997479],
           [117.04515276102131, -2.5482340204378837],
           [116.8068346826832, -2.4856785946924247],
           [116.9409331489126, -2.0815354865482263],
           [117.51960431545274, -2.0123886160199365],
           [118.09790586936796, -0.37271184333401947],
           [116.60881208653858, -0.2395398057314384],
           [115.11798707425612, -1.951623103506647],
           [113.05255738675612, -2.160228853313271],
           [109.39411012113112, 2.024628699086154],
           [108.35575751170462, 2.052430806604242],
           [108.16602254960397, -0.5260402558730372],
           [109.41113180763607, -1.0686360591235327],
           [109.46279800510831, -1.822983616211455],
           [109.72841558203848, -2.198272625342242],
           [110.16987078394351, -2.0904068494416665]]],
         [[[106.9759110032797, -4.996633897145968],
           [106.89699176197443, -6.062114002868484],
           [107.40027344599504, -6.165185478467703],
           [107.68932065907487, -6.090772836497944],
           [107.62685094468596, -6.262142176679598],
           [107.5966385423422, -6.505072170931284],
           [108.7172440110922, -7.001480218672673],
           [109.09352574937346, -7.0669020356670025],
           [110.3816727220297, -7.1404905078606715],
           [110.6783035814047, -6.76152236272459],
           [110.6178787767172, -6.660595154037461],
           [110.5574539720297, -6.584203987249632],
           [110.6343582689047, -6.466866134365857],
           [110.7387283860922, -6.420469209002739],
           [110.77443395249846, -6.458678750226039],
           [111.2386063157797, -6.712425252802431],
           [111.2495926439047, -6.6142162124396275],
           [111.4967850267172, -6.592389319883579],
           [111.5132645189047, -6.6715072102254],
           [111.7879227220297, -6.8406127559751235],
           [113.1447342454672, -7.905630800440454],
           [113.71876988999846, -7.932834686396384],
           [113.8423660814047, -7.87298377013677],
           [113.7764481126547, -7.679769884382625],
           [114.0291336595297, -7.589936194310328],
           [114.02981464576635, -7.677728887858739],
           [114.17470250718596, -7.7573382523257655],
           [114.33813109377472, -7.804279980258808],
           [114.27907262437346, -7.644383109754949],
           [114.33400426499846, -7.282182995392405],
           [114.18568883531096, -7.197717807852687],
           [113.9467361985922, -7.271285151637358],
           [113.71876988999846, -7.306702174816175],
           [113.52101598374846, -7.2876318179675605],
           [113.26833043687346, -7.3148749358809],
           [113.22987828843596, -7.388423031853646],
           [113.29030309312346, -7.611715790613795],
           [113.30678258531096, -7.704266695188279],
           [113.2326248704672, -7.706988475679168],
           [113.1007889329672, -7.611715790613795],
           [113.0293778001547, -7.410212714972365],
           [113.0678299485922, -7.372080064139644],
           [113.18593297593596, -7.306702174816175],
           [113.2161453782797, -7.265836130554445],
           [113.30678258531096, -7.246764036763075],
           [113.31776891343596, -7.200442737789442],
           [113.4523514329672, -7.197717807852687],
           [113.4688309251547, -7.230415885170105],
           [113.51552281968596, -7.265836130554445],
           [113.60341344468596, -7.192267898885737],
           [113.6885574876547, -7.192267898885737],
           [113.8203934251547, -7.175917779674087],
           [113.92201696031096, -7.162292231531116],
           [113.97694860093596, -7.129589256093014],
           [113.9906815110922, -7.058724813188075],
           [113.9906815110922, -6.98784951579819],
           [114.28914143942158, -6.929679508753236],
           [114.22871663473408, -6.763332790980699],
           [114.13258626364033, -6.242112475826805],
           [113.46242024801533, -6.231191168390953],
           [113.29762532614033, -6.924226440848969],
           [112.82246663473408, -6.91059349544674],
           [112.84443929098408, -6.847876894384792],
           [113.27565266989033, -6.86151164204874],
           [113.30037190817158, -6.242112475826805],
           [113.21377241796978, -5.47502450893756],
           [112.8844386733448, -5.195685150185493],
           [112.41248973351912, -5.1567703198440835],
           [112.25884583597015, -5.4461663210367135],
           [112.40180176759806, -5.749443542438153],
           [112.75627598857031, -5.608581075153893],
           [112.95698635450319, -5.806477195727858],
           [112.85542561910908, -5.938963080315185],
           [112.59999349020283, -5.985402401740005],
           [112.42695882223408, -6.907866859162129],
           [112.15779378317158, -6.921499883258255],
           [112.15779378317158, -6.86151164204874],
           [112.41322591207783, -6.831514682896389],
           [112.61372640035908, -6.007715767107099],
           [112.5134311570571, -5.953057972890165],
           [112.36928059957783, -5.592373463471385],
           [111.83644368551533, -5.592373463471385],
           [110.76253011129658, -5.666173541092436],
           [110.57026936910908, -5.666173541092436],
           [110.57850911520283, -5.7126354263089425],
           [110.64168050192158, -5.964010060637277],
           [110.51259114645283, -5.958546601901208],
           [110.27089192770283, -5.961278338069275],
           [110.11982991598408, -5.912105012188589],
           [110.00996663473408, -5.7590935428208905],
           [110.10335042379658, -5.6552407883804365],
           [110.48237874410908, -5.584172878000839],
           [110.97676350973408, -5.584172878000839],
           [110.97676350973408, -4.966077350280294],
           [110.42195393942158, -4.9715498709743295],
           [109.76277425192158, -5.1302329912529565],
           [109.52656819723408, -5.442011306529461],
           [109.18599202535908, -5.933960365399866],
           [108.65315511129658, -5.704436543082954],
           [108.49934651754658, -5.7754896196622365],
           [108.40046956442158, -6.015910197251888],
           [108.32905843160908, -5.961278338069275],
           [108.41145589254658, -5.720834192170401],
           [108.88386800192158, -5.616974529663993],
           [108.81795003317158, -5.1630590965463545],
           [108.39497640035908, -5.15758819671194],
           [107.92805745504658, -5.305285779941098],
           [107.60945393942158, -5.152117249725752]]],
         [[[106.41876356967573, -7.360924767122757],
           [106.32400648959761, -7.887687981636176],
           [107.51052992709761, -8.094401192061868],
           [107.59979384311323, -7.557005198541027],
           [107.85110609897261, -7.6808713967261975],
           [107.91977064975386, -7.729863474117674],
           [107.88823655189859, -7.77606967451662],
           [107.71963870751209, -7.707362861549039],
           [107.56209258508706, -7.605932631349627],
           [107.48955454334774, -8.079987194393091],
           [107.74124281772261, -8.203155204567228],
           [108.71902602084761, -8.453175901356316],
           [111.26785414584761, -8.898460090957629],
           [112.05886977084761, -8.78990308817075],
           [112.09182875522261, -8.257521078484018],
           [112.87872450717573, -8.371664991358987],
           [112.86773817905073, -8.431441336727952],
           [112.70227507611033, -8.473686446285678],
           [112.47944976580698, -8.41188733095312],
           [112.07690991552813, -8.327939099850331],
           [111.99295180209761, -8.525162878520838],
           [112.03684294860919, -8.774271492326552],
           [112.22366469272261, -8.876751253718393],
           [113.24539320834761, -8.92016764045587],
           [113.24539320834761, -8.420573595906637],
           [113.42117445834761, -8.431441336727952],
           [113.49807875522261, -8.779045631885891],
           [113.45413344272261, -9.039536008551234],
           [113.90457289584761, -9.12632455389642],
           [114.22317641147261, -9.072084175006426],
           [114.33303969272261, -8.627008053197601],
           [114.41681044467573, -8.12703049675281],
           [114.20741744791175, -8.103965585208838],
           [114.00344984897261, -8.257521078484018],
           [112.31155531772261, -7.942096325156955],
           [110.94925063022261, -7.865922637030906],
           [109.55398695834761, -7.484846935069598],
           [108.08181898959761, -7.33232240451999],
           [106.54235976108198, -6.885346707749252],
           [105.86740562443515, -6.762614916282695],
           [105.42120631923056, -6.863527694480801],
           [105.14769088252746, -6.871527731665753],
           [105.26413911648768, -7.165790898509388],
           [105.51634291580524, -7.160058034811897],
           [105.54880893403289, -7.073897923829963],
           [105.54662444623952, -7.036684991432213],
           [105.50873619696854, -7.032181363099228],
           [105.50162681952519, -6.987737697365486],
           [105.5491038910117, -6.978346779967613],
           [105.58638873581708, -7.0031815062431315],
           [105.57757479416351, -7.0469509588981865],
           [105.54678504175584, -7.036203651329311],
           [105.5050079664864, -7.114043631934153],
           [105.51433288099324, -7.155689461498995],
           [105.60056766165312, -7.1673527966515325],
           [105.7772778499831, -7.114050993466037],
           [105.80244579258749, -6.985602700403991],
           [105.74588727734482, -7.007079284759666],
           [105.73602282911824, -6.954946812503624],
           [105.8393790173637, -6.923580293086801],
           [105.8375182618894, -6.969243004687739],
           [105.80544288849454, -6.984915457118816],
           [105.77199357913244, -7.115073740090724],
           [105.84291851323844, -7.087142681560556],
           [106.46959449439281, -7.11161661949]]],
         [[[114.42918422842536, -8.240960091201769],
           [114.4585409124141, -8.554802386442097],
           [114.62492037647536, -8.64289644530895],
           [114.64304912021514, -8.817855864373344],
           [114.21515189831493, -8.82026600094986],
           [114.16384693058184, -9.0494388692165],
           [114.7829216974112, -9.093928966003988],
           [115.02107265615973, -9.136920234129779],
           [115.34709469914003, -9.132315687560629],
           [115.23361280912457, -8.964955949373044],
           [115.05420937382654, -8.8844097580333],
           [115.0616125795968, -8.798416598880097],
           [115.1185763182691, -8.720429675238524],
           [115.1790011229566, -8.705497805152328],
           [115.2119601073316, -8.61453631029],
           [115.69523947125133, -8.217540703333782],
           [115.70609544274565, -7.868106989932237],
           [115.16787696395058, -7.844927714800022],
           [115.12386985235905, -8.277095673535857],
           [114.4648897948316, -8.200184680424435],
           [114.42918422842536, -8.21241774370311]]],
         [[[105.36725575171572, -5.161003819705955],
           [106.02643543921572, -5.784366938811739],
           [106.33405262671572, -5.270412196643675],
           [106.64166981421572, -4.766980236385466],
           [108.59998280249697, -4.241266957324756],
           [109.11424160080244, -3.99136290736856],
           [109.02408182569702, -3.5660413578698567],
           [108.72304109099096, -3.6746394883727573],
           [108.28042002208815, -3.6341616186192907],
           [108.16971943336253, -3.7778884183317816],
           [108.05821922834839, -3.758342273892173],
           [108.10620652854685, -3.6580722209065817],
           [108.25928300990418, -3.714830990190207],
           [108.30798575078398, -3.6619469943515286],
           [108.69867760466413, -3.686211158736069],
           [108.69328117611111, -3.646755604999865],
           [108.9515282900759, -3.481191303483619],
           [108.7923746473944, -3.3474471136400887],
           [108.43566717187532, -3.4418349561501187],
           [108.3326262928674, -3.336859511347604],
           [107.89042188495054, -3.303163133861136],
           [107.71048393686465, -3.395960821340713],
           [107.72005775292078, -3.601172384078601],
           [107.63276974493415, -3.599896972329802],
           [107.61140756034797, -3.4670378636677053],
           [107.12925196980125, -3.5082604142320073],
           [107.1443384677458, -3.279295312894482],
           [106.99872547827822, -3.128477646669874],
           [106.55376582395981, -3.1806125324949868],
           [106.42741416274559, -3.1120030523344027],
           [106.35602528296572, -2.804815743764122],
           [105.91657215796572, -2.267014843510147],
           [105.49909168921572, -1.9376473007218549],
           [105.28761279331327, -2.0419629582168892],
           [105.13654286109072, -2.080381739900454],
           [105.03089745941172, -2.0714478124635027],
           [105.12026032176719, -1.911550725661672],
           [105.25356234666212, -1.8422359885408297],
           [105.31883766192641, -1.811693425715747],
           [105.34048791781328, -1.7579885812541678],
           [105.30720683440951, -1.7152648595868054],
           [105.3185458870264, -1.6301586152447691],
           [105.47303225976606, -1.5313242594446774],
           [106.05053008574541, -1.432545605594786],
           [106.39418125053287, -1.9102323401468473],
           [107.11732143909867, -2.1558873225674304],
           [107.11142495840201, -2.5522158898110603],
           [107.1415418997899, -2.7722562352815916],
           [107.5027305828831, -2.7121382476840066],
           [107.55690171289409, -2.4844576790832718],
           [107.95197295105038, -2.4035560122249384],
           [108.31973676987174, -2.5002657162236654],
           [108.93566959670838, -2.3930683685385024],
           [109.1560686583187, -2.417457973515599],
           [109.2671324157785, -1.9722477909266838],
           [108.59946516205437, -1.6857644981618984],
           [106.93954489916548, -1.6548741682579933],
           [106.60596424780947, -1.135940370400256],
           [106.22025359231125, -0.7324863927380607],
           [105.35112843091031, -1.2076746608581856],
           [105.26085024646193, -1.334318291125629],
           [105.14073798713115, -1.1098168624622013],
           [105.49634510718447, -0.6663342461630288],
           [105.31441239147841, -0.15895120182056038],
           [105.02261826855892, -0.33819829319171457],
           [104.87299193985724, -0.3616101605781097],
           [104.69459394463037, -0.23814660411532731],
           [104.67837317100013, -0.30432366143032835],
           [104.55804256904997, -0.32131792294943523],
           [104.6634455791918, -0.44319614550750336],
           [104.56663064008013, -0.5496191364004908],
           [104.54327796339317, -0.7349933399872276],
           [104.29059559546572, -0.751471764306049],
           [104.16837036228549, -0.6361218442721374],
           [104.13404041968447, -0.41640663642736264],
           [104.09792188471499, -0.2768727476649283],
           [104.39962799270656, -0.24719644743822283],
           [104.44822791511743, -0.023052105670627227],
           [104.15541820823633, 0.1450820125594351],
           [104.19661610810977, 0.3071267713576027],
           [104.09774066212357, 0.5405784631643189],
           [103.9494260784098, 0.7053662717594326],
           [103.77913646995508, 0.5790322720338],
           [103.55940990745508, 0.6669176931925871],
           [103.33968334495508, 0.9525334040275608],
           [103.21058692993702, 1.146131008111673],
           [103.55940990745508, 1.323248210789735],
           [103.42484541879219, 1.7529538377335139],
           [103.05129223167383, 2.0452824212766383],
           [101.70272045433008, 3.1372876926864324],
           [98.08821850120508, 6.202876175286711],
           [95.82503490745508, 6.137340061568328],
           [95.61629467308008, 5.350302188336541],
           [99.18488709918911, 2.346981992364004],
           [102.43684022418911, -1.519370783337919],
           [100.50290664031135, -2.309895898738205],
           [102.70051209918911, -4.984927668434735],
           [103.41756952029249, -4.2185451454486245]]],
         [[[131.23038812271213, -1.4263359180647672],
           [131.31827874771213, -1.5251800625224214],
           [131.50504632583713, -1.5581271162914383],
           [131.74674554458713, -1.7338357673896723],
           [131.86759515396213, -1.9424684733358926],
           [131.84562249771213, -2.1840108187440683],
           [131.57096429458713, -2.1071604434762787],
           [131.19194320483498, -1.9260080060737383],
           [130.82390415521675, -1.8683560600604994],
           [130.99418206802463, -2.1400967910684683],
           [131.23038812271213, -2.403561188763567],
           [131.60392327896213, -2.5023475287280723],
           [131.77970452896213, -2.61210138668492],
           [131.31827874771213, -3.1497491111093265],
           [132.29606195083713, -3.610370950273079],
           [132.50480218521213, -3.1058692648040633],
           [132.67783685318088, -3.185400125806099],
           [132.63940469669907, -3.244356973722134],
           [132.4471654810875, -3.171672074595345],
           [132.2535188197414, -3.580178662683565],
           [132.38395257583713, -3.665191907397155],
           [132.61466546646213, -3.8405961462398106],
           [132.74650140396213, -3.5994063600728956],
           [132.82340570083713, -3.6761556972474567],
           [132.92228265396213, -3.9063635318846495],
           [133.07609124771213, -4.059800570684484],
           [132.98819271127573, -4.30496198870874],
           [133.2244100891915, -4.33647025500271],
           [133.6061761865235, -4.559340064968981],
           [133.7242930058589, -4.404249138596068],
           [133.70231550055496, -4.314903733378007],
           [133.5375262103804, -4.377037782306337],
           [133.44963876715727, -4.329604048435494],
           [133.26834610416086, -4.150871793837803],
           [133.32877679458713, -4.015964344226573],
           [133.55948968521213, -3.6761556972474567],
           [133.57047601333713, -3.4568548218158184],
           [133.94401116958713, -3.555546683352342],
           [134.25162835708713, -3.818672553817145],
           [134.71305413833713, -3.9282848525762875],
           [134.65812249771213, -4.213208451014657],
           [134.43839593521213, -4.068034728023828],
           [134.27360101333713, -4.068019598921848],
           [133.9247307770184, -3.9420148997039943],
           [133.71879144302463, -3.7391948608138703],
           [133.53477966897276, -3.598020692662776],
           [133.32464900328557, -4.020720032831926],
           [133.53270190671532, -3.941636870238973],
           [133.56772943130588, -4.026923622597052],
           [133.45786369221761, -4.0543294227588405],
           [133.41116996101587, -3.9803505900350338],
           [133.29856309208404, -4.004999482795098],
           [133.64738031021213, -4.257033765205415],
           [133.71329827896213, -4.465169498866677],
           [133.94401116958713, -5.286155421187512],
           [133.55670839009272, -6.419825979104627],
           [134.02640863052463, -6.242586831681389],
           [134.22017628637983, -5.463802601303059],
           [134.38623157053863, -5.477582239430397],
           [134.43839593521213, -5.286155421187512],
           [134.66086907974338, -5.305299430423943],
           [134.76248475383287, -5.3449472523510275],
           [134.78995843521213, -5.458429943670778],
           [134.8558397802938, -5.685275518197071],
           [134.92179437271213, -6.0432377045095595],
           [134.73227952560595, -6.058243189347075],
           [134.74461645478473, -6.346996037790528],
           [134.83047107137622, -6.238833280497732],
           [134.96024652114963, -6.228935174204813],
           [134.84218587559064, -6.590451259958514],
           [134.81332505905132, -6.694833100567006],
           [134.77073236099338, -6.889253705376956],
           [134.70074457035332, -7.024180753705085],
           [134.55375238052463, -7.118244899705021],
           [134.42602787603252, -7.108069583526547],
           [134.4006218642237, -6.999384002488929],
           [134.40852048353503, -6.9082247291075465],
           [134.33557291344377, -6.941712730156442],
           [134.2516315007871, -6.953376025092163],
           [134.16373512989458, -6.959492830176757],
           [134.08683343521213, -6.905613930835417],
           [134.02637501862543, -6.687451104076847],
           [134.08681239535355, -6.2623481718717064],
           [134.01541912340016, -6.197567853261926],
           [133.58420892349338, -6.362705989696605],
           [133.36173577896213, -7.001037261282479],
           [133.48258538833713, -7.6439407906273225],
           [134.46036859146213, -8.11189309596719],
           [135.81168695083713, -7.622162832428901],
           [137.83317132583713, -4.903153769328838],
           [136.41593499771213, -4.31181189622681],
           [134.24064202896213, -3.1387793218918683],
           [134.06486077896213, -1.9644283600912897],
           [132.37296624771213, -1.656965142036481],
           [131.37321038833713, -1.140763356074503]]],
         [[[123.61654438616966, -9.814204686086823],
           [123.75387348773216, -9.852091943251983],
           [124.03402485491966, -10.063098003519572],
           [124.18234028460716, -10.495496627809889],
           [125.914516029341, -9.538039146728146],
           [125.683803138716, -9.13693200771451],
           [125.8431048965285, -9.055570771889386],
           [125.89252275281028, -9.177582273160358],
           [125.70020986413309, -9.212808996549098],
           [125.85398147945197, -9.557003582667793],
           [126.0848041152785, -9.478444469921472],
           [126.430873451216, -9.353804044837634],
           [126.6560931777785, -9.245384729070855],
           [126.78650359993517, -9.168091880707333],
           [126.5434186739397, -8.993169850347234],
           [126.44319169239712, -8.997252080728265],
           [126.375941810591, -8.91450109238406],
           [126.53515915174647, -8.846684795577373],
           [126.54337832153105, -8.986385975728867],
           [126.782435951216, -9.212852403045021],
           [127.068080482466, -9.024300533213],
           [126.903285560591, -8.611755535939182],
           [126.386928138716, -8.51941335793391],
           [124.5467181777785, -9.284613794138835],
           [124.1512103652785, -9.295456023460016],
           [124.0633197402785, -9.203286408697338],
           [123.893031654341, -9.007079447271598],
           [123.299769935591, -9.538372908782845],
           [123.299769935591, -9.668361298943939]]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Coral atlas mapping project - Indonesia Archipelago region 
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Paul Tudman (tuddy117@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script generates the data as an asset (for quick load)
// - Corresponding '_classification' script performs the machine learning classificaiton
///////////////////////////////

// load analysis params module
var param_module = require('users/mitchest/global_reefs:Modules/reef_params')

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.indonesia       //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################


// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. Segmentation and metrics calculation
// 4. Export data to asset

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  // OBIA settings
  pixel_based: true, // if true the metrics and output will simply be pixels (i.e. no segmentation)
  scale_factor: 20, // segment size (0 - Inf) - need to play around [~8-15 for SLIC; ~ 20 for SNIC]
  compactness: 10, // trades off color-similarity and proximity - small = more sensitive to 'colour' (a bit black box) [~800-1000 for SLIC; ~10 for SNIC]
  reduce_max: 1500, // the max size of object to be able to reduce
  segment_all_bands: true, // segement on all input bands or those chosen below
  segment_bands: (sensor_params.sname == 'dove') ? ['b1','b2','b3'] : ['B2','B3','B4'], // only handles Landsat/Sentinel-2/Dove
  
  // analysis parameters
  depth_limit: 2500, // depth limit for analysis in cm 
  min_depth: 0, // the minimum valid depth (also allows use of bathy/topo layers)
  all_bands: (sensor_params.sname == 'dove') ? ['b1','b2','b3','b4'] : ['B1','B2','B3','B4','B5'], // only handles Landsat/Sentinel-2/Dove
  red_band: (sensor_params.sname == 'dove') ? 'b3' : 'B4', // only handles Landsat/Sentinel-2/Dove
  green_band: (sensor_params.sname == 'dove') ? 'b2' : 'B3', // only handles Landsat/Sentinel-2/Dove
  blue_band: (sensor_params.sname == 'dove') ? 'b1' : 'B2', // only handles Landsat/Sentinel-2/Dove
  nir_band: (sensor_params.sname == 'dove') ? 'b4' : 'B5', // doesn't handle the Landsat-8/Sentinel-2 difference
  use_glcm: true, // use glcm metrics
  small_object: 400, // the smallest size a group of image pixels should be to not be considered noise
  
  // export options
  do_export: true, // export the results?
  export_scale: sensor_params.pixel, // pixel size to export at
  segments_output_name: region_params.sname + '_'+ 'segmentation',
  pixels_output_name: region_params.sname + '_' + 'pixels',
  asset_output: region_params.asset // asset path
}

var output_name = (vars.pixel_based) ? vars.pixels_output_name : vars.segments_output_name // export file path/name



// 2. Data loads & vis

Map.centerObject(map_centre, 6)

/*// load input data
var reflec = ee.Image(region_params.image).select(vars.all_bands)*/
// load input data (#### INDO SPECIFIC -> split ingestions)
var reflec = ee.ImageCollection(region_params.image)
                                 .mosaic()
                                 .select(vars.all_bands)


// import depth data (NB depth is 16bit s integer in centimeters)
/*var dove_depth = ee.Image(region_params.depth).rename('depth')
var s2_depth = ee.Image(region_params.s2_depth).rename('depth')
var ls8_depth = ee.Image(region_params.ls8_depth).rename('depth')*/

//(#### INDO SPECIFIC -> split ingestions)
var dove_depth = ee.ImageCollection(region_params.depth)
                                     .mosaic()
                                     .rename('depth')
var s2_depth = ee.ImageCollection(region_params.s2_depth)
                                   .mosaic()
                                   .rename('depth')
var ls8_depth = ee.ImageCollection(region_params.ls8_depth)
                                   .mosaic()
                                   .rename('depth')
                                   
Map.addLayer(dove_depth, {bands: ['depth'], min: vars.min_depth, max: vars.depth_limit, palette:['#9ecae1','#6baed6','#4292c6','#2171b5','#08519c','#08306b']}, "Dove depth (cm)", false) // water depth
Map.addLayer(s2_depth, {bands: ['depth'], min: vars.min_depth, max: vars.depth_limit, palette:['#9ecae1','#6baed6','#4292c6','#2171b5','#08519c','#08306b']}, "Sentinel-2 depth (cm)", false) // water depth
Map.addLayer(ls8_depth, {bands: ['depth'], min: vars.min_depth, max: vars.depth_limit, palette:['#9ecae1','#6baed6','#4292c6','#2171b5','#08519c','#08306b']}, "Landsat 8 depth (cm)", false) // water depth

// make the depth data for modelling/mapping
// --> Use S2 where possible, then LS8, then Dove (the GEE mosaic algorithm uses the LAST non-masked pixel in the stack)
var depth = ee.ImageCollection([dove_depth, ls8_depth, s2_depth]).mosaic()
// get back the negative retrievals as very shallow
depth = depth.where(depth.eq(-1), 10) // handle "too shallow" retrievals

// define a mask based on min/max depth
var depth_mask = depth.lt(vars.depth_limit).and(depth.gt(vars.min_depth)).and(reflec.select(0).gt(0))//.updateMask(waves)

// "NOT REEF" CLEAN
var not_reef_img = ee.Image().byte().paint(ee.Feature(notReef_mask, {zone: 1}), "zone");
// remove
depth_mask = depth_mask.where({
  test: not_reef_img.eq(1),
  value: ee.Image(0)
});

// clip and load other variables
var depth = depth.updateMask(depth_mask).int16().rename('depth'); // mask out depth below set limit

// add layers to the map
Map.addLayer(reflec, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname, false); // image data
Map.addLayer(depth, {bands: ['depth'], min: vars.min_depth, max: vars.depth_limit, palette:['#9ecae1','#6baed6','#4292c6','#2171b5','#08519c','#08306b']}, "Depth covariate (cm)", false); // water depth



// 3. Segmentation and metrics calculation

// calculate slope
var slope = ee.Terrain.slope(depth) // slope in degress

if (vars.use_glcm) {
  // glcm texture (mixed usefulness - will vary with image quality and type)
  var depth_glcm = depth.int16().glcmTexture().select(['depth_ent']).focal_max(5).rename('depth_maxent').multiply(100).int16() // maximum neighbourhood glcm entropy on depth
  var blue_glcm = reflec.select(vars.blue_band).int16().glcmTexture().select([vars.blue_band+'_savg']).focal_median(5).int16()
  var green_glcm = reflec.select(vars.green_band).int16().glcmTexture().select([vars.green_band+'_savg']).focal_median(5).int16()
}

// local variance in depth and red reflectance (5 pixels)
var depth_var = depth.reduceNeighborhood({reducer: ee.Reducer.stdDev(), kernel: ee.Kernel.circle(5)}).rename('depth_stdDev').multiply(10).int16()
var red_var = reflec.select(vars.red_band).reduceNeighborhood({reducer: ee.Reducer.stdDev(), kernel: ee.Kernel.circle(5)}).rename('red_stdDev').multiply(10).int16()

// segmentation functions

// ***SNIC segmentation***
  var run_snic = function(bands) {
    return(
    ee.Algorithms.Image.Segmentation.SNIC({
    image: bands,
    seeds: ee.Algorithms.Image.Segmentation.seedGrid(vars.scale_factor, "hex"),
    //size: 1000,
    neighborhoodSize: vars.scale_factor*2,
    compactness: vars.compactness,
    connectivity: 4
    })
    )
  }
  
  

// calculate pixel or object data
if (vars.pixel_based) {
  // pixel-based data generation
  // combine data to move forward with
  var all_data = reflec.addBands(depth).addBands(slope)//.addBands(waves)
                  .addBands(depth_var).addBands(red_var)
                  .updateMask(depth_mask) // make sure all layers are clipped down
  if (vars.use_glcm) { // add glcm if using
    all_data = all_data.addBands(depth_glcm).addBands(blue_glcm).addBands(green_glcm).updateMask(depth_mask)
  }
  
} else {
  //// OBIA data generation
  
  if (vars.segment_all_bands) { 
    // do the segmentation on all input bands (internal GEE mean calcs seem to be faster)
    var segmented_data_mean = run_snic(reflec
                                       .addBands(depth)
                                       .addBands(slope)//.addBands(waves)
                                       .updateMask(depth_mask)
                                       )
                                       .regexpRename('_mean', '')
    Map.addLayer(segmented_data_mean.randomVisualizer().reproject(ee.Projection('EPSG:4326').atScale(sensor_params.pixel)), {}, "SNIC clusters", false)
    // remove the cluster band - index starts at 0
    segmented_data_mean = segmented_data_mean.select(ee.List.sequence(1, segmented_data_mean.bandNames().length().subtract(1)))
    segmented_data_mean = segmented_data_mean.cast(ee.Dictionary.fromLists(segmented_data_mean.bandNames(), ee.List.repeat('int16', segmented_data_mean.bandNames().length())))
    
  } else {
    // segment on the bands specified by var segment_on
    var segment_on = reflec.select(vars.segment_bands)//.addBands(depth.multiply(100)) // which data to segment on (transform depth so it's on a similar scale - may help numerically)
                         .updateMask(depth_mask)
    var segmented_data = run_snic(segment_on)
    Map.addLayer(segmented_data.randomVisualizer().reproject(ee.Projection('EPSG:4326').atScale(sensor_params.pixel)), {}, "SNIC clusters", false)
    // Calculate object statistics
    var segmented_data_mean = reflec.addBands(depth).addBands(slope)//.addBands(waves)
                              //.addBands(depth_glcm).addBands(blue_glcm).addBands(green_glcm)
                              //.addBands(depth_var).addBands(red_var)
                              .addBands(segmented_data.select('clusters'))
                              .reduceConnectedComponents(ee.Reducer.mean(), 'clusters', vars.reduce_max) // need to be mindful that really big objects may make this fall over
    segmented_data_mean = segmented_data_mean.cast(ee.Dictionary.fromLists(segmented_data_mean.bandNames(), ee.List.repeat('int16', segmented_data_mean.bandNames().length())))
    
  
  }
  
  // combine data to move forward with
  var all_data = segmented_data_mean
                 //.addBands(segmented_data_sd)
                 //.addBands(depth_var).addBands(red_var)
                 .updateMask(depth_mask)
  //Map.addLayer(all_data.reproject(ee.Projection('EPSG:4326').atScale(sensor_params.pixel)), {bands: ['b3','b2','b1'], min: 95, max: 3000}, "Segmented image/predictor data (OBIA)", false) 
}




// Add any extra indices needed

all_data = all_data
              .addBands(all_data.select(vars.red_band).divide(all_data.select(vars.blue_band)).multiply(1000).int16().rename('rb'))
              .addBands(all_data.select(vars.green_band).divide(all_data.select(vars.blue_band)).multiply(1000).int16().rename('gb'))
              .addBands(all_data.select(vars.red_band).divide(all_data.select(vars.green_band)).multiply(1000).int16().rename('rg'))

// clean up noise
all_data = all_data.updateMask(depth_mask.selfMask().connectedPixelCount(vars.small_object, false).gte(vars.small_object))
Map.addLayer(all_data, {}, "Model predictor data", false)
// add noreefmask to viewer - check for slivers between polys
Map.addLayer(not_reef_img, {}, "noReef_mask", false);



// 4. Export data to asset

// export if specified in input params
if (vars.do_export) {
  Map.addLayer(region_extent, {}, "region extent (export geometry)", false);
  
  Export.image.toAsset({
    image: all_data,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    scale: vars.export_scale,
    region: region_extent,
    maxPixels: 1e13
    //pyramidingPolicy:{'.default': 'mean'},
  });
}