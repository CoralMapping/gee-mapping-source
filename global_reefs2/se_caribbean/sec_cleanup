/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    imageVisParam2 = {"opacity":1,"bands":["b3","b2","b1"],"min":44.94,"max":2202.06,"gamma":1},
    waves = ee.Image("projects/coral_atlas/coral_sea/in_out/cosea_waves"),
    wavespng = ee.Image("projects/coral_atlas/png_solomons/in_out/pns_waves"),
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    benthic_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -76.18842829383739,
                9.379300626204342
              ],
              [
                -76.18696917213329,
                9.377522273883466
              ],
              [
                -76.18525255836376,
                9.376675436240971
              ],
              [
                -76.18164766944774,
                9.376252016644647
              ],
              [
                -76.18293512977489,
                9.377268222807741
              ],
              [
                -76.1836217752827,
                9.378453792902784
              ],
              [
                -76.18636835731395,
                9.380062774408112
              ],
              [
                -76.18834246314891,
                9.381671748449534
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -76.08162797009001,
                9.941652343264339
              ],
              [
                -76.05828202282439,
                9.892952609555698
              ],
              [
                -75.98824418102751,
                9.836803681917148
              ],
              [
                -75.92919266735564,
                9.82394896880978
              ],
              [
                -75.88730729137907,
                9.838156780534769
              ],
              [
                -75.87906754528532,
                9.830714669581985
              ],
              [
                -75.85846818005095,
                9.832067793127088
              ],
              [
                -75.80971634899626,
                9.837480231918589
              ],
              [
                -75.7019130042697,
                9.912568650388023
              ],
              [
                -75.70877945934782,
                9.992767707381837
              ],
              [
                -75.97039139782439,
                9.992767707381837
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -63.93779348220192,
                10.659168428690583
              ],
              [
                -63.92474721755348,
                10.649721119320319
              ],
              [
                -63.909641016381606,
                10.662542396713357
              ],
              [
                -63.93092702712379,
                10.674013608122705
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -72.97127651607448,
                19.447990479103737
              ],
              [
                -72.93557094966823,
                19.22121883931628
              ],
              [
                -72.83532070552761,
                19.266598336261477
              ],
              [
                -72.86141323482448,
                19.46482378246594
              ],
              [
                -72.99050259029323,
                19.49201234926493
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -60.905881367058555,
                14.716487136541012
              ],
              [
                -60.897298056850026,
                14.710509964783519
              ],
              [
                -60.88184877428512,
                14.703868493762327
              ],
              [
                -60.87429567369918,
                14.692577510946276
              ],
              [
                -60.87910219225387,
                14.681285944675764
              ],
              [
                -60.87154909166793,
                14.672650824101336
              ],
              [
                -60.861936054558555,
                14.662686800010505
              ],
              [
                -60.859189472527305,
                14.651393691273425
              ],
              [
                -60.84682985338668,
                14.640764351421533
              ],
              [
                -60.83859010729293,
                14.63611385321914
              ],
              [
                -60.83035036119918,
                14.628805728314937
              ],
              [
                -60.817990742058555,
                14.620168539738295
              ],
              [
                -60.817990742058555,
                14.604222068609408
              ],
              [
                -60.83035036119918,
                14.590267957643535
              ],
              [
                -60.82211061510543,
                14.578306586945976
              ],
              [
                -60.81867726751204,
                14.569334938102578
              ],
              [
                -60.81661745104293,
                14.559034123813518
              ],
              [
                -60.80013795885543,
                14.562357082469687
              ],
              [
                -60.79464479479293,
                14.543747869467158
              ],
              [
                -60.79464479479293,
                14.535439678675896
              ],
              [
                -60.80082460436324,
                14.526466481770381
              ],
              [
                -60.80494447741012,
                14.517825281324134
              ],
              [
                -60.80460115465621,
                14.507854246073219
              ],
              [
                -60.80734773668746,
                14.499544707005327
              ],
              [
                -60.80288454088668,
                14.488575638237268
              ],
              [
                -60.80185457262496,
                14.478603286613664
              ],
              [
                -60.805974445671836,
                14.469295354041856
              ],
              [
                -60.80631776842574,
                14.464973681263565
              ],
              [
                -60.70126100573043,
                14.450013395524598
              ],
              [
                -60.67997499498824,
                14.542418579938644
              ],
              [
                -60.67928834948043,
                14.626812561107753
              ],
              [
                -60.730100117058555,
                14.71781537227895
              ],
              [
                -60.79258485826949,
                14.750354619704934
              ],
              [
                -60.83103700670699,
                14.760978626991852
              ],
              [
                -60.86399599108199,
                14.74769853682592
              ],
              [
                -60.881162128777305,
                14.74703451104154
              ],
              [
                -60.883908710808555,
                14.738401991537513
              ],
              [
                -60.89352174791793,
                14.731761359079831
              ],
              [
                -60.90210490830115,
                14.728109070651165
              ],
              [
                -60.91068788561324,
                14.727112795939881
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -69.1627799044903,
                19.035948747166778
              ],
              [
                -69.15677175629695,
                19.0068991755209
              ],
              [
                -69.16123495209773,
                19.00803528766974
              ],
              [
                -69.16192159760554,
                19.015987855397242
              ],
              [
                -69.15539846528132,
                19.026212026363474
              ],
              [
                -69.15745840180476,
                19.034163724414466
              ],
              [
                -69.1595183383282,
                19.03676011480225
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    sg_corals = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -75.86803900004129,
                9.858947616178204
              ],
              [
                -75.90340124369364,
                9.849138143359914
              ],
              [
                -75.94391332865457,
                9.794673361073317
              ],
              [
                -75.94665991068582,
                9.722603740367743
              ],
              [
                -75.91644750834207,
                9.66304152872163
              ],
              [
                -75.88108526468973,
                9.646795456487848
              ],
              [
                -75.82649694681864,
                9.650857048006289
              ],
              [
                -75.7914780259202,
                9.69451606062435
              ],
              [
                -75.74169622660379,
                9.715497441650932
              ],
              [
                -75.7145737290452,
                9.741553131709646
              ],
              [
                -75.7475327134202,
                9.774035298409872
              ],
              [
                -75.79388128519754,
                9.814633545131475
              ],
              [
                -75.83405004740457,
                9.841696279805024
              ],
              [
                -75.85464941263895,
                9.854888559360043
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -75.74723954958927,
                10.162593055501649
              ],
              [
                -75.69505449099552,
                10.17273098569449
              ],
              [
                -75.69848771853458,
                10.202467056312127
              ],
              [
                -75.7547926501752,
                10.207873316453817
              ],
              [
                -75.83032365603458,
                10.161330249401104
              ],
              [
                -75.80148454470645,
                10.145108828346485
              ],
              [
                -75.77264543337833,
                10.146460644841166
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -75.5754340684625,
                10.391871637054857
              ],
              [
                -75.60667643906797,
                10.346448866427272
              ],
              [
                -75.60478816392148,
                10.316726318861484
              ],
              [
                -75.59088359238828,
                10.312841914760064
              ],
              [
                -75.58144221665586,
                10.32061067502608
              ],
              [
                -75.58264384629453,
                10.339356241169304
              ],
              [
                -75.57440410020078,
                10.363504285051379
              ],
              [
                -75.56667933823789,
                10.37566203654918
              ],
              [
                -75.56942592026914,
                10.391259362092406
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -72.0905937098559,
                19.77460089666077
              ],
              [
                -72.0741142176684,
                19.76862385455991
              ],
              [
                -72.05969466200433,
                19.76232348650182
              ],
              [
                -72.04905165663324,
                19.76393898922373
              ],
              [
                -72.04081191053949,
                19.76232348650182
              ],
              [
                -72.03497542372308,
                19.75650754120458
              ],
              [
                -72.0275939845141,
                19.754084168078393
              ],
              [
                -72.02192915907465,
                19.752953248022212
              ],
              [
                -72.01780928602777,
                19.74988356746407
              ],
              [
                -72.01420439711175,
                19.754084168078393
              ],
              [
                -72.02639235487543,
                19.76668530628893
              ],
              [
                -72.06020964613519,
                19.780093116093443
              ],
              [
                -72.09849013319574,
                19.778477777088185
              ],
              [
                -72.09557188978754,
                19.775247049948703
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -72.01317442885004,
                19.747944791424082
              ],
              [
                -72.00613631239496,
                19.751983881594033
              ],
              [
                -72.0004714869555,
                19.752468565544266
              ],
              [
                -71.994978322893,
                19.751014509276846
              ],
              [
                -71.98759688368402,
                19.747460093734002
              ],
              [
                -71.98296202650629,
                19.745036583204694
              ],
              [
                -71.97918547621332,
                19.748914182388184
              ],
              [
                -71.9972099207934,
                19.760223308497082
              ],
              [
                -72.01677931776605,
                19.75020669451416
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -71.78143156996332,
                19.81578792558478
              ],
              [
                -71.77559508314691,
                19.814172948789725
              ],
              [
                -71.75774229994379,
                19.82676933273963
              ],
              [
                -71.74057616224847,
                19.83613522746637
              ],
              [
                -71.73336638441644,
                19.841625322806443
              ],
              [
                -71.73662723651275,
                19.850829320488167
              ],
              [
                -71.76323546400629,
                19.856802833704933
              ],
              [
                -71.77319182386957,
                19.850021572034763
              ],
              [
                -71.80580748549066,
                19.83096790555128
              ],
              [
                -71.79894103041254,
                19.81643391171018
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -70.37479779876946,
                19.741553966976763
              ],
              [
                -70.38956067718743,
                19.730889850990085
              ],
              [
                -70.36981961883782,
                19.704872885158327
              ],
              [
                -70.36243817962884,
                19.70115583019288
              ],
              [
                -70.35694501556634,
                19.705034494284803
              ],
              [
                -70.35866162933587,
                19.722325727282673
              ],
              [
                -70.36072156585931,
                19.7357372647141
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -70.46097668593698,
                19.787432282188966
              ],
              [
                -70.4202929395991,
                19.758355014198266
              ],
              [
                -70.41196736281687,
                19.749630799704796
              ],
              [
                -70.38604649489693,
                19.736705160823938
              ],
              [
                -70.37746342604927,
                19.74446066973998
              ],
              [
                -70.40089520400339,
                19.763605468859264
              ],
              [
                -70.40990742629343,
                19.77337893169416
              ],
              [
                -70.45059236304341,
                19.788799716046544
              ],
              [
                -70.4565146805483,
                19.788557429483948
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -68.64022095822807,
                18.209012393028637
              ],
              [
                -68.63747437619682,
                18.200206656431664
              ],
              [
                -68.63232453488823,
                18.188464982135066
              ],
              [
                -68.62614472531791,
                18.179332022151844
              ],
              [
                -68.6196215929937,
                18.167588942568035
              ],
              [
                -68.61550171994682,
                18.166284107182584
              ],
              [
                -68.61309846066948,
                18.17150339021358
              ],
              [
                -68.62305482053276,
                18.19107431143271
              ],
              [
                -68.63129456662651,
                18.205751061000015
              ],
              [
                -68.6361010851812,
                18.211947539643262
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -68.65500050475713,
                18.10291396370444
              ],
              [
                -68.67147999694463,
                18.09785580279382
              ],
              [
                -68.66015034606572,
                18.09083940250828
              ],
              [
                -68.64281254699345,
                18.088391754971184
              ],
              [
                -68.63766270568486,
                18.091655277430355
              ],
              [
                -68.63800602843877,
                18.09622410685077
              ],
              [
                -68.6455591290247,
                18.101119149120475
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -68.56519544467682,
                18.127713155561928
              ],
              [
                -68.564508799169,
                18.11939276555197
              ],
              [
                -68.56691205844635,
                18.11090882353994
              ],
              [
                -68.5700019632315,
                18.107645659503007
              ],
              [
                -68.57858503207916,
                18.10601405469419
              ],
              [
                -68.58545148715729,
                18.10992988071057
              ],
              [
                -68.59815442905182,
                18.112703537852475
              ],
              [
                -68.61343229160065,
                18.11172460505234
              ],
              [
                -68.62956846103424,
                18.117598119785157
              ],
              [
                -68.64158475742096,
                18.11890331853061
              ],
              [
                -68.64021146640533,
                18.107971978641622
              ],
              [
                -68.62081373080963,
                18.09883481307042
              ],
              [
                -68.59729612216705,
                18.096387277128443
              ],
              [
                -68.55146253452057,
                18.102913963704452
              ],
              [
                -68.54974592075104,
                18.1096035652185
              ],
              [
                -68.55541074619049,
                18.11939276555197
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -65.6148785756461,
                18.163457116370626
              ],
              [
                -65.57882968648595,
                18.13572661165892
              ],
              [
                -65.55788699849766,
                18.129201147838952
              ],
              [
                -65.53557101949376,
                18.131158812539134
              ],
              [
                -65.52012149556798,
                18.138662990967948
              ],
              [
                -65.50982181295079,
                18.153996615140358
              ],
              [
                -65.52424136861485,
                18.159216265383915
              ],
              [
                -65.55926028951329,
                18.163457116370626
              ],
              [
                -65.59633914693516,
                18.16965509795149
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -64.65878243156456,
                10.321754670456178
              ],
              [
                -64.69654793449425,
                10.317701442888728
              ],
              [
                -64.737746664963,
                10.206893076168512
              ],
              [
                -64.6663355321505,
                10.158909165370972
              ],
              [
                -64.58462471672081,
                10.2062172965915
              ],
              [
                -64.52763313957237,
                10.230544456594032
              ],
              [
                -64.52488655754112,
                10.259599454402899
              ],
              [
                -64.53381294914269,
                10.300812433032368
              ],
              [
                -64.57089180656456,
                10.33796705832768
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -64.06619619216286,
                10.82107650420661
              ],
              [
                -64.04353689040505,
                10.759696579038604
              ],
              [
                -63.98585866774879,
                10.744180990275288
              ],
              [
                -63.909641016381606,
                10.667940667739602
              ],
              [
                -63.92543386306129,
                10.690207522505698
              ],
              [
                -63.88423513259254,
                10.686833861549244
              ],
              [
                -63.83067678298317,
                10.702352391376156
              ],
              [
                -63.868442285912856,
                10.765767679109462
              ],
              [
                -63.907583833003464,
                10.741485625175095
              ],
              [
                -63.953586328881606,
                10.741482545593763
              ],
              [
                -64.00799604156688,
                10.771332183576034
              ],
              [
                -64.01709272855786,
                10.793085892676093
              ],
              [
                -64.03804372634255,
                10.825797517292536
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -69.13102254975398,
                19.08584047603097
              ],
              [
                -69.09514532197078,
                19.08032473050946
              ],
              [
                -69.07265768158992,
                19.073835382981702
              ],
              [
                -69.05446157563289,
                19.06945492972403
              ],
              [
                -69.05660742754372,
                19.064912173644462
              ],
              [
                -69.04326090343493,
                19.06199173958837
              ],
              [
                -69.03847571886078,
                19.057286311421127
              ],
              [
                -69.0348813689215,
                19.06612870087239
              ],
              [
                -69.04364690888484,
                19.07464656532279
              ],
              [
                -69.04587850678523,
                19.08081142132673
              ],
              [
                -69.06785116303523,
                19.08973383284806
              ],
              [
                -69.10321340668757,
                19.098169125171868
              ],
              [
                -69.11952123749812,
                19.093789315506612
              ],
              [
                -69.13479910004695,
                19.09119381805073
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPoint(),
    rb_sand = /* color: #98ff00 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -73.28824476293015,
                18.880674098065906
              ],
              [
                -73.26489881566452,
                18.859882400572225
              ],
              [
                -73.20653394750046,
                18.804641943693618
              ],
              [
                -73.05753187230515,
                18.7253239467228
              ],
              [
                -72.97994092992234,
                18.737028947038066
              ],
              [
                -73.00122694066452,
                18.76368730828371
              ],
              [
                -73.06989149144577,
                18.807891884965912
              ],
              [
                -73.26489881566452,
                18.896266178156633
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -72.16089749444349,
                19.74290274243663
              ],
              [
                -72.12107205499036,
                19.711878144807923
              ],
              [
                -72.07438016045911,
                19.68278711691028
              ],
              [
                -72.04142117608411,
                19.670502651412775
              ],
              [
                -71.98854947198255,
                19.687959241620625
              ],
              [
                -71.98374295342786,
                19.711878144807923
              ],
              [
                -72.00502896417005,
                19.731269224309305
              ],
              [
                -72.00296902764661,
                19.74161017116501
              ],
              [
                -72.0187618743263,
                19.7209276080033
              ],
              [
                -72.0242550383888,
                19.74419530324294
              ],
              [
                -72.06751370538099,
                19.754535412873093
              ],
              [
                -72.13755154717786,
                19.775859772312213
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -68.4347532470657,
                18.71728739609562
              ],
              [
                -68.44659788207547,
                18.706556590421012
              ],
              [
                -68.37364179687039,
                18.637277759149352
              ],
              [
                -68.35510236815945,
                18.672083339602366
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -64.43655256287624,
                18.736058171462318
              ],
              [
                -64.42659620301296,
                18.71069616728378
              ],
              [
                -64.39741376893093,
                18.691509560780766
              ],
              [
                -64.36067823426296,
                18.690859129233935
              ],
              [
                -64.29064039246609,
                18.674922776211883
              ],
              [
                -64.27175764100124,
                18.684354676388946
              ],
              [
                -64.27553419129421,
                18.69313562871873
              ],
              [
                -64.29922346131374,
                18.7142730906169
              ],
              [
                -64.35896162049343,
                18.730205739030225
              ],
              [
                -64.41904310242703,
                18.742885753037655
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -69.13256750214656,
                19.039843275659692
              ],
              [
                -69.12776098359187,
                19.0305936213537
              ],
              [
                -69.12003622162898,
                19.012417361831314
              ],
              [
                -69.10681829560359,
                19.005925358931215
              ],
              [
                -69.09703359711726,
                19.00787298640931
              ],
              [
                -69.09291372407039,
                19.011118981525083
              ],
              [
                -69.10012350190242,
                19.015987855397242
              ],
              [
                -69.10767660248835,
                19.019882851832126
              ],
              [
                -69.11574468720515,
                19.02994450346207
              ],
              [
                -69.12261114228328,
                19.033514620474897
              ],
              [
                -69.1269026767071,
                19.037896022831536
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -69.14166555512507,
                19.055258220964024
              ],
              [
                -69.15968999970515,
                19.06191054440592
              ],
              [
                -69.1620932589825,
                19.0442245110165
              ],
              [
                -69.14818868744929,
                19.045035838207475
              ],
              [
                -69.13960561860164,
                19.05039049819532
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    bma_sg = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[-73.19694302060992, 18.9758152451206],
          [-73.26972744443805, 18.839400182957853],
          [-72.99300930478961, 18.69311813338887],
          [-72.94151089170367, 18.910219982605863]]]),
    rock_sand = 
    /* color: #ffc82d */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -68.43801481322781,
                18.71541768347572
              ],
              [
                -68.44625455932156,
                18.70322339860531
              ],
              [
                -68.3853147705032,
                18.653136327030136
              ],
              [
                -68.37827665404812,
                18.657365028285078
              ],
              [
                -68.37896329955593,
                18.664358418326692
              ],
              [
                -68.3823962309356,
                18.66671678836101
              ],
              [
                -68.3849714477493,
                18.667123167426315
              ],
              [
                -68.38475664099701,
                18.668221311424684
              ],
              [
                -68.38773922444602,
                18.668932835267956
              ],
              [
                -68.39158014705276,
                18.670782721670196
              ],
              [
                -68.39428393235383,
                18.672124241507582
              ],
              [
                -68.39612943725125,
                18.673465656813963
              ],
              [
                -68.40187911861825,
                18.676718037262827
              ],
              [
                -68.40458251497232,
                18.67997035625257
              ],
              [
                -68.40825168006134,
                18.68468627285938
              ],
              [
                -68.40865403712353,
                18.686678319737375
              ],
              [
                -68.4100863778103,
                18.68932075267878
              ],
              [
                -68.41306372052186,
                18.69001187883604
              ],
              [
                -68.41569777953978,
                18.691678615956565
              ],
              [
                -68.43149168090359,
                18.70468675919433
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -68.34211856107797,
                18.56669211852603
              ],
              [
                -68.36443454008187,
                18.547489248255307
              ],
              [
                -68.40288668851937,
                18.504519076572517
              ],
              [
                -68.41455966215219,
                18.478145674080487
              ],
              [
                -68.4046033022889,
                18.467725433749653
              ],
              [
                -68.39602023344125,
                18.468702358173182
              ],
              [
                -68.38984042387094,
                18.48205310096112
              ],
              [
                -68.382287323285,
                18.48661165308327
              ],
              [
                -68.360314667035,
                18.51330930823885
              ],
              [
                -68.35241824369515,
                18.52958632251272
              ],
              [
                -68.35104495267953,
                18.537073228756924
              ],
              [
                -68.34486514310922,
                18.546512773409848
              ],
              [
                -68.33628207426156,
                18.560833844772485
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -69.16003332245906,
                19.037571478473232
              ],
              [
                -69.15299520600398,
                19.036273294696706
              ],
              [
                -69.14406881440242,
                19.037896022831536
              ],
              [
                -69.13737402070124,
                19.034163724414466
              ],
              [
                -69.10475835908015,
                19.00235464932895
              ],
              [
                -69.08896551240046,
                19.010469787570386
              ],
              [
                -69.0994368563946,
                19.015825561898602
              ],
              [
                -69.1155730258282,
                19.028321697635956
              ],
              [
                -69.12879095185359,
                19.04341317985969
              ],
              [
                -69.14372549164851,
                19.046171689612024
              ],
              [
                -69.15968999970515,
                19.040979162595924
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -69.04502019990046,
                19.041465968903772
              ],
              [
                -69.06270132172664,
                19.039518735107624
              ],
              [
                -69.07918081391414,
                19.039518735107624
              ],
              [
                -69.08278570283015,
                19.038707380951994
              ],
              [
                -69.09926519501765,
                19.039518735107624
              ],
              [
                -69.10269842255671,
                19.028483978931927
              ],
              [
                -69.10595998871882,
                19.024913753804285
              ],
              [
                -69.10269842255671,
                19.015987855397242
              ],
              [
                -69.08948049653132,
                19.009820591081372
              ],
              [
                -69.06922445405085,
                19.01209276770518
              ],
              [
                -69.0580664645489,
                19.018097656461748
              ],
              [
                -69.04175863373835,
                19.027997134568462
              ],
              [
                -69.04141531098445,
                19.037084660746387
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -69.06785116303523,
                19.055582730736887
              ],
              [
                -69.07626257050593,
                19.051526312949203
              ],
              [
                -69.08158407319148,
                19.045035838207475
              ],
              [
                -69.0771208773907,
                19.043250913152466
              ],
              [
                -69.0661345492657,
                19.045522632618432
              ],
              [
                -69.06252966034968,
                19.048281107310512
              ],
              [
                -69.06201467621882,
                19.053148891966565
              ],
              [
                -69.05720815766414,
                19.055582730736887
              ],
              [
                -69.05669317353328,
                19.057692028785652
              ],
              [
                -69.06373128998835,
                19.057367523139472
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    corals_sg = 
    /* color: #00ffff */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-65.61438025112851, 18.09669859444893],
           [-65.50314119395944, 18.11497307382582],
           [-65.42554851241253, 18.13911856415532],
           [-65.43172845532563, 18.160650932812207],
           [-65.57524057913348, 18.21479638070507],
           [-65.57214154760348, 18.351374421178292],
           [-65.59532028881497, 18.367513130842855],
           [-65.62124686520555, 18.360187985971926],
           [-65.75514573728461, 18.175656775704528],
           [-65.7949720470499, 18.085602420337576],
           [-65.79342610106212, 18.081033889790664],
           [-65.7942834303576, 18.077444464172228],
           [-65.79290923999214, 18.074181417511326],
           [-65.79067722912492, 18.072631500482192],
           [-65.7860420004544, 18.072060675173844],
           [-65.72081267422836, 18.058838238641233]]],
         [[[-63.06792791251342, 18.25302486457347],
           [-63.10088689688842, 18.215851459301007],
           [-63.113933161536856, 18.204110839239533],
           [-63.135219172279044, 18.1943263847569],
           [-63.174357966224356, 18.19302174932433],
           [-63.217616633216544, 18.155183077256147],
           [-63.15307195548217, 18.125167267339833],
           [-63.096767023841544, 18.144743379910544],
           [-63.006816462318106, 18.201501705092568],
           [-63.008876398841544, 18.22237368394997],
           [-63.02466924552123, 18.259545695029598],
           [-63.047328547279044, 18.254981139414816],
           [-63.061061457435294, 18.24780802396897]]],
         [[[-63.168178156654044, 18.05728647071782],
           [-63.17023809317748, 18.040965057892286],
           [-63.141398981849356, 18.02203032174818],
           [-63.09814031485717, 18.001787490271287],
           [-63.06586797598998, 18.007664680889228],
           [-63.055568293372794, 18.018765506233635],
           [-63.05762822989623, 18.024642130582706],
           [-63.048015192786856, 18.026600961785437],
           [-63.025355891029044, 18.034436068640233],
           [-63.01917608145873, 18.068384165761813],
           [-63.00475652579467, 18.08535575466326],
           [-63.00200994376342, 18.091882851830448],
           [-63.00269658927123, 18.10036771498889],
           [-63.00750310782592, 18.1114626855809],
           [-63.04114873770873, 18.11407316479374],
           [-63.053508356849356, 18.114725778518007],
           [-63.06792791251342, 18.105588965125428],
           [-63.083720759193106, 18.094493622687292],
           [-63.094707087318106, 18.084050306087516],
           [-63.10088689688842, 18.07817566731085],
           [-63.11187322501342, 18.0742591322192],
           [-63.124232844154044, 18.07817566731085],
           [-63.13659246329467, 18.07817566731085],
           [-63.155131892005606, 18.070342509754205]]],
         [[[-61.0320536814225, 14.483927394766779],
           [-61.03396334024659, 14.47790230762025],
           [-61.030379862908624, 14.476531076508497],
           [-61.02733283648925, 14.476115548036972],
           [-61.02467209949072, 14.473622378590278],
           [-61.02175399880531, 14.471627838904388],
           [-61.01540252785804, 14.469134602603068],
           [-61.00733444314125, 14.46863595198308],
           [-60.99634811501625, 14.46863595198308],
           [-60.99360152630316, 14.469633293908572],
           [-60.987421723414684, 14.467971082747864],
           [-60.986048386151694, 14.464480481877974],
           [-60.98124191384437, 14.461322280920701],
           [-60.973688813258434, 14.458496479883628],
           [-60.96510574441078, 14.461156058325159],
           [-60.95600765117051, 14.459577137604636],
           [-60.94587967019203, 14.458496479883628],
           [-60.9371249289884, 14.456585090072645],
           [-60.92407867531898, 14.458330255174022],
           [-60.92244778836114, 14.462651924789519],
           [-60.929743500758434, 14.474619685504644],
           [-60.97849533181312, 14.491905120423258],
           [-61.01969406228187, 14.483262571340811]]],
         [[[-61.02401164062854, 14.587753916116084],
           [-61.026071577151974, 14.586092634515216],
           [-61.0248699475133, 14.583932949695063],
           [-61.02864649780627, 14.58160711158629],
           [-61.02624323852893, 14.57944738277889],
           [-61.02401164062854, 14.57944738277889],
           [-61.02075007446643, 14.580776449166429],
           [-61.01748850830432, 14.580278050210847],
           [-61.016286878665646, 14.58144097935294],
           [-61.02023509033557, 14.585428118365101]]],
         [[[-61.01319697388049, 14.576124681729251],
           [-61.01560023315783, 14.573134207942717],
           [-61.01663020141955, 14.567983852413818],
           [-61.01920512207385, 14.563830252245966],
           [-61.02126505859729, 14.562002643386977],
           [-61.02795985229846, 14.560507315783603],
           [-61.03310969360705, 14.559676573846021],
           [-61.02916148193713, 14.555855120641004],
           [-61.025556593021115, 14.554359751370313],
           [-61.02160838135119, 14.552365909913997],
           [-61.020063428958615, 14.550372050445958],
           [-61.01663020141955, 14.550205894677342],
           [-61.01577189453479, 14.547713543140896],
           [-61.019033460696896, 14.546550436128506],
           [-61.02040675171252, 14.544556524139114],
           [-61.022295026859005, 14.54156562240032],
           [-61.01010706909533, 14.526610506374245],
           [-61.005815534671505, 14.527939890995402],
           [-60.988821058353146, 14.538242350747659],
           [-60.97697642334338, 14.554359751370313]]]]),
    rock_sg = 
    /* color: #bf04c2 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-64.39821157130008, 10.924283718355918],
           [-64.29040822657352, 10.894617329725085],
           [-64.10364064844852, 10.862924966927382],
           [-64.06175527247196, 10.914170509431932],
           [-64.15857228907352, 10.972822320079388],
           [-64.39752492579227, 10.978215006603271]]],
         [[[-63.99721059473758, 10.823810605997371],
           [-64.0143767324329, 10.810321710549362],
           [-64.00682363184696, 10.771875034074416],
           [-63.946398827159456, 10.741518926464412],
           [-63.92373952540164, 10.757709230764247],
           [-63.968371483409456, 10.795483225187283],
           [-63.93129262598758, 10.798855672604828],
           [-63.93197927149539, 10.806949391908546],
           [-63.96699819239383, 10.81976400107828]]],
         [[[-64.23135671290164, 10.813693991289913],
           [-64.2238036123157, 10.788063707649947],
           [-64.19977101954227, 10.790761735216],
           [-64.1681853261829, 10.795483225187283],
           [-64.13316640528446, 10.804925982536595],
           [-64.12561330469852, 10.833926879197184],
           [-64.15651235255008, 10.848763461505818],
           [-64.19977101954227, 10.836624494334846],
           [-64.22723683985477, 10.823810605997371]]]]),
    geometry2 = 
    /* color: #ff0000 */
    /* shown: false */
    ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/

///////////////////////////////
// Global coral atlas project - SEC 
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Rodney Borrego (rodbio2008@gmail.com)...Note: previous geometries for geo 3 are in version saved 21/04 15:58. I removed geoms as the script crashed.
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.se_caribbean;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

//Map.centerObject(geometry, 7)

var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 8000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF - not used for Indo
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1200, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 750, //depth in centimetres
  
  //############
  // Clean-up stage selection
  cleanup_stage: 2, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: false,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the manually edited map - uses the output from the second pass of cleaning
  //var man_geo = ee.Image(region_params.geo_map_clean2);
  var man_geo = ee.Image(region_params.geo_map_clean2); // use this when testing for a small area
  
  // import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  //var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  //Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", true, 0.4);
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  // the "MID MASK" CLEAN
  man_geo = man_geo.where({
  test: midmask.eq(1),
 value: ee.Image(0)
  });
  
  /*
  // the "REEF MASK" CLEAN
  
  // Define a kernel for reef mask Morphological Operations
  var kernel_rm = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create reef mask to clean areas inside the reef - Perform an dilation of deepwater
  var reef_mask = man_geo.eq(2)
            .focal_max({kernel: kernel_rm, iterations: 2});
  var global_reef_mask = ee.Image(region_params.global_reef_mask);
  

  // Reef crest, slope, sheltered slope (within reef mask) -> Inner reef flat
  man_geo = man_geo.where({
    test: reef_mask.eq(0)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22))),
    value: ee.Image(13)
  });
  
  // the "DEEP WATER" CLEAN
  
  // Define a kernel for deep water Morphological Operations
  var kernel_dw = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
  var deepwater = man_geo.eq(2)
            .focal_max({kernel: kernel_dw, iterations: 2})
            .focal_min({kernel: kernel_dw, iterations: 2});
    
  
    // Deep lagoon (outside reef mask and global mask) -> deepwater 
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(12)),
                    //.and(global_reef_mask.eq(2)),
    value: ee.Image(2)
  });
  
 
  // Reef classes in deepwater -> deepwater
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(24))),
    value: ee.Image(2)
  });
  
  */
  
/*
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })
 
*/ 
  
  
/*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone").clip(not_reef_crest);
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone").clip(not_deep_water);
  
*/
/*
var mid_Mask = ee.Image().byte().paint(ee.Feature(midMask, {zone: 1}), "zone").clip(midMask);

man_geo = man_geo.where({
  test: mid_Mask.eq(1),
  value: ee.Image (0),
})

*/

/*
var Brs_Sl = ee.Image().byte().paint(ee.Feature(brs_sl, {zone: 1}), "zone").clip(brs_sl);

var Dl_SRS_Pr_toRs = ee.Image().byte().paint(ee.Feature(Dl_SRS_Pr_to_rs, {zone: 1}), "zone").clip(Dl_SRS_Pr_to_rs);
var Rs_Sl = ee.Image().byte().paint(ee.Feature(rs_sl, {zone:1}), "zone").clip(rs_sl)

var Sl_Brs = ee.Image().byte().paint(ee.Feature(sl_brs, {zone: 1}), "zone").clip(sl_brs);
var Rs_Brs = ee.Image().byte().paint(ee.Feature(rs_brs, {zone: 1}), "zone").clip(rs_brs);
var Rs_Dl_Sl_SRS_toBrs= ee.Image().byte().paint(ee.Feature(rs_dl_sl_srs_tobrs, {zone:1}), "zone").clip(rs_dl_sl_srs_tobrs);
var SRS_toBrs = ee.Image().byte().paint(ee.Feature(srs_brs, {zone: 1}), "zone").clip(srs_brs);
var Rs_mask = ee.Image().byte().paint(ee.Feature(rs_mask, {zone: 1}), "zone").clip(rs_mask);
var Sl_mask = ee.Image().byte().paint(ee.Feature(sl_mask, {zone: 1}), "zone").clip(sl_mask);
var Srs_rs = ee.Image().byte().paint(ee.Feature(srs_rs, {zone:1}), "zone").clip(srs_rs)
var Srs_tomask = ee.Image().byte().paint(ee.Feature(srs_tomask, {zone:1}), "zone").clip(srs_tomask)
var Dl_SRS_Pr_toRs = ee.Image().byte().paint(ee.Feature(Dl_SRS_Pr_to_rs, {zone: 1}), "zone").clip(Dl_SRS_Pr_to_rs);

var Orf_irf_rs_brs_totrf= ee.Image().byte().paint(ee.Feature(orf_irf_rs_brs_totrf, {zone:1}), "zone").clip(orf_irf_rs_brs_totrf);


var Brs_rs = ee.Image().byte().paint(ee.Feature(brs_rs, {zone: 1}), "zone").clip(brs_rs)
var BrsDl_srs = ee.Image().byte().paint(ee.Feature(brsdl_srs, {zone: 1}), "zone").clip(brsdl_srs)
var Sl_srs = ee.Image().byte().paint(ee.Feature(sl_srs, {zone:1}),"zone").clip(sl_srs) 
var Sl_rs = ee.Image().byte().paint(ee.Feature(sl_rs, {zone:1}),"zone").clip(sl_rs)  


//var Brs_mask = ee.Image().byte().paint(ee.Feature(brsdl_mask, {zone:1}),"zone").clip(brsdl_mask)  
 
 //var Srs_Brs = ee.Image().byte().paint(ee.Feature(srs_brs, {zone: 1}), "zone").clip(srs_brs)
 //var All_Brs = ee.Image().byte().paint(ee.Feature(all_brs, {zone:1}), "zone").clip(all_brs)
 // var Srs_Orf = ee.Image().byte().paint(ee.Feature(srs_orf, {zone: 1}), "zone").clip(srs_orf)  
  
  // Back reef slope -> shallow lagoon (inside the reef)


  man_geo = man_geo.where({
   test: Brs_Sl.eq(1)
                   .and(man_geo.eq(24)).or(man_geo.eq(12)),
    value: ee.Image(11)
  });
  



  

  // deep laggon, sheltered r s and patch reefs into reef slope
  
  man_geo = man_geo.where({
    test: Dl_SRS_Pr_toRs.eq(1)
                            .and(man_geo.eq(12)).or(man_geo.eq(25)).or(man_geo.eq(21)),
    value: ee.Image(22)
  });
  
  //reef slope to shallow lagoon
  
  man_geo = man_geo.where({
   test: Rs_Sl.eq(1)
                   .and(man_geo.eq(22)),
  value: ee.Image(11)
  })
  

   // Shallow lagoon and deep lagoon > back reef slope (inside the reef)
  man_geo = man_geo.where({
    test:  Sl_Brs.eq(1)
                     .and(man_geo.eq(11).or(man_geo.eq(12))),
    value: ee.Image(24)
  });
  
  // reef slope > back reef slope (outside the reef)
  man_geo = man_geo.where({
    test: Rs_Brs.eq(1)
                     .and(man_geo.eq(22)),
    value: ee.Image(24)
  });
  
   // deep laggon, sheltered r s and patch reefs into reef slope
  
  
  man_geo = man_geo.where({
    test: Dl_SRS_Pr_toRs.eq(1)
                            .and(man_geo.eq(12)).or(man_geo.eq(25)).or(man_geo.eq(21)),
    value: ee.Image(22)
  });
  
  

  man_geo = man_geo.where({
    test: Rs_Dl_Sl_SRS_toBrs.eq(1)
                      .and(man_geo.eq(22)).or(man_geo.eq(12)).or(man_geo.eq(11)).or(man_geo.eq(21)),
    value: ee.Image(24)
  })
  
   //sheltered reef slope > back reef slope (inside the reef)
  man_geo = man_geo.where({
    test:  SRS_toBrs.eq(1)
                     .and(man_geo.eq(21)),
    value: ee.Image(24)
  });
  
  //mask out rs
  man_geo = man_geo.where({
  test: Rs_mask.eq(1)
        .and(man_geo.eq(22)),
  value: ee.Image (0),
})

//mask out shallow lagoon
  man_geo = man_geo.where({
  test: Sl_mask.eq(1)
        .and(man_geo.eq(11)),
  value: ee.Image (0),
})


//srs to rs
  man_geo = man_geo.where({
  test: Srs_rs.eq(1)
        .and(man_geo.eq(21)),
  value: ee.Image (22),
})


//srs to mask
  man_geo = man_geo.where({
  test: Srs_tomask.eq(1)
        .and(man_geo.eq(21)),
  value: ee.Image (0),
})

  man_geo = man_geo.where({
    test: Orf_irf_rs_brs_totrf.eq(1)
                      .and(man_geo.eq(14)).or(man_geo.eq(13)).or(man_geo.eq(22)).or(man_geo.eq(24)),
    value: ee.Image(16)
  })
  
  
  /*
  
  man_geo = man_geo.where({
    test: Brs_rs.eq(1)
          .and(man_geo.eq(24)),
    value: ee.Image(22)
  })
  
  
  man_geo = man_geo.where({
    test: BrsDl_srs.eq(1)
          .and(man_geo.eq(24)).or(man_geo.eq(12)),
    value: ee.Image(21)
  })
  
  
   man_geo = man_geo.where({
    test: Sl_srs.eq(1)
          .and(man_geo.eq(11)),
    value: ee.Image(21)
  })
  
  man_geo = man_geo.where({
    test: Sl_rs.eq(1)
          .and(man_geo.eq(11)),
    value: ee.Image(22)
  })
  

  man_geo = man_geo.where({
    test: Brs_mask.eq(1)
         .and(man_geo.eq(24)).or(man_geo.eq(12)),
    value: ee.Image(0)
  }) 
  
  
  var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });

/*
 //Back reef slope > reef slope (outside the reef)
  man_geo = man_geo.where({rock
    test:  Brs_Rs.eq(1)
                     .and(man_geo.eq(24)),
    value: ee.Image(22)
  });
  
  //reef crest > Back reef slope (outside the reef)
 // man_geo = man_geo.where({
   // test:  Rc_Brs.eq(1)
   //                  .and(man_geo.eq(15)),
  //  value: ee.Image(24)
  //});
   
  //sheltered reef slope > Back reef slope (outside the reef)
  man_geo = man_geo.where({
    test:  Srs_Brs.eq(1)
                     .and(man_geo.eq(21)),
    value: ee.Image(24)
  });
    
  //sheltered reef slope > outer reef falt (inside the reef)
 // man_geo = man_geo.where({
   // test:  Srs_Orf.eq(1)
     //                .and(man_geo.eq(21)),
   // value: ee.Image(14)
  //}); 
  
  man_geo = man_geo.where({
    test: All_Brs.eq(1)
            .and(man_geo.eq(11)).or(man_geo.eq(12))
            .or(man_geo.eq(13)).or(man_geo.eq(15))
            .or(man_geo.eq(16)).or(man_geo.eq(21)).or(man_geo.eq(22))
            .or(man_geo.eq(23)),
    
    value: ee.Image(24)
  });
*/
/*
var Dl_Null = ee.Image().byte().paint(ee.Feature(dl_null, {zone: 1}), "zone").clip(dl_null);

var Dl_SRS_toRs = ee.Image().byte().paint(ee.Feature(Dl_SRS_trf_to_rs, {zone: 1}), "zone").clip(Dl_SRS_trf_to_rs);

var Dl_SRS_TRF_toRs = ee.Image().byte().paint(ee.Feature(Dl_SRS_trf_to_rs, {zone: 1}), "zone").clip(Dl_SRS_trf_to_rs);

var trf_rs =ee.Image().byte().paint(ee.Feature(trf_tors, {zone:1}), "zone").clip(trf_tors);

var Srs_tomask = ee.Image().byte().paint(ee.Feature(SRS_tomask, {zone:1}), "zone").clip(SRS_tomask)

var Rc_rs = ee.Image().byte().paint(ee.Feature(rc_rs, {zone: 1}), "zone").clip(rc_rs)

var RC_Null = ee.Image().byte().paint(ee.Feature(rc_null, {zone: 1}), "zone").clip(rc_null);

var TRF_srs = ee.Image().byte().paint(ee.Feature(trf_srs, {zone: 1}), "zone").clip(trf_srs)

var Orf_irf_rs_brs_totrf= ee.Image().byte().paint(ee.Feature(orf_irf_rs_brs_totrf, {zone:1}), "zone").clip(orf_irf_rs_brs_totrf);

var Pl_brs = ee.Image().byte().paint(ee.Feature(pl_brs, {zone: 1}), "zone").clip(pl_brs)

var ORF_irf_rs_brs_tors= ee.Image().byte().paint(ee.Feature(orf_irf_rs_brs_tors, {zone:1}), "zone").clip(orf_irf_rs_brs_tors);

var TRF_Null = ee.Image().byte().paint(ee.Feature(trf_null, {zone: 1}), "zone").clip(trf_null);

var RS_srs = ee.Image().byte().paint(ee.Feature(rs_srs, {zone: 1}), "zone").clip(rs_srs);

var RS_Null = ee.Image().byte().paint(ee.Feature(rs_null, {zone: 1}), "zone").clip(rs_null);


var Sl_pl_dl_brs = ee.Image().byte().paint(ee.Feature(sl_pl_dl_brs, {zone: 1}), "zone").clip(sl_pl_dl_brs);

var pr_Null = ee.Image().byte().paint(ee.Feature(Pr_null, {zone: 1}), "zone").clip(Pr_null);

var Sl_rs = ee.Image().byte().paint(ee.Feature(sl_rs, {zone: 1}), "zone").clip(sl_rs);

man_geo=man_geo.where({
  test: Dl_Null.eq(1).and(man_geo.eq(12)),
  value: ee.Image(0)
})

man_geo = man_geo.where({
    test: Dl_SRS_TRF_toRs.eq(1)
                            .and(man_geo.eq(12)).or(man_geo.eq(16)).or(man_geo.eq(21)),
    value: ee.Image(22)
  });
  
man_geo=man_geo.where({
  test: trf_rs.eq(1)
                    .and(man_geo.eq(16)),
 value: ee.Image(22)
});

man_geo=man_geo.where({
  test: Srs_tomask.eq(1)
         .and(man_geo.eq(21)),
  value:ee.Image(0)

})

man_geo=man_geo.where({
  test: Rc_rs.eq(1)
        .and(man_geo.eq(15)),
  value: ee.Image(22)
})

man_geo=man_geo.where({
  test: RC_Null.eq(1).and(man_geo.eq(15)),
  value: ee.Image(0)
})
 
 man_geo=man_geo.where({
  test: TRF_srs.eq(1)
        .and(man_geo.eq(16)),
  value: ee.Image(21)
})

  man_geo = man_geo.where({
    test: Orf_irf_rs_brs_totrf.eq(1)
                      .and(man_geo.eq(14)).or(man_geo.eq(13)).or(man_geo.eq(22)).or(man_geo.eq(24)),
    value: ee.Image(16)
  })
  
  man_geo=man_geo.where({
  test: Pl_brs.eq(1)
        .and(man_geo.eq(23)),
  value: ee.Image(24)
})


 man_geo = man_geo.where({
    test: ORF_irf_rs_brs_tors.eq(1)
                      .and(man_geo.eq(14)).or(man_geo.eq(13)).or(man_geo.eq(22)).or(man_geo.eq(24)),
    value: ee.Image(22)
  })

man_geo=man_geo.where({
  test: TRF_Null.eq(1)
         .and(man_geo.eq(16)),
  value:ee.Image(0)

})

man_geo=man_geo.where({
  test: RS_srs.eq(1)
        .and(man_geo.eq(22)),
  value: ee.Image(21)
})

man_geo=man_geo.where({
  test: RS_Null.eq(1)
        .and(man_geo.eq(22)),
  value: ee.Image(0)
})

man_geo = man_geo.where({
    test: Sl_pl_dl_brs.eq(1)
                            .and(man_geo.eq(23)).or(man_geo.eq(11)).or(man_geo.eq(12)),
    value: ee.Image(24)
  });

man_geo=man_geo.where({
  test: pr_Null.eq(1)
         .and(man_geo.eq(25)),
  value:ee.Image(0)

 });
 
 man_geo=man_geo.where({
  test: Sl_rs.eq(1)
         .and(man_geo.eq(11)),
  value:ee.Image(22)
 });
 
 */
 
 
 var Dl_SRS_TRF_toRs = ee.Image().byte().paint(ee.Feature(Dl_SRS_trf_to_rs, {zone: 1}), "zone").clip(Dl_SRS_trf_to_rs);

 var INF_Sl = ee.Image().byte().paint(ee.Feature(irf_sl, {zone:1}), "zone").clip(irf_sl)
 var Dl_Null = ee.Image().byte().paint(ee.Feature(dl_null, {zone: 1}), "zone").clip(dl_null);
 
 man_geo = man_geo.where({
    test: Dl_SRS_TRF_toRs.eq(1)
                            .and(man_geo.eq(12)).or(man_geo.eq(16)).or(man_geo.eq(21)),
    value: ee.Image(22)
  });
  
  
man_geo = man_geo.where({
  test: INF_Sl.eq(1)
              .and(man_geo.eq(13)),
  value:ee.Image(11)
});
 
 man_geo=man_geo.where({
  test: Dl_Null.eq(1).and(man_geo.eq(12)),
  value: ee.Image(0)
})
 
 
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  
  
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.Image(region_params.image);
  Map.addLayer(lowtide_image, imageVisParam2, sensor_params.sname + ' low tide', false);
  var notreef_mask = ee.FeatureCollection(region_params.notreef_mask).geometry();
  Map.addLayer(notreef_mask, {}, "noReefmask", false);
  //var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  //Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false); I removed this asset by mistake
  var geo_clean2 = ee.Image(region_params.geo_map_clean2_mid);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
  var unepClipped= wcmc.filterBounds(region_extent)
  Map.addLayer(unepClipped, {color:'#FFFF33'}, 'UNEP_layer', false)
  
 // Map.addLayer(waves, {}, 'waves', false);
 // Map.addLayer(wavespng, {}, 'wavespng', false);
  
  //Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
 // Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(1)), {palette: ['F8FF23'], opacity: 0.4}, 'global_reef_mask - land', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(3)), {palette: ['0000ff'], opacity: 0.4}, 'global_reef_mask - reef', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(2)), {palette: ['FF0000'], opacity: 0.4}, 'global_reef_mask - water', false);

  // display distance to land mask for assessing cut-off distances
  var distToLand = ee.Image(region_params.distToLand);
    
  //Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
 // Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
  
  // display distance to water mask
  var distToWater = ee.Image(region_params.distToWater);
    
  //Map.addLayer(distToWater.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'distToWater ' + vars.dist_to_land_ORF + 'm', false);
  
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });
    
  // Seagrass on Back reef slope -> Sand 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(24)),
    value: ee.Image(11)
  });  
  
    
  /*
  
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
   
   */
   
/*
  //manually turning sand in reef crest to 
  var Sand_rock = ee.Image().byte().paint(ee.Feature(sand_rock, {zone: 1}), "zone").clip(sand_rock);
  var Rock_sand = ee.Image().byte().paint(ee.Feature(rock_sand, {zone: 1}), "zone").clip(rock_sand);
  var SG_corals = ee.Image().byte().paint(ee.Feature(sg_corals, {zone: 1}), "zone").clip(sg_corals);
  var Coral_sg = ee.Image().byte().paint(ee.Feature(coral_sg, {zone: 1}), "zone").clip(coral_sg);
  var Rb_sand = ee.Image().byte().paint(ee.Feature(rb_sand, {zone: 1}), "zone").clip(rb_sand);
  
  man_benthic = man_benthic.where({
    test: Sand_rock.eq(1)
                   .and(man_benthic.eq(11)),
    value: ee.Image(13)
  });
  
  // make rock out of reef crest
  man_benthic = man_benthic.where({
       test:  man_benthic.eq(11)
              .and(geo_map.eq(15)),
       value: ee.Image(13)
  })
 
*/

/*
  man_benthic= man_benthic.where({
    test: Rock_sand.eq(1)
                  .and(man_benthic.eq(13)),
    value: ee.Image(11)
  })
  
  
  man_benthic = man_benthic.where({
       test: SG_corals.eq(1)
             .and(man_benthic.eq(14)),
       value: ee.Image(15)
  })
     
     
  man_benthic = man_benthic.where({
     test: Coral_sg.eq(1)
            .and(man_benthic.eq(15)),
      value: ee.Image(14)
  })
   man_benthic = man_benthic.where({
     test: Rb_sand.eq(1)
            .and(man_benthic.eq(12)),
      value: ee.Image(11)
  })
  
*/
  // code added by Mitch to regain missing data and to cleAN A ;LITTLE BIT benthic 2 > I used man_benthic10 in a first draft to chris but after that I
  //am using benthic 2_RB
  /*
  var ben_mask = man_benthic.gt(0),
  
  
  man_benthic2 = man_benthic.focal_mode(1, 'plus')
                   .updateMask(ben_mask)
               .selfMask()                  
                    
                    
  
 //This is the final benthic2 after focal_mode 
  var man_benthic10 = man_benthic.focal_mode(4, 'diamond')
                    .updateMask(ben_mask)
                    .selfMask()                  
  
 */ 
  // cleaning benthic (just porting over some rules commented above_RB.These rules act over man_benthic10
  var benthic_Mask = ee.Image().byte().paint(ee.Feature(benthic_mask.dissolve(), {zone: 1}), "zone").clip(benthic_mask);
  var SG_corals = ee.Image().byte().paint(ee.Feature(sg_corals, {zone: 1}), "zone").clip(sg_corals);
  var Rb_sand = ee.Image().byte().paint(ee.Feature(rb_sand, {zone: 1}), "zone").clip(rb_sand);
  var BMA_sg = ee.Image().byte().paint(ee.Feature(bma_sg, {zone: 1}), "zone").clip(bma_sg);
  var Rock_sand = ee.Image().byte().paint(ee.Feature(rock_sand, {zone: 1}), "zone").clip(rock_sand);
 var Corals_sg = ee.Image().byte().paint(ee.Feature(corals_sg, {zone: 1}), "zone").clip(corals_sg);
var Rock_sg = ee.Image().byte().paint(ee.Feature(rock_sg, {zone: 1}), "zone").clip(rock_sg);
 
 man_benthic = man_benthic.where({
  test: benthic_Mask.eq(1),
  value: ee.Image (0),
})   
   
  man_benthic = man_benthic.where({
    test: SG_corals.eq(1)
                   .and(man_benthic.eq(14)),
    value: ee.Image(15)
  })
  
  man_benthic = man_benthic.where({
    test: Rb_sand.eq(1)
                   .and(man_benthic.eq(12)),
    value: ee.Image(11)
  })
  
  man_benthic = man_benthic.where({
    test: BMA_sg.eq(1)
                   .and(man_benthic.eq(18)),
    value: ee.Image(14)
  })
  
 man_benthic = man_benthic.where({
    test: Rock_sand.eq(1)
                   .and(man_benthic.eq(13)),
    value: ee.Image(11)
  })
  
man_benthic = man_benthic.where({
    test: Corals_sg.eq(1)
                   .and(man_benthic.eq(15)),
    value: ee.Image(14)
  })  

man_benthic = man_benthic.where({
    test: Rock_sg.eq(1)
                   .and(man_benthic.eq(13)),
    value: ee.Image(14)
  })    
  
/*
  //turn everything in geo RS into benthic coral_algae
  man_benthic10 = man_benthic10.where({
       test:  man_benthic10
              .and(geo_map.eq(22)),
       value: ee.Image(15)
  })
  
  //turn everything in geo SRS into benthic coral_algae
  man_benthic10 = man_benthic10.where({
       test:  man_benthic10
              .and(geo_map.eq(21)),
       value: ee.Image(15)
  })
  
  */
  
  
   
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
   Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  // Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  //Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', false);
  Map.addLayer(benthic_clean1.updateMask(geo_map.gt(0)), map_palettes.benthic, 'Benthic clean stage 1', false);
  //Map.addLayer(man_benthic.updateMask(man_benthic.gt(0)), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  Map.addLayer(man_benthic.updateMask(man_benthic.gt(0)), map_palettes.benthic, 'Benthic clean stage 2 ', true);
  //Map.addLayer(man_benthic10.updateMask(man_benthic10.gt(0)), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL10_radius', true);
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    // shallow lagoon > 5m == deep lagoon//this rule is making mini deep laggoons witin BRS 
    //so I will generate another clean up1 with shallow lagoons instead (comenting this up)
    
    // = geo_map.where({
     // test: geo_map.eq(11)
                    //.and(depth.gt(vars.shallowlag_depth_cutoff)),
      //value: ee.Image(12)
    //});
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    geo_map = geo_map.where({
      test: depth.gt(vars.geo_depth_cutoff),
      value: ee.Image(2)
    });
    
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

    // // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    // clean_map = clean_map.where({
    //   test: distToLand.lte(vars.dist_to_land_RC)
    //                 .and(clean_map.eq(15)),
    //   value: ee.Image(16)
    // });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
    
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        // reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
