/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var missingReef = /* color: #72198b */ee.Geometry.Polygon(
        [[[-87.07472135716442, 5.479097881747153],
          [-87.0184164255238, 5.52079042873734],
          [-87.0239095895863, 5.552228771976502],
          [-87.03695585423473, 5.5699975292087],
          [-87.07952787571911, 5.556329302022596],
          [-87.10493375950817, 5.522840806398237]]]),
    reviewMask = /* color: #2f30d6 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Point",
          "coordinates": [
            -89.04870017101189,
            13.787869735371547
          ]
        },
        {
          "type": "Point",
          "coordinates": [
            -91.05782504190236,
            14.503074447599696
          ]
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -82.94022079783826,
                8.152267768344416
              ],
              [
                -83.01815506297498,
                8.142411899008252
              ],
              [
                -83.04469131747108,
                8.052996090092288
              ],
              [
                -83.07235760276902,
                7.973110211038907
              ],
              [
                -82.93537182396042,
                7.852731193518946
              ],
              [
                -82.89073986595261,
                7.941128914417903
              ],
              [
                -82.89073986595261,
                8.027487542887844
              ],
              [
                -82.89468806275254,
                8.028507433336197
              ],
              [
                -82.89863628929245,
                8.030547158750462
              ],
              [
                -82.90721935814011,
                8.03632637025884
              ],
              [
                -82.9103092470309,
                8.037941139509748
              ],
              [
                -82.91305584495652,
                8.040745711765979
              ],
              [
                -82.91571657583161,
                8.045632414686853
              ],
              [
                -82.91661780543032,
                8.04705592990725
              ],
              [
                -82.91734737938035,
                8.048479443519202
              ],
              [
                -82.91923565452683,
                8.054003447264748
              ],
              [
                -82.9178623635112,
                8.078138209783061
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -82.37834214431759,
                8.111254546576847
              ],
              [
                -82.3720765040588,
                8.105221486836475
              ],
              [
                -82.36890076858516,
                8.108110568990837
              ],
              [
                -82.36778496963497,
                8.109979964031899
              ],
              [
                -82.36744164688106,
                8.111339518602831
              ],
              [
                -82.36624001724239,
                8.11252912508075
              ],
              [
                -82.364008419342,
                8.113038955350685
              ],
              [
                -82.36323594314571,
                8.117117574225514
              ],
              [
                -82.36057519180294,
                8.117542427977275
              ],
              [
                -82.35920190078731,
                8.118562075148102
              ],
              [
                -82.35808610183712,
                8.119836630471498
              ],
              [
                -82.35662698013302,
                8.122640637943036
              ],
              [
                -82.36083268386837,
                8.122725607560703
              ],
              [
                -82.36375092727657,
                8.121705970961669
              ],
              [
                -82.36332177383419,
                8.120856271817713
              ],
              [
                -82.36443757278438,
                8.118816986536377
              ],
              [
                -82.36581086380001,
                8.119581719730418
              ],
              [
                -82.36967324478145,
                8.119156868135722
              ],
              [
                -82.37473725540157,
                8.120176511207907
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -81.25597701362877,
                7.461960118811576
              ],
              [
                -81.25992522529869,
                7.461109079840844
              ],
              [
                -81.2609551935604,
                7.468257755724878
              ],
              [
                -81.25426039985923,
                7.475916921566992
              ],
              [
                -81.27365813545494,
                7.498212839011211
              ],
              [
                -81.29666075996666,
                7.4924262219381434
              ],
              [
                -81.29477248482017,
                7.418895473222814
              ],
              [
                -81.200187066119,
                7.422470169768574
              ],
              [
                -81.21803984932212,
                7.439492135440063
              ],
              [
                -81.24619231514244,
                7.468257755724878
              ],
              [
                -81.25185714058189,
                7.463321777720894
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -81.69193419108306,
                7.429516688891417
              ],
              [
                -81.68575438151275,
                7.409770699525551
              ],
              [
                -81.63665922770416,
                7.411132520336172
              ],
              [
                -81.62120970377838,
                7.458112754870236
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -81.75029905924713,
                7.287530230091423
              ],
              [
                -81.77776487955963,
                7.265734537743664
              ],
              [
                -81.78772123942291,
                7.252111692999326
              ],
              [
                -81.75785215983306,
                7.21464674688436
              ],
              [
                -81.70772703776275,
                7.266756234462008
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.32933130980423,
                -0.41329701627418186
              ],
              [
                -90.38467479102553,
                -0.4450844367376489
              ],
              [
                -90.40203944036604,
                -0.4845023235474191
              ],
              [
                -90.39405718633772,
                -0.5005520692236546
              ],
              [
                -90.38530245611311,
                -0.5045859563947589
              ],
              [
                -90.37294283697248,
                -0.503899337477886
              ],
              [
                -90.3681363184178,
                -0.5026977541992927
              ],
              [
                -90.36727801153303,
                -0.49660400703644414
              ],
              [
                -90.36676302740217,
                -0.49085356442000877
              ],
              [
                -90.35852943349492,
                -0.48865441676184884
              ],
              [
                -90.35543952870977,
                -0.48462051990786376
              ],
              [
                -90.35243545461309,
                -0.4855646236429446
              ],
              [
                -90.34702812123906,
                -0.4851354855978726
              ],
              [
                -90.34479652333867,
                -0.48341893314567264
              ],
              [
                -90.34256492543828,
                -0.481788207914149
              ],
              [
                -90.33887420583379,
                -0.48135906963040814
              ],
              [
                -90.33432517934453,
                -0.4811874143093396
              ],
              [
                -90.32934699941289,
                -0.4822173461708678
              ],
              [
                -90.3282312004627,
                -0.485049657985581
              ],
              [
                -90.32360627103209,
                -0.4878774069516253
              ],
              [
                -90.31708313870787,
                -0.48856402753145767
              ],
              [
                -90.30506684232115,
                -0.47929464382382253
              ],
              [
                -90.30335022855162,
                -0.4655622005284435
              ],
              [
                -90.30335022855162,
                -0.4590392805457629
              ],
              [
                -90.301976937536,
                -0.4535462906789694
              ],
              [
                -90.29236390042662,
                -0.44770998437897386
              ],
              [
                -90.28755738187193,
                -0.4408437357300799
              ],
              [
                -90.29202057767272,
                -0.4408437357300799
              ],
              [
                -90.29717041898131,
                -0.43603735790290965
              ],
              [
                -90.29236390042662,
                -0.42711121953721454
              ],
              [
                -90.29442383695006,
                -0.4243647133290695
              ],
              [
                -90.30060364652037,
                -0.4071990276855766
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.49122238251759,
                -0.4981119380322834
              ],
              [
                -90.48778915497853,
                -0.5175089116736208
              ],
              [
                -90.4805793771465,
                -0.513732514306091
              ],
              [
                -90.47319793793751,
                -0.5078962594450028
              ],
              [
                -90.46684646699025,
                -0.513217550855409
              ],
              [
                -90.45723342988087,
                -0.5108143875380755
              ],
              [
                -90.44830703827931,
                -0.5029182731907732
              ],
              [
                -90.41963958832814,
                -0.4900441532961491
              ],
              [
                -90.42513275239064,
                -0.46910219903302575
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.95093154999806,
                -0.5781026052827775
              ],
              [
                -90.9504165658672,
                -0.5885734065571834
              ],
              [
                -90.95264816376759,
                -0.5959544514014011
              ],
              [
                -90.95213317963673,
                -0.6031638344926926
              ],
              [
                -90.94543838593556,
                -0.6041937455859494
              ],
              [
                -90.94578170868947,
                -0.6126046788435627
              ],
              [
                -90.94252014252736,
                -0.6129479819626322
              ],
              [
                -90.93788528534962,
                -0.6155227546533927
              ],
              [
                -90.93445205781056,
                -0.620328993679579
              ],
              [
                -90.92758560273244,
                -0.6175825719112424
              ],
              [
                -90.92466735932423,
                -0.6093432981171284
              ],
              [
                -90.91848754975392,
                -0.6040220937506161
              ],
              [
                -90.9119644174297,
                -0.602648878872956
              ],
              [
                -90.90423965546681,
                -0.5988725361767058
              ],
              [
                -90.90029144379689,
                -0.5932080172593837
              ],
              [
                -90.89479827973439,
                -0.5950961908788255
              ],
              [
                -90.88604354950978,
                -0.6019622713042512
              ],
              [
                -90.88312530610158,
                -0.60573861185967
              ],
              [
                -90.88243866059376,
                -0.6141495427060158
              ],
              [
                -90.87763214203908,
                -0.6285682504070912
              ],
              [
                -90.87196731659962,
                -0.6304564115825619
              ],
              [
                -90.86784744355275,
                -0.6323445720733102
              ],
              [
                -90.86269760224415,
                -0.625650181793915
              ],
              [
                -90.85291290375783,
                -0.6282249483017918
              ],
              [
                -90.87419891450001,
                -0.5648853368048825
              ],
              [
                -90.92741550263685,
                -0.4789235293191556
              ],
              [
                -90.93702853974622,
                -0.4875062929159884
              ],
              [
                -90.9382301693849,
                -0.4957457356794489
              ],
              [
                -90.93479694184583,
                -0.501067037026137
              ],
              [
                -90.9369137460478,
                -0.5072466073564648
              ],
              [
                -90.94103361909467,
                -0.5127395538097936
              ],
              [
                -90.93863035981732,
                -0.5230388156677724
              ],
              [
                -90.9427502328642,
                -0.5281884402796968
              ],
              [
                -90.94360853974896,
                -0.5410624830510605
              ],
              [
                -90.9430935556181,
                -0.5441522492758177
              ],
              [
                -90.93931700532514,
                -0.5489585491433562
              ],
              [
                -90.94051863496381,
                -0.5571979113386594
              ],
              [
                -90.94360853974896,
                -0.5623475068700217
              ],
              [
                -90.94652678315717,
                -0.5618325475206267
              ],
              [
                -90.94807173554975,
                -0.5671537919349025
              ],
              [
                -90.95390822236615,
                -0.5711018088254546
              ],
              [
                -90.95785643403607,
                -0.5741915592840114
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -89.96186371832889,
                0.3122385524525145
              ],
              [
                -89.95911713629764,
                0.3041705844696382
              ],
              [
                -89.94813080817264,
                0.30743210417671957
              ],
              [
                -89.9464141944031,
                0.31155191711827973
              ],
              [
                -89.95671387702029,
                0.31567172844904157
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.00872727423709,
                0.34433870259715676
              ],
              [
                -89.96598359137576,
                0.34382372775251924
              ],
              [
                -89.95396729498904,
                0.3486301585500084
              ],
              [
                -89.94795914679568,
                0.3488018167475961
              ],
              [
                -89.91208191901248,
                0.31910490331215896
              ],
              [
                -89.87946625739139,
                0.3707740396523791
              ],
              [
                -89.89285584479373,
                0.4305107356697709
              ],
              [
                -89.9490628830099,
                0.46971570773092264
              ],
              [
                -90.01738411103725,
                0.46353610310757437
              ],
              [
                -90.06319405224797,
                0.40686277132238075
              ],
              [
                -90.04472616195089,
                0.3562380045360311
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.24785924134295,
                -0.7515445721341323
              ],
              [
                -90.27635502991717,
                -0.7469101112194169
              ],
              [
                -90.29300618348162,
                -0.7481116385937185
              ],
              [
                -90.30038762269061,
                -0.7534326844320856
              ],
              [
                -90.29403615174334,
                -0.7601268941538724
              ],
              [
                -90.28425145325701,
                -0.7582387847662158
              ],
              [
                -90.28133320984881,
                -0.7556640888200132
              ],
              [
                -90.27532506165545,
                -0.7572089065711917
              ],
              [
                -90.27395177063983,
                -0.762873233607202
              ],
              [
                -90.28030324158709,
                -0.7620150027160352
              ],
              [
                -90.28287816224139,
                -0.7589253700934797
              ],
              [
                -90.291632892466,
                -0.7606418329346075
              ],
              [
                -90.30021596131365,
                -0.7630448797649018
              ],
              [
                -90.30330586609881,
                -0.7671643854915582
              ],
              [
                -90.30330586609881,
                -0.7688808450416896
              ],
              [
                -90.30879903016131,
                -0.7704256580468062
              ],
              [
                -90.31858372864764,
                -0.7754033850254115
              ],
              [
                -90.32596516785662,
                -0.7680226153527852
              ],
              [
                -90.34021306214373,
                -0.7716271788858567
              ],
              [
                -90.34038472352069,
                -0.7747168023410103
              ],
              [
                -90.3439896124367,
                -0.7783213601906851
              ],
              [
                -90.35308766541522,
                -0.7796945242762482
              ],
              [
                -90.36939549622576,
                -0.7750600936971163
              ],
              [
                -90.37076878724139,
                -0.7757466763258705
              ],
              [
                -90.37540364441912,
                -0.7742018652546838
              ],
              [
                -90.38844990906756,
                -0.7771198412490518
              ],
              [
                -90.38741994080584,
                -0.7845005950435476
              ],
              [
                -90.37918019471209,
                -0.8207175912768685
              ],
              [
                -90.32768178162615,
                -0.8179712900755228
              ],
              [
                -90.29013113456539,
                -0.83856850283965
              ],
              [
                -90.25906042533687,
                -0.8433745036548348
              ],
              [
                -90.19773605295485,
                -0.7545690153849709
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.118737808472,
                -0.776136167569626
              ],
              [
                -90.22555943889441,
                -0.8843480342509231
              ],
              [
                -90.21525975627722,
                -0.9691376541262092
              ],
              [
                -90.0022361098814,
                -0.9420914752293114
              ],
              [
                -89.88962624660014,
                -0.9777920298746318
              ],
              [
                -89.83717917667998,
                -0.8777235671423639
              ],
              [
                -89.81064335124631,
                -0.7379683959228746
              ],
              [
                -89.80365998236864,
                -0.5703634555170191
              ],
              [
                -89.94579560248583,
                -0.462907817846447
              ],
              [
                -90.0978875824663,
                -0.48796951582902953
              ],
              [
                -90.07989428475952,
                -0.5568035699336394
              ],
              [
                -90.11040094339428,
                -0.6469698390796846
              ],
              [
                -90.03914043015352,
                -0.7025842659549758
              ],
              [
                -90.07724925583712,
                -0.7884076811344745
              ],
              [
                -90.04120036667696,
                -0.7966466389784312
              ],
              [
                -90.02334758347384,
                -0.8017959792761326
              ],
              [
                -90.02403422898165,
                -0.8299455906644593
              ],
              [
                -90.02987071579805,
                -0.8416173223845778
              ],
              [
                -90.05115672654024,
                -0.8402441792798235
              ],
              [
                -90.06179973191134,
                -0.8395576075464029
              ],
              [
                -90.07999583786837,
                -0.8320053105434444
              ],
              [
                -90.09132548874727,
                -0.8299455906644593
              ],
              [
                -90.09407207077852,
                -0.8189603999258814
              ],
              [
                -90.08823558396212,
                -0.8103781986926035
              ],
              [
                -90.08823558396212,
                -0.8052288692123885
              ],
              [
                -90.09201213425509,
                -0.7904674221305616
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.30424736227161,
                -1.2744662381763183
              ],
              [
                -90.2874245473302,
                -1.332129537144481
              ],
              [
                -90.30081413473255,
                -1.3520367942346827
              ],
              [
                -90.31283043111927,
                -1.4810866708427626
              ],
              [
                -90.19232414449817,
                -1.4745657082414458
              ],
              [
                -90.13721614355147,
                -1.3258491404478163
              ],
              [
                -90.1883712338835,
                -1.2091479859749408
              ],
              [
                -90.29926448339522,
                -1.1586903166915723
              ],
              [
                -90.33462672704756,
                -1.247591297056736
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.3937646779734,
                -1.359034522739621
              ],
              [
                -90.4432031545359,
                -1.3631532333623004
              ],
              [
                -90.45556277367652,
                -1.3631532333623004
              ],
              [
                -90.46620577904761,
                -1.3569751647929245
              ],
              [
                -90.4706689748484,
                -1.3514835350369454
              ],
              [
                -90.47581881615699,
                -1.3518267622610212
              ],
              [
                -90.48268527123511,
                -1.3617803306031706
              ],
              [
                -90.4878351125437,
                -1.3504538530737105
              ],
              [
                -90.49607485863746,
                -1.3418731531136525
              ],
              [
                -90.54002017113746,
                -1.3315762734441088
              ],
              [
                -90.47341555687964,
                -1.424933035347784
              ],
              [
                -90.31274050805152,
                -1.3744796511830424
              ],
              [
                -90.32990664574683,
                -1.332949193225898
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -91.036924906166,
                -1.0133445869857218
              ],
              [
                -91.06198746720116,
                -1.022956106342504
              ],
              [
                -91.07263047257226,
                -1.0212397657039356
              ],
              [
                -91.0805268959121,
                -1.0281051227437628
              ],
              [
                -91.09597641983788,
                -1.0329108638937308
              ],
              [
                -91.1079927162246,
                -1.0363435316962055
              ],
              [
                -91.11073929825585,
                -1.0332541308410388
              ],
              [
                -91.11451584854882,
                -1.0360002650831612
              ],
              [
                -91.11966568985741,
                -1.032224329887897
              ],
              [
                -91.12653214493554,
                -1.0363435316962055
              ],
              [
                -91.14541489640038,
                -1.04561171614547
              ],
              [
                -91.1739106849746,
                -1.0586557811813633
              ],
              [
                -91.21545273819726,
                -1.0648345297179116
              ],
              [
                -91.23260430518785,
                -1.0782246892563097
              ],
              [
                -91.26178673926988,
                -1.0298243733711314
              ],
              [
                -91.29783562843004,
                -1.020556142870463
              ],
              [
                -91.31877831641832,
                -1.0208994111445457
              ],
              [
                -91.35311059180894,
                -1.0191830694079103
              ],
              [
                -91.38057641212144,
                -1.0253618953681285
              ],
              [
                -91.42502604481136,
                -1.0148994340529391
              ],
              [
                -91.44665537830745,
                -1.001168649260254
              ],
              [
                -91.45764170643245,
                -0.9699309008843594
              ],
              [
                -91.54347239490902,
                -0.9623788741281832
              ],
              [
                -91.5588272385733,
                -1.0731283913654843
              ],
              [
                -91.34965508344243,
                -1.1490288853094857
              ],
              [
                -91.22537224652837,
                -1.2126845919037739
              ],
              [
                -90.97480676485122,
                -1.1302078791166597
              ],
              [
                -90.94493768526138,
                -1.104806827748647
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.98960232435547,
                -0.9714451095161966
              ],
              [
                -91.00230526625,
                -0.9807134787732702
              ],
              [
                -91.00882839857422,
                -1.0050857340796857
              ],
              [
                -90.96144985853516,
                -0.9982203282602765
              ],
              [
                -90.96419644056641,
                -0.9827731129090937
              ],
              [
                -90.97209286390625,
                -0.9769374795677529
              ],
              [
                -90.97895931898438,
                -0.9741912956610783
              ],
              [
                -90.98513912855469,
                -0.9707585626309992
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.87733578382813,
                -0.9443264024947154
              ],
              [
                -90.90377163587891,
                -1.00989150957196
              ],
              [
                -90.78635525404297,
                -0.9748778418478258
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -90.9140713184961,
                -1.0703063556311374
              ],
              [
                -90.86909603773438,
                -1.0421586736179405
              ],
              [
                -90.89347195326172,
                -1.0184732338270577
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -91.38357334382944,
                0.18908852077903168
              ],
              [
                -91.441074608966,
                0.1546838103933195
              ],
              [
                -91.45858406941522,
                0.11434349881515943
              ],
              [
                -91.44553780476679,
                0.1131418715442916
              ],
              [
                -91.43540978352655,
                0.11297021050154508
              ],
              [
                -91.42219185750116,
                0.11863502436829268
              ],
              [
                -91.41257882039179,
                0.12292654925585034
              ],
              [
                -91.39232277791132,
                0.13391284976837622
              ],
              [
                -91.38785958211054,
                0.13459949339112373
              ],
              [
                -91.3857996455871,
                0.1399209808044335
              ],
              [
                -91.37893319050897,
                0.14627243193965103
              ],
              [
                -91.37446999470819,
                0.15125059509032718
              ],
              [
                -91.37086510579218,
                0.15640041783732264
              ],
              [
                -91.36949181477655,
                0.16738670208876655
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -91.5260914446585,
                0.12805143082861972
              ],
              [
                -91.59406934993194,
                0.010978478279433119
              ],
              [
                -91.58239637629913,
                0.011321801026837754
              ],
              [
                -91.55287061946319,
                0.026084678617418363
              ],
              [
                -91.52815138118194,
                0.03844429577442574
              ],
              [
                -91.50789533870147,
                0.06453681430934251
              ],
              [
                -91.48935590999054,
                0.10710878705550238
              ],
              [
                -91.51270185725616,
                0.126334821289
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -114.64689074698556,
                29.93533334865326
              ],
              [
                -114.24039660636056,
                29.982925122701097
              ],
              [
                -114.2809086913215,
                30.03584418237005
              ],
              [
                -114.59264575186837,
                30.030494099970564
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.95826244922263,
                10.869618842401179
              ],
              [
                -85.93525982471091,
                10.858998014334283
              ],
              [
                -85.923930173832,
                10.860009538046556
              ],
              [
                -85.9041891154824,
                10.871473233943648
              ],
              [
                -85.89629269214255,
                10.880407867961734
              ],
              [
                -85.92135525317771,
                10.89085936409771
              ],
              [
                -85.9594640788613,
                10.88091359395657
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.88067150683982,
                10.872316135379899
              ],
              [
                -85.89938259692771,
                10.860852471856429
              ],
              [
                -85.88273144336326,
                10.84331895892771
              ],
              [
                -85.86007214160544,
                10.856300601021466
              ],
              [
                -85.85990048022849,
                10.862032575192965
              ],
              [
                -85.87037182422263,
                10.873496193389382
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.8356962260781,
                10.831348374079512
              ],
              [
                -85.79793072314841,
                10.838935420039853
              ],
              [
                -85.79501247974021,
                10.842981765908947
              ],
              [
                -85.79844570727927,
                10.84483632280817
              ],
              [
                -85.8001623210488,
                10.841127197511927
              ],
              [
                -85.80582714648826,
                10.844161939811624
              ],
              [
                -85.82196331592185,
                10.850062739466091
              ],
              [
                -85.82642651172263,
                10.84972555405155
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.88994063497003,
                10.823762347029575
              ],
              [
                -85.858012205082,
                10.820726186825093
              ],
              [
                -85.85337734790427,
                10.83842962295874
              ],
              [
                -85.91431713672263,
                10.833203003070349
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.72574711413962,
                10.678976849473326
              ],
              [
                -85.76351261706931,
                10.643381525305916
              ],
              [
                -85.71476078601462,
                10.647767903784011
              ],
              [
                -85.6836900767861,
                10.650635886347759
              ],
              [
                -85.67768192859275,
                10.65350384191408
              ],
              [
                -85.67545033069236,
                10.654516055078677
              ],
              [
                -85.67356205554587,
                10.657890074662173
              ],
              [
                -85.68094349475486,
                10.658227474564214
              ],
              [
                -85.70806599231345,
                10.675265683137845
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.78840351672751,
                10.561547154323378
              ],
              [
                -85.73055363269431,
                10.546696514945348
              ],
              [
                -85.7272920665322,
                10.550240482666997
              ],
              [
                -85.72282887073142,
                10.549227924626178
              ],
              [
                -85.71733570666892,
                10.554121924279867
              ],
              [
                -85.71682072253806,
                10.557497051078492
              ],
              [
                -85.70652103992087,
                10.563740937961525
              ],
              [
                -85.7518396434365,
                10.588715215858455
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.87732410998923,
                10.499439717210963
              ],
              [
                -85.8320055064736,
                10.502309086246877
              ],
              [
                -85.8181009349404,
                10.534882994518519
              ],
              [
                -85.83732700915915,
                10.54500889692282
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.8186870739,
                9.939272550352484
              ],
              [
                -85.71912347526718,
                9.966325022795596
              ],
              [
                -85.77233850212265,
                10.018394708798796
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.71804539371405,
                9.87932931872672
              ],
              [
                -85.64766422916327,
                9.886432108155407
              ],
              [
                -85.69710270572577,
                9.917209087721098
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.50077327844343,
                9.830343886683501
              ],
              [
                -85.4672134792491,
                9.82789133339473
              ],
              [
                -85.47307189451904,
                9.836600188226958
              ],
              [
                -85.48474486815185,
                9.853936355408248
              ],
              [
                -85.49864943968505,
                9.853259839128384
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -85.28090325869981,
                9.661870169593982
              ],
              [
                -85.22185174502793,
                9.63157727758104
              ],
              [
                -85.20691720523301,
                9.663054752486756
              ],
              [
                -85.23575631656114,
                9.682007511306855
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -84.2101615651164,
                9.340229088204408
              ],
              [
                -84.22921266282806,
                9.25366561643629
              ],
              [
                -84.06338777269134,
                9.259764949557914
              ],
              [
                -84.09119691575775,
                9.322785181093927
              ],
              [
                -84.18492402757416,
                9.358356098827942
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -82.86678413604784,
                8.200501093115848
              ],
              [
                -82.59281257843065,
                8.193704789582421
              ],
              [
                -82.83485511993456,
                8.278989955132788
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -81.83660090143063,
                8.13442460230476
              ],
              [
                -81.79162562066891,
                8.114881686254765
              ],
              [
                -81.79763376886227,
                8.15294700852063
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -81.81428492242672,
                8.027136745970076
              ],
              [
                -81.78063929254391,
                8.033255959930058
              ],
              [
                -81.78956568414547,
                8.096482424257472
              ],
              [
                -81.82441294366696,
                8.063510716610807
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -80.90812534711831,
                7.206072563507739
              ],
              [
                -80.89831302035266,
                7.226638300733096
              ],
              [
                -80.93725316876557,
                7.226086408471516
              ],
              [
                -80.95882767105567,
                7.202160916636789
              ],
              [
                -80.84415787125099,
                7.1476594209130475
              ],
              [
                -80.76553696060645,
                7.153109863877382
              ],
              [
                -80.67352646255958,
                7.179339209707181
              ],
              [
                -80.5782543983506,
                7.180361101696571
              ],
              [
                -80.57195033745175,
                7.21662241396667
              ],
              [
                -80.56800209071933,
                7.225903783514129
              ],
              [
                -80.58396663383847,
                7.221901730490442
              ],
              [
                -80.59975948051816,
                7.226329496821746
              ],
              [
                -80.61984386162167,
                7.224626514904252
              ],
              [
                -80.63580836967832,
                7.226329496821746
              ],
              [
                -80.6431898088873,
                7.2217314309192915
              ],
              [
                -80.64713802055722,
                7.215600603652501
              ],
              [
                -80.65623607353574,
                7.217133318258472
              ],
              [
                -80.66962566093808,
                7.214578791031194
              ],
              [
                -80.68662013725644,
                7.208107257540027
              ],
              [
                -80.70962276176816,
                7.204871456121473
              ],
              [
                -80.72627391533261,
                7.201295017150279
              ],
              [
                -80.74189510063535,
                7.208958780388211
              ],
              [
                -80.74447002128964,
                7.207255733091298
              ],
              [
                -80.74996318535214,
                7.2026574734184985
              ],
              [
                -80.76850261406308,
                7.211513339327641
              ],
              [
                -80.78429546074277,
                7.194312364541463
              ],
              [
                -80.80815639213925,
                7.203338700017265
              ],
              [
                -80.83064403252011,
                7.202487166608862
              ],
              [
                -80.85090007500058,
                7.207255733091298
              ],
              [
                -80.86566295341855,
                7.205041762035324
              ],
              [
                -80.87767924980527,
                7.200102864557526
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -80.03246962761467,
                7.402827580782495
              ],
              [
                -79.98225856994266,
                7.426105136555997
              ],
              [
                -79.95392090446175,
                7.498499718177692
              ],
              [
                -79.96944976726131,
                7.495379756751871
              ],
              [
                -79.97742473766488,
                7.469112711533879
              ],
              [
                -79.98804068223413,
                7.464461613477041
              ],
              [
                -79.99931654330787,
                7.456180061712332
              ],
              [
                -80.00470235028956,
                7.457658978660577
              ],
              [
                -80.01238400429277,
                7.448020693319423
              ],
              [
                -80.01770550697832,
                7.441212118560307
              ],
              [
                -80.02371365517168,
                7.43780779154701
              ],
              [
                -80.02955014198808,
                7.434743874656962
              ],
              [
                -80.03435666054277,
                7.4309990583120245
              ],
              [
                -80.03727490395097,
                7.43219059424895
              ],
              [
                -80.04036480873613,
                7.429977739222299
              ],
              [
                -80.04328305214433,
                7.4327012515181385
              ],
              [
                -80.05135113686113,
                7.435935400433085
              ],
              [
                -80.05667263954668,
                7.435254528956988
              ],
              [
                -80.06233746498613,
                7.429467078787111
              ],
              [
                -80.07555539101152,
                7.413466084714315
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -79.64140941550328,
                8.544409828328286
              ],
              [
                -79.59403087546421,
                8.538128800647613
              ],
              [
                -79.58424617697789,
                8.55799007497442
              ],
              [
                -79.5991807167728,
                8.566647229442403
              ],
              [
                -79.60089733054234,
                8.570211882844916
              ],
              [
                -79.60089733054234,
                8.57411598869901
              ],
              [
                -79.60810710837437,
                8.57751083075259
              ],
              [
                -79.6127419655521,
                8.57751083075259
              ],
              [
                -79.63007976462437,
                8.579377980950472
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -79.62105504021207,
                8.60389666968702
              ],
              [
                -79.62960769583775,
                8.587567872213546
              ],
              [
                -79.61570312430455,
                8.583960947058612
              ],
              [
                -79.61656143118931,
                8.587143529857142
              ],
              [
                -79.61548854758335,
                8.589307670912612
              ],
              [
                -79.61669017722203,
                8.59210830571493
              ],
              [
                -79.61656143118931,
                8.594527019126126
              ],
              [
                -79.61437274863316,
                8.597497347816427
              ],
              [
                -79.61407234122349,
                8.598558173849765
              ],
              [
                -79.61574603964878,
                8.603268205565707
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -79.53688746044794,
                8.788573588924132
              ],
              [
                -79.53379755566279,
                8.783314529377947
              ],
              [
                -79.52967768261591,
                8.78060014687867
              ],
              [
                -79.52572947094599,
                8.774153408847008
              ],
              [
                -79.50564508984247,
                8.782466286980997
              ],
              [
                -79.52281122753779,
                8.796886143722551
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -79.44367431959141,
                8.865924012745397
              ],
              [
                -79.3883993562125,
                8.837767622332072
              ],
              [
                -79.39560913404453,
                8.889329489944016
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -79.01174559857166,
                8.567286778224386
              ],
              [
                -79.01921286846913,
                8.56321285456276
              ],
              [
                -79.023332741516,
                8.551584957601461
              ],
              [
                -79.01080146099842,
                8.539107914389698
              ],
              [
                -78.99638190533436,
                8.555319503360465
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -79.02660038194942,
                8.42937008040983
              ],
              [
                -79.00170948229122,
                8.40372837793896
              ],
              [
                -79.00239612779903,
                8.387595311833445
              ],
              [
                -78.98539366713449,
                8.382314894515652
              ],
              [
                -78.9860803126423,
                8.415769487217872
              ],
              [
                -79.02119110949093,
                8.4344484600851
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -79.01115085802364,
                8.238290387148696
              ],
              [
                -78.92978336534786,
                8.157414534454942
              ],
              [
                -78.86695530138302,
                8.20329151198368
              ],
              [
                -78.89133121691036,
                8.222320409795246
              ],
              [
                -78.91055729112911,
                8.213825478842743
              ],
              [
                -78.93390323839473,
                8.236251702493966
              ],
              [
                -78.95038273058223,
                8.259695941445251
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -78.53715634594317,
                7.7217058093756625
              ],
              [
                -78.01048144933115,
                6.841688296776961
              ],
              [
                -77.70835742589365,
                7.009370579383872
              ],
              [
                -77.98438892003428,
                7.242389330836655
              ],
              [
                -78.15410417361704,
                7.350397788647151
              ],
              [
                -78.23924821658579,
                7.5546512339024
              ],
              [
                -78.34911149783579,
                7.776497127911073
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    missingReefs = /* color: #98ff00 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -91.82545410160166,
                1.387712612247503
              ],
              [
                -91.82359277326945,
                1.3887901681234989
              ],
              [
                -91.82113062908886,
                1.3888380562025393
              ],
              [
                -91.82092703026062,
                1.3870461109756864
              ],
              [
                -91.82069149606512,
                1.3850067184860189
              ],
              [
                -91.81901880312682,
                1.3819575978945295
              ],
              [
                -91.81927830886862,
                1.3796348072131563
              ],
              [
                -91.8204839642018,
                1.3787217784443047
              ],
              [
                -91.82212279623279,
                1.3785689367817113
              ],
              [
                -91.82231055568941,
                1.3777484200092343
              ],
              [
                -91.82740675113547,
                1.3761931956994284
              ],
              [
                -91.8278788220622,
                1.371001955590471
              ],
              [
                -91.82264315006513,
                1.371430986139436
              ],
              [
                -91.81483255741377,
                1.372632271267261
              ],
              [
                -91.8095968854167,
                1.3793251344882593
              ],
              [
                -91.81062685367841,
                1.384301866736442
              ],
              [
                -91.81534754154463,
                1.3883347283114815
              ],
              [
                -91.8166564590031,
                1.3907801819205858
              ],
              [
                -91.81624876377363,
                1.393997884011758
              ],
              [
                -91.81732164737959,
                1.3971726774644857
              ],
              [
                -91.8219350513853,
                1.3917240475527912
              ],
              [
                -91.82363020864456,
                1.3946843320848563
              ],
              [
                -91.82882295963545,
                1.3925391936921836
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -92.01016668666615,
                1.6819475703698497
              ],
              [
                -92.00866464792283,
                1.6787303012563775
              ],
              [
                -92.00696949244359,
                1.6772932542826173
              ],
              [
                -92.00810675014274,
                1.6755130316007352
              ],
              [
                -92.00731281564897,
                1.6738829445965269
              ],
              [
                -92.0066047126339,
                1.674483503072712
              ],
              [
                -92.0053816257836,
                1.6745049519429633
              ],
              [
                -92.00464938266563,
                1.6746282818451481
              ],
              [
                -92.00398151249891,
                1.6746872659743628
              ],
              [
                -92.00324926926368,
                1.675057253181879
              ],
              [
                -92.00274769596349,
                1.675244927845796
              ],
              [
                -92.00084869179351,
                1.6743119173313405
              ],
              [
                -91.99909452785269,
                1.6737971510223282
              ],
              [
                -91.99733499873892,
                1.6754272376074915
              ],
              [
                -91.99643377650992,
                1.677915261884885
              ],
              [
                -91.99669126857535,
                1.682376538867554
              ],
              [
                -92.00544599879996,
                1.6843497927417084
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    });
/***** End of imports. If edited, may not auto-convert in the playground. *****/
  
///////////////////////////////
// Global coral atlas project - South Eastern Asia
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Eva Kovacs (kovacsevam2@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.tropical_eastern_pacific;          //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants 

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 250, //distance to land in meters to convert reef crest to TRF - not used for Indo
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1100, //depth in centimetres
  chagos_depth_cutoff: 1500, //depth cut off for southern chagos region only
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 1000, //depth in centimetres
  
  //############
  // Clean-up stage selection
  cleanup_stage: 2, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  export_small_area: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3_2missing';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1_absent';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2_missingRev';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the manually edited map - uses the output from the second pass of cleaning
  //var man_geo = ee.Image(region_params.geo_map_clean2);
 // var man_geo = ee.Image(region_params.geo_map_clean2).clip(indo_west); // use this when testing for a small area
  
 // Absent Reefs
// var absent = ee.Image().byte().paint(ee.Feature(absentreefs, {zone: 1}), "zone").clip(absentreefs);

//Attempt at clipping map to absent reefs
 var absent = ee.FeatureCollection(missingReefs);
 var geo2 = ee.Image(region_params.geo_map_clean2).clipToCollection(absent);
 var man_geo = geo2

/* 
  // All to RS
  man_geo = man_geo.where({
    test: geo2.eq(1)
                     .and(man_geo.eq(21).or(man_geo.eq(14).or(man_geo.eq(23).or(man_geo.eq(11))))), //SRS, ORF, PL, SL
    value: ee.Image(22) //RS
  });
  */
  // Add data + the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.image);
  Map.addLayer(lowtide_image, region_params.visParams, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);
  //Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(1)), {palette: ['F8FF23'], opacity: 0.4}, 'global_reef_mask - land', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(3)), {palette: ['0000ff'], opacity: 0.4}, 'global_reef_mask - reef', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(2)), {palette: ['FF0000'], opacity: 0.4}, 'global_reef_mask - water', false);

  // display distance to land mask for assessing cut-off distances
  var distToLand = ee.Image(region_params.distToLand);
    
  //Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
  Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
  
  // display distance to water mask
  var distToWater = ee.Image(region_params.distToWater);
    
  Map.addLayer(distToWater.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'distToWater ' + vars.dist_to_land_ORF + 'm', false);
  
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: absent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  //Attempt at clipping map to absent reefs
 var absent = ee.FeatureCollection(missingReefs);
 var ben2 = ee.Image(region_params.benthic_map_clean1).clipToCollection(absent);
 var man_benthic = ben2
 /*
  var depth = ee.Image(region_params.segments).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(geo_map_absent);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(benthic_map);
  
  // extra depth cutoff refinement
  man_benthic = man_benthic.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  /*
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });
    */
  // Seagrass on RC or ORF -> Coral/Algae
  
  // except for these two areas
  //var sg_orf = ee.Image().byte().paint(ee.Feature(sg_on_orf, {zone: 1}), "zone").unmask(geo_map.eq(42));
 /* 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(14).or(geo_map.eq(15)))
                     .and(sg_orf.eq(0)),
    value: ee.Image(15)
  });  
  */
  /*
    **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
    
 // var SGtoRK = ee.Image().byte().paint(ee.Feature(SGonRC, {zone: 1}), "zone").clip(SGonRC);

    // SG and SD on RC -> RK 
  man_benthic = man_benthic.where({
    test: SGtoRK.eq(1)
          .and(man_benthic.eq(14).or(man_benthic.eq(11))), // seagrass or sand
    value: ee.Image(13) //rock
  });  
  */
  // final smooth for missing data due to depth
  man_benthic = man_benthic.focal_mode(2)
                           .selfMask()
  
  
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
 // Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: missingReef,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
/*      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask(); */
          //Attempt at clipping map to absent reefs
          var absent = ee.FeatureCollection(missingReef);
          var benthic_map = ee.Image(region_params.benthic_map).clipToCollection(absent);
 

  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  

  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    var chagos = ee.Image().byte().paint(ee.Feature(chagos_extent, {zone: 1}), "zone").clip(chagos_extent);
    var maldives = ee.Image().byte().paint(ee.Feature(maldives_extent, {zone: 1}), "zone").clip(maldives_extent);
    
    // shallow lagoon > 5m == deep lagoon
    geo_map = geo_map.where({
      test: geo_map.eq(11)
                    .and(depth.gt(vars.shallowlag_depth_cutoff)),
      value: ee.Image(12)
    });
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    //deeper for chagos
    geo_map = geo_map.where({
      test: chagos.eq(1)
                    .and(depth.gt(vars.chagos_depth_cutoff)),
      value: ee.Image(2)
    });
    
    // shallower for maldives and lakedives
    geo_map = geo_map.where({
      test: maldives.eq(1)
      .and(depth.gt(vars.geo_depth_cutoff)),
      value: ee.Image(2)
    });
    
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

    // // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    // clean_map = clean_map.where({
    //   test: distToLand.lte(vars.dist_to_land_RC)
    //                 .and(clean_map.eq(15)),
    //   value: ee.Image(16)
    // });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
    
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        /*// reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();*/
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
      if (vars.export_small_area) {
    var export_convhull = absent;
  } else {
    //var export_convhull = clean_map.gt(2).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extent, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})
    var export_convhull = absent;
  }
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: absent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
