/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var notReef_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[71.60342946217652, 12.65909936158879],
           [71.68308034108277, 12.474125345239695],
           [72.21866383717652, 12.433896045657525],
           [72.04562916920777, 12.675177750692391],
           [71.88907399342652, 12.675177750692391]]],
         [[[72.71755096164087, 7.914742843027254],
           [72.47310516085962, 7.264063722961609],
           [73.53654615747737, 7.143550264651811],
           [73.13365813937524, 7.720187402744904],
           [73.11443206515649, 7.948746666513787]]],
         [[[72.61774093367676, 4.713846678989372],
           [72.70425826766113, 4.445541267884463],
           [72.86905318953613, 4.50167465686995],
           [72.7797892735205, 4.745324820875827]]],
         [[[72.88046310200002, 2.000226206221777],
           [73.06860397114065, 2.089433271265267],
           [72.84887740864065, 2.1649122234602767]]],
         [[[72.96822759144477, 4.536532520872901],
           [73.05886479847602, 4.294181595870132],
           [73.21541997425727, 4.343479687246037],
           [73.1289026402729, 4.607716403032213],
           [73.05062505238227, 4.6036098332757875]]]]),
    center_map = /* color: #d63000 */ee.Geometry.Point([110.54123843930057, 11.203641832350737]),
    region_extent = 
    /* color: #d6ce3f */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[116.38606558463863, 24.209573647975855],
          [105.04817495963863, 22.59644299595178],
          [95.99544058463863, 7.365385406360969],
          [105.31184683463863, -0.5243936157772531],
          [114.10090933463863, 0.6181651949272102],
          [118.84700308463863, 7.365385406360969],
          [115.33137808463863, 9.191775121314864],
          [110.32161245963863, 4.83119211083598],
          [105.75129995963863, 6.230859367180478],
          [110.84895620963863, 10.749860501427356],
          [111.28840933463863, 16.47051682571067],
          [117.61653433463863, 22.352797521719562]]]),
    pixels = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_pixels"),
    segments = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_segmentation"),
    ben = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_benthic"),
    geo = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_geo"),
    geo1 = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_geo_clean1"),
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    one = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_geo_clean1_1km"),
    two = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_geo_clean1_2andahalfkm"),
    five = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_geo_clean1_5km");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

// Viewing script for looking at reefs and classifications for each region. 
// From this region Timor Sea onwards the map_viewer script is going to be used from the very beginning
// in the workflow 
// Viewing script for looking at reefs and classifications for each region. 
// From this region Timor Sea onwards the map_viewer script is going to be used from the very beginning
// in the workflow 

//Viewer for sea

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove ;      //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.southeastern_asia;       //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################



// Choose which layers will be shown in the map viewer
var vars = {
  raw: true, // set to true if you want to view the raw classifications for benthic and geo
  geo_cleanup_stage: 3, // set to 0, 1, 2 or 3 - this controls the display of the geo clean stages (0 = cleanup not ready)
  benthic_cleanup_stage: 2, // set to 0, 1 or 2 - this controls the display of the benthic clean stages (0 = cleanup not ready)
};


// choose where to centre the map (link this dynamically to map app?)
Map.centerObject(center_map, 6);

// Add low-tide base map to viewer
// var low_tide_image = ee.Image(region_params.pixels);
// Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + " from stack", false); // image data

//print (region_params.image[0])
var low_tide_image_dove = ee.Image(region_params.image);
Map.addLayer(low_tide_image_dove, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + ' low tide', false); // image data

Map.addLayer(pixels, {color:'#00FFFF'}, "pixels", false)
Map.addLayer(segments, {color:'#00FF00'}, "segments", false)

/*
// Load the raw classifications
if (vars.raw) {
// geo raw (test if more than one map exists for the region)
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0, false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }

  // benthic raw (test if more than one map exists for the region)
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
    var benthic_map_raw = ee.Image(region_params.benthic_map[0]).unmask(0, false)
                     .add(ee.Image(region_params.benthic_map[1]).unmask(0, false))
                     .selfMask();
  } else {
      var benthic_map_raw = ee.Image(region_params.benthic_map);
  }

  // Add the raw region classification to the viewer
  Map.addLayer(geo_map_raw, map_palettes.geo, 'Geomorphic RAW', false);
  Map.addLayer(benthic_map_raw.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW', false);
  //Map.addLayer(benthic_subreg2_no_b4p.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW (no band4 outer reefs)', false); // test without band b4p
}

// Add geo clean stage 1 to the viewer
if (vars.geo_cleanup_stage == 1||vars.geo_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'Geomorphic - stage 1 clean', false);
  //Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean1_10m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_10m_4m), map_palettes.geo, 'timor_geo_clean1_10m_4m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_15m), map_palettes.geo, 'timor_geo_clean1_15m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_15m_4m), map_palettes.geo, 'timor_geo_clean1_15m_4m', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.geo_cleanup_stage == 2||vars.geo_cleanup_stage == 3) {
  Map.addLayer(ee.Image(region_params.geo_map_clean2), map_palettes.geo, 'Geomorphic - stage 2 clean', false);
  //Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean2_10m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_10m_4m), map_palettes.geo, 'timor_geo_clean2_10m_4m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_15m), map_palettes.geo, 'timor_geo_clean2_15m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_15m_4m), map_palettes.geo, 'timor_geo_clean2_15m_4m', false);
}

// Add geo clean stage 3 to the viewer
if (vars.geo_cleanup_stage == 3) {
  var geo_map_clean3 = ee.Image(region_params.geo_map_clean3)
  Map.addLayer(geo_map_clean3.updateMask(geo_map_clean3.gt(2)), map_palettes.geo, 'Geomorphic - stage 3 clean', true);
}

// Add benthic clean stage 1 to the viewer
if (vars.benthic_cleanup_stage == 1||vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean1), map_palettes.benthic, 'Benthic - stage 1 clean', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean2), map_palettes.benthic, 'Benthic - stage 2 clean', false);
}

// Geo Training Data - Needs more work + add flag to show
var geo_train = ee.FeatureCollection(region_params.geo_train_library);

var geo_buff = function(feature) {
  return feature.buffer(20);   // substitute in your value of Z here
};

var geo_train_buff = geo_train.map(geo_buff)

// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// Paint the interior of the polygons with different colors.
var geo_fill = empty.paint({
  featureCollection: geo_train_buff,
  color: 'class_num',
});
*/


Map.addLayer(geo, map_palettes.geo, 'Geo RAW', false);
Map.addLayer(geo1, map_palettes.geo, 'Geo clean 1', false);
Map.addLayer(one, map_palettes.geo, 'Geo clean 1 - 1km', false);
Map.addLayer(two, map_palettes.geo, 'Geo clean 1 - 2.5km', false);
Map.addLayer(five, map_palettes.geo, 'Geo clean 1 - 5km', false);
//Map.addLayer(clean2RCdist, map_palettes.geo, 'Geo clean 2', false);
//Map.addLayer(clean4, map_palettes.geo, 'Geo clean 3 ', false);
Map.addLayer(ben, map_palettes.benthic, 'Ben RAW', false);
////Map.addLayer(ben1, map_palettes.benthic, 'Ben clean 1', false);
//Map.addLayer(ben2, map_palettes.benthic, 'Ben clean 2', false);
//Map.addLayer(DeepMask,{color:'#00FF00'}, "DeepMask", false);
//Map.addLayer(extradeep,{color:'#00FFFF'}, "extradeep", false);

// Add WCMC to the viewer
Map.addLayer(wcmc, {color:'#ffff00'}, "WCMC layer", false);

////////// UI SET UP //////////

//Generate title
var title = ui.Label({
  value: 'Coral Atlas map classes',
  style: {fontWeight: 'bold', fontSize: '14px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
pkg_vis.add_lgds([title, geo_legend, benthic_legend]);//, mask_legend])
// generate the legend

