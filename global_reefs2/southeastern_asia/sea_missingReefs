/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    center_map = /* color: #d63000 */ee.Geometry.Point([106.76194156430057, 10.426682907956046]),
    MaskDiscrepancy = 
    /* color: #d62bd4 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[106.25166978529653, 3.2882158195832067],
           [106.24377336195668, 3.25736716721972],
           [106.22986879042348, 3.260623458638322],
           [106.2250622718688, 3.2368008732535336],
           [106.19708146742543, 3.233715893084893],
           [106.21682252577504, 3.1915535606558394],
           [106.21182347276167, 3.120422139211656],
           [106.24873066880659, 3.1008815758978794],
           [106.26417717640406, 3.1253929263910476],
           [106.28992638294703, 3.1175082185531413],
           [106.31739220325953, 3.107395137229105],
           [106.33953652088648, 3.1221362064138463],
           [106.34365639393336, 3.132763360579362],
           [106.34228310291773, 3.1478468779509012],
           [106.33987984364039, 3.1521319283270426],
           [106.33713326160914, 3.148189682629891],
           [106.3295801610232, 3.1473326707209104],
           [106.3347300023318, 3.1541887462403033],
           [106.33575997059351, 3.159330773216472],
           [106.32734856312281, 3.158987972210044],
           [106.32425865833765, 3.1490466938338066],
           [106.31893715565211, 3.147504073159104],
           [106.31447395985133, 3.1408193571913436],
           [106.31469650114155, 3.153312746434136],
           [106.31812972868062, 3.1615399843120056],
           [106.31812972868062, 3.170795548918696],
           [106.31366653287984, 3.163253983995612],
           [106.30182189787007, 3.1718239398777635],
           [106.30714340055562, 3.201475437942848],
           [106.30130691373921, 3.2071314068144523],
           [106.3090316757021, 3.2246132943814927],
           [106.30954665983296, 3.2391813045324827],
           [106.30886001432515, 3.2468936956881],
           [106.30491180265523, 3.270887424255101],
           [106.29323882902241, 3.2988222558967655],
           [106.27126617277241, 3.300878776976937],
           [106.25461501920796, 3.292309911086778]]],
         [[[106.21768083265981, 3.3294294918567293],
           [106.28917779616079, 3.301021377568394],
           [106.32145013502797, 3.321414977812903],
           [106.33174981764516, 3.333839443892128],
           [106.33767213515004, 3.347596781202898],
           [106.34033288279115, 3.356507875592429],
           [106.33870210341176, 3.3616488942324745],
           [106.33921708754262, 3.3678180506912274],
           [106.31810273817739, 3.3778428465358585],
           [106.31432618788442, 3.370902614266732],
           [106.30994882277211, 3.3706455676755773],
           [106.30574311903676, 3.3780998912231848],
           [106.29398431471547, 3.386239604421423],
           [106.2803372352477, 3.3865823276877034],
           [106.26892175368032, 3.3832407706685315],
           [106.27055253676137, 3.363962332480695],
           [106.2583645789977, 3.354622862969255],
           [106.24986734083852, 3.353594659033545],
           [106.24102677992543, 3.3426270831752722],
           [106.23561944655141, 3.353423291605803],
           [106.2338170020934, 3.353251924148024],
           [106.22643556288442, 3.3481108864569658],
           [106.22403230360707, 3.357621784936166],
           [106.21810998610219, 3.361391845199467],
           [106.22154321364125, 3.367046908270077],
           [106.22085656813344, 3.3721021641273063],
           [106.227980515277, 3.377243075334066],
           [106.23441781691274, 3.378956706355993],
           [106.23416032484731, 3.3854684766288017],
           [106.22926797560415, 3.386153923585903],
           [106.22883882216176, 3.38949547055185],
           [106.22755136183461, 3.396178529845647],
           [106.21665086439809, 3.39180884245982],
           [106.20566453627309, 3.384354624288925],
           [106.20017137221059, 3.378442617367091]]],
         [[[106.18538109224544, 3.3038549368226064],
           [106.20022980135188, 3.2890307966029906],
           [106.2232324258636, 3.297256936377944],
           [106.21902672212825, 3.308053641547073],
           [106.20074478548274, 3.3278472953284406]]],
         [[[106.3235890570083, 3.3009587300681678],
           [106.32427570251612, 3.2932467547075452],
           [106.32607814697413, 3.28879091948739],
           [106.33139964965967, 3.2929039988597135],
           [106.32891055969385, 3.312869329884301],
           [106.3232457342544, 3.321095272014561],
           [106.319211691896, 3.3174107438987996]]],
         [[[106.3898906152586, 3.299930298269913],
           [106.396711384705, 3.2918755261724257],
           [106.40803806547703, 3.291575636327219],
           [106.41653212026152, 3.267368357254978],
           [106.41979368642363, 3.277137102529202],
           [106.42169353393702, 3.291190217851225],
           [106.41070720581202, 3.312183831618644],
           [106.40727397827295, 3.3126979553623825],
           [106.40092250732569, 3.308842020778321],
           [106.39397022155909, 3.309356146256747],
           [106.39105197815088, 3.31655387492616],
           [106.38718959716944, 3.3172393701636746]]],
         [[[106.43798979238066, 3.243803010763329],
           [106.45575674489531, 3.229920622002814],
           [106.45790251210722, 3.233262695935046],
           [106.45438345387969, 3.2372903088606613],
           [106.45266684011015, 3.2562284439908638]]],
         [[[106.47532614186797, 3.2084111142025797],
           [106.48219259694609, 3.1964135823299005],
           [106.48648413136992, 3.1896434845321684],
           [106.49712713674101, 3.185529985611172],
           [106.5008178563455, 3.184158815650586],
           [106.50510939076933, 3.2012126119443316],
           [106.49738462880644, 3.207639848526387],
           [106.4906040044168, 3.2046404764781014],
           [106.48768576100859, 3.213467174771605],
           [106.4880290837625, 3.2221224067313776],
           [106.48167761281523, 3.223790658956977]]],
         [[[106.43627317861113, 3.173229440781332],
           [106.44923361257109, 3.1743435283176415],
           [106.44863279775176, 3.1853129413809484],
           [106.44322546437773, 3.197224905995372],
           [106.4319816441873, 3.191226092153766]]],
         [[[106.3816002006726, 3.140107509659879],
           [106.42949372484252, 3.133936960424044],
           [106.4394500847058, 3.144221188901037],
           [106.41421586229369, 3.157761935024919],
           [106.40408784105345, 3.1641037428029706],
           [106.3877800102429, 3.1569049310018946]]],
         [[[106.3599708671765, 3.1863854619382006],
           [106.365464031239, 3.181072172587248],
           [106.36494904710814, 3.156562129194717],
           [106.3709571953015, 3.155705124181942],
           [106.37267380907103, 3.1641037428029706],
           [106.37044221117064, 3.192727093962045]]],
         [[[106.32512360765502, 3.0962272604698615],
           [106.32598191453978, 3.076172008512376],
           [106.33713990404173, 3.078228974835191],
           [106.34366303636595, 3.084228437250749],
           [106.3460662956433, 3.0929704504421123],
           [106.3570526237683, 3.1037693083863434],
           [106.3548210258679, 3.1152536870005414]]],
         [[[106.34486466600463, 3.0773719060164817],
           [106.34778290941283, 3.048231157321154],
           [106.35602265550658, 3.0485739942616297],
           [106.35619431688353, 3.0672584419546727],
           [106.35773926927611, 3.0931418617456825]]],
         [[[106.3822868461804, 3.026289366442885],
           [106.40837937547728, 3.015489727910857],
           [106.41730576707884, 3.02663221035015],
           [106.41730576707884, 3.039831618185109],
           [106.38503342821166, 3.0470312271693034]]],
         [[[108.27510909119948, 3.698049800748247],
           [108.2871253875862, 3.719976434133709],
           [108.25107649842604, 3.7374488296815245],
           [108.22361067811354, 3.761772565150196],
           [108.21399764100417, 3.776503511738675],
           [108.18859175721511, 3.7864381950879524],
           [108.1717689422737, 3.7778738196572283]]],
         [[[108.04525450745925, 3.66738586553412],
           [108.08284834901198, 3.6319240260833627],
           [108.09022978822097, 3.645457936701116],
           [108.08336333314284, 3.656079344197789],
           [108.07684020081862, 3.6631031091022814],
           [108.07169035951003, 3.6680711046596954],
           [108.06224898377761, 3.667557175364765],
           [108.05452422181472, 3.6714972924049984]]],
         [[[108.09280470887526, 3.63654956270158],
           [108.12112883607253, 3.604341631506887],
           [108.12662200013503, 3.618047274131847],
           [108.12456206361159, 3.6283263701027395],
           [108.11065749207839, 3.6382627183908816]]],
         [[[108.07357863465651, 3.5849820596097257],
           [108.0835349945198, 3.574702474184406],
           [108.09692458192214, 3.574188491885964],
           [108.08971480409011, 3.5844680830799325],
           [108.08404997865065, 3.5890938614454058],
           [108.09280470887526, 3.5988593165879066],
           [108.10653761903151, 3.585667361200084],
           [108.10997084657058, 3.594747558744284],
           [108.08782652894362, 3.616848038666648],
           [108.07529524842604, 3.6159914409343705],
           [108.07375029603347, 3.591835052388007]]],
         [[[108.04370955506667, 3.6183899125446817],
           [108.04370955506667, 3.611537119684795],
           [108.0399330047737, 3.6041703096655775],
           [108.04679945985183, 3.5570555840587073],
           [108.05212096253737, 3.56305213810279],
           [108.04971770326003, 3.574188491885964],
           [108.05297926942214, 3.5849820596097257],
           [108.04662788352756, 3.5974029296282337],
           [108.04619870440916, 3.6144066028202704]]],
         [[[105.68969895450994, 3.065203504309362],
           [105.71201493351384, 3.0261199943358434],
           [105.69622208683415, 3.016520319445417],
           [105.67871262638494, 3.0086348087958923],
           [105.71853806583806, 2.989435066388504],
           [105.71579148380681, 2.9712635720945006],
           [105.68969895450994, 2.9770921972782505],
           [105.6986253461115, 2.948977368991754],
           [105.73227097599431, 2.825881001866604],
           [105.73433091251775, 2.8173083386674547],
           [105.75149705021306, 2.8238235684656954],
           [105.77243973820134, 2.8433690382677743],
           [105.76282670109197, 2.8653144341592705],
           [105.7813661298029, 2.8786872036949456],
           [105.7923524579279, 2.8728580669966317],
           [105.81501175968572, 2.9112612404798015],
           [105.82599808781072, 2.9071466770558163],
           [105.82874466984197, 2.9133185165581987],
           [105.81775834171697, 2.9424628558961676],
           [105.83355118839665, 2.9671492299019855],
           [105.84522416202947, 2.9582347693113533],
           [105.85312058536931, 2.9602919588940955],
           [105.8472840985529, 2.9866922185660423],
           [105.8194749554865, 2.9932064709467516],
           [105.81604172794744, 3.006920559797242],
           [105.80196549503728, 3.0110347528648576],
           [105.79063584415837, 2.9932064709467516],
           [105.77655961124822, 2.983263649154716],
           [105.74703385441228, 2.979492210453265],
           [105.73948075382634, 2.9774350566234564],
           [105.72746445743962, 2.9932064709467516],
           [105.73467423527165, 3.005549158658458],
           [105.74016739933415, 3.0148060828596446],
           [105.73433091251775, 3.0226915487645662],
           [105.74222733585759, 3.031605484686738],
           [105.73570420353337, 3.040519347162867],
           [105.73948075382634, 3.0439477362053564],
           [105.73810746281072, 3.0484046256500035],
           [105.72677781193181, 3.048061788655574],
           [105.71819474308415, 3.034348219435113],
           [105.71579148380681, 3.043604897791814],
           [105.70926835148259, 3.060746684595883]]],
         [[[105.67390610783025, 3.1125989139856083],
           [105.67914177982732, 3.1041998819588166],
           [105.68987061588689, 3.1030000147857657],
           [105.69579293339177, 3.095886488586839],
           [105.7000844678156, 3.083373423040187],
           [105.73664834110662, 3.0844018997415255],
           [105.73295762150212, 3.0928010888705937],
           [105.71716477482244, 3.100171751060673],
           [105.70677926151677, 3.0999146358015204],
           [105.69965531437322, 3.1016287363486463],
           [105.69690873234197, 3.106342498521017],
           [105.68626572697087, 3.117826849104771],
           [105.67390610783025, 3.117312627129767]]],
         [[[105.64120461552068, 3.113627362289453],
           [105.64214875309392, 3.1095135630522264],
           [105.64532448856755, 3.1021429659710154],
           [105.63880135624333, 3.1018001462505587],
           [105.64292122929021, 3.0926296775119364],
           [105.65399338810369, 3.096229310222994],
           [105.66120316593572, 3.094343789851452],
           [105.67038704960271, 3.0892014445224207],
           [105.67656685917302, 3.091086974037396],
           [105.6751935681574, 3.0994861102307367],
           [105.66549470035955, 3.1030000147857657],
           [105.66652466862126, 3.110542014366658],
           [105.65167595951482, 3.122112022449871],
           [105.64386536686345, 3.119283810001999]]],
         [[[105.58138062565251, 3.091344091438957],
           [105.5852859219782, 3.0844018997415255],
           [105.61249425022527, 3.0754026949113253],
           [105.6098334988825, 3.083373423040187],
           [105.59966256229802, 3.0923297075676026],
           [105.58554341404363, 3.0938295564406104]]],
         [[[105.94902308901062, 3.0983331405377412],
           [105.94679149111023, 3.079992063827288],
           [105.94335826357117, 3.0254812121073584],
           [105.97322734316101, 3.02119565092635],
           [105.9809521051239, 3.0165672258490925],
           [105.98781856020203, 3.0290810704075386],
           [105.99314006288758, 3.0949049259930135],
           [105.97417151643518, 3.0988475994180407]]],
         [[[106.0751083703827, 3.1476981928191443],
           [106.09150203188172, 3.1225017373159325],
           [106.10154422243347, 3.137328296544107],
           [106.12154277284851, 3.1306435154667156],
           [106.12214358766785, 3.133471697287652],
           [106.11725123842469, 3.1440130348730246],
           [106.10686572511902, 3.1464983753832763],
           [106.09879764040222, 3.143584527289842],
           [106.08892711122742, 3.157982285537126]]],
         [[[106.1115353281444, 2.927771916116384],
           [106.15041663002428, 2.9212572793989606],
           [106.15041663002428, 2.926571854301923],
           [106.14526678871569, 2.931886404003354],
           [106.1335079843944, 2.9383152610242034],
           [106.12380911659655, 2.9412296640148656],
           [106.11578391027867, 2.934672243135209]]],
         [[[106.15453650307116, 2.9582016239771507],
           [106.16286207985338, 2.951858598557263],
           [106.17024351906237, 2.9529729164577767],
           [106.17985655617174, 2.947058447138741],
           [106.19238783668932, 2.950915713307018],
           [106.19273115944323, 2.955544415037789],
           [106.16972853493151, 2.9633445909252005],
           [106.17007185768541, 2.9693446888247577],
           [106.16663863014635, 2.9726875863779965],
           [106.1613171274608, 2.9744018888874573]]],
         [[[106.12295080971178, 2.99411617580471],
           [106.14355017494616, 2.982973361427133],
           [106.15161825966295, 2.997544711291005],
           [106.1488716776317, 3.0049160261915646],
           [106.14200522255358, 3.0081731029711634]]],
         [[[106.23912264656481, 3.0010160925253775],
           [106.23847891640123, 2.9946733135517607],
           [106.24058176826891, 2.989273351149514],
           [106.2508814508861, 2.9984875566668396],
           [106.25195433449205, 3.004444606378558],
           [106.24890734505114, 3.0055160147500093],
           [106.24109674232028, 3.003480346555858]]],
         [[[106.21745039772448, 3.0486706172627622],
           [106.22268606972155, 3.03761407193834],
           [106.22629095863756, 3.045585081143799],
           [106.22242857765612, 3.049784836464609],
           [106.21993948640109, 3.050084821087852]]],
         [[[106.19574858541631, 2.8024852530505617],
           [106.20845152731084, 2.7546480367147472],
           [106.25480009908819, 2.7153823606945244],
           [106.26561476583623, 2.7136676731357534],
           [106.27127959127569, 2.7186402603498636],
           [106.27076460714483, 2.7268707044839418],
           [106.26424147482061, 2.7299571065256982],
           [106.25497176046514, 2.726013369177726],
           [106.24690367574834, 2.7364728181246547],
           [106.25325514669561, 2.7431599589914253],
           [106.2525685011878, 2.7522475520062297],
           [106.25789000387334, 2.756877053897017],
           [106.25480009908819, 2.764078465468922],
           [106.24604536886358, 2.76545015796009],
           [106.2503369032874, 2.774023200060373],
           [106.23456619899504, 2.7901403507927376],
           [106.22890137355559, 2.801799428557854],
           [106.22684143703215, 2.809172020779784],
           [106.20109223048918, 2.813458390214926]]],
         [[[108.95023092427726, 2.505731407151557],
           [108.94748434224601, 2.4817215736210105],
           [108.95709737935539, 2.4842940767176813],
           [108.9607022682714, 2.494069542738902],
           [108.96722540059562, 2.4969850185536986],
           [108.96396383443351, 2.5040164335937725],
           [108.95726904073234, 2.502301457791152]]],
         [[[100.02022560630178, 9.806205431110277],
           [100.0190239766631, 9.79013547725237],
           [100.07223900351858, 9.759685011696444],
           [100.0765305379424, 9.763576059823723],
           [100.07035072837209, 9.773218896125929],
           [100.06108101401662, 9.779139797459452],
           [100.03739174399709, 9.803498967083442],
           [100.02932369431346, 9.805359768592917]]],
         [[[99.68204798310776, 9.55183267016611],
           [99.7075396975853, 9.528386383567387],
           [99.70925631135484, 9.533465138382478],
           [99.70659556001206, 9.542860635449129],
           [99.71080126374741, 9.548362382875391],
           [99.70118822663804, 9.552932997776205],
           [99.68719782441636, 9.555472201764886]]],
         [[[101.4139698255419, 12.587539539402998],
           [101.41929132822744, 12.581675734988085],
           [101.42650110605948, 12.589885023651656],
           [101.42993433359854, 12.62456217905621],
           [101.41757471445791, 12.623222086372932]]],
         [[[101.44366724375479, 12.582010813134914],
           [101.45207865122549, 12.570785457186588],
           [101.44658548716299, 12.546992783576231],
           [101.44246561411612, 12.523533065183711],
           [101.44607050303213, 12.522862756143228],
           [101.44675714853994, 12.529063048294974],
           [101.4495037305712, 12.533419921150928],
           [101.45053369883291, 12.538782125096663],
           [101.44813043955557, 12.54347396199641],
           [101.44898874644034, 12.546825221734352],
           [101.45053369883291, 12.55101423506006],
           [101.45293695811026, 12.555370736590074],
           [101.45585520151846, 12.558386732897581],
           [101.45963175181143, 12.56408351831447],
           [101.46546823862784, 12.576314425164272],
           [101.45225031260244, 12.585361570545617]]],
         [[[102.23561330896939, 12.28677544103268],
           [102.24496885401334, 12.288368865742159],
           [102.2538952456149, 12.284846545576716],
           [102.25586935144986, 12.29080091642534],
           [102.23458334070767, 12.300696614803119]]],
         [[[102.27097555262174, 12.14055878732826],
           [102.27269216639127, 12.13485277472691],
           [102.25174947840299, 12.139216207123432],
           [102.24625631434049, 12.136866675482356],
           [102.26719900232877, 12.130824927556647],
           [102.36092611414517, 11.96798203976905],
           [102.38015218836392, 11.963615822370441],
           [102.38186880213345, 11.973355748976255],
           [102.37534566980924, 11.989140401493595],
           [102.37431570154752, 11.996192820178514],
           [102.38770528894986, 11.994849516551156],
           [102.38221212488736, 11.983095324463742],
           [102.39285513025845, 11.96798203976905],
           [102.40384145838345, 11.983431165628577],
           [102.43542715174283, 11.953539667024293],
           [102.44847341639127, 11.977721809010228],
           [102.43096395594205, 11.994849516551156],
           [102.41585775477017, 12.02305748646737],
           [102.40212484461392, 12.037496136564112],
           [102.40212484461392, 12.042868459523698],
           [102.39594503504361, 12.053612783006136],
           [102.38736196619595, 12.052269766090884],
           [102.38564535242642, 12.06939272804202],
           [102.37980886561002, 12.072750043309457],
           [102.36847921473111, 12.085171743861997],
           [102.35852285486783, 12.106992253729256],
           [102.35302969080533, 12.116391308866378],
           [102.3458199129733, 12.116726983286688],
           [102.32659383875455, 12.13720232412832],
           [102.3022179232272, 12.144586487333774],
           [102.27234884363736, 12.147607222354827],
           [102.25895925623502, 12.15700484538312],
           [102.24591299158658, 12.160025439423633]]],
         [[[102.55935543460265, 11.696677348964748],
           [102.56656521243468, 11.69415588616246],
           [102.56862514895812, 11.73096696040347],
           [102.55849712771789, 11.731471187634073]]],
         [[[102.57995479983703, 11.602583214472856],
           [102.60158413333312, 11.60106982725144],
           [102.6031290857257, 11.61183151356791],
           [102.58424633426085, 11.614690016695977]]],
         [[[102.59209621326718, 11.637184162116075],
           [102.61750209705625, 11.631467588211086],
           [102.61698711292539, 11.669968124442242],
           [102.60213766946869, 11.657947571322147]]],
         [[[103.30445901014592, 10.572266775135317],
           [103.32626000501897, 10.567879313978546],
           [103.30428734876897, 10.591334627497167]]],
         [[[103.85485133608277, 10.380479694423558],
           [103.85313472231324, 10.370686137870397],
           [103.99973353823121, 10.243626895407091],
           [104.0158697076648, 10.029357898157778],
           [104.03578242739137, 10.029695974299369],
           [104.04230555971559, 10.040176159638943],
           [104.0374990411609, 10.05302237541204],
           [104.04505214174684, 10.06316376407054],
           [104.04573878725465, 10.07229074151735],
           [104.02857264955934, 10.081417460719734],
           [104.02307948549684, 10.08006537047522],
           [104.0210195489734, 10.082769545291384],
           [104.02822932680543, 10.092571988715418],
           [104.02925929506715, 10.104064128443275],
           [104.0374990411609, 10.115893843232628],
           [104.03818568666871, 10.1263712267374],
           [104.03337916811402, 10.134820480332781],
           [104.0374990411609, 10.146987014190083],
           [104.04505214174684, 10.151718319186172],
           [104.05020198305543, 10.1713186942851],
           [104.05912837465699, 10.200041208110791],
           [104.06771144350465, 10.209840061676049],
           [104.07766780336793, 10.222679481867324],
           [104.08041438539918, 10.238896955153175],
           [104.08316096743043, 10.254437922395613],
           [104.07698115786012, 10.27673449968202],
           [104.08316096743043, 10.304096330588019],
           [104.08281764467652, 10.312878637190595],
           [104.07663783510621, 10.33685984152471],
           [104.08659419496949, 10.3571242209966],
           [104.08487758119996, 10.373334781648202],
           [104.08075770815309, 10.374685623825005],
           [104.06221827944215, 10.399337468621427],
           [104.06290492494996, 10.405753383152048],
           [104.05809840639527, 10.407441759788227],
           [104.05260524233277, 10.406091059210253],
           [104.0433355279773, 10.418247153812874],
           [104.03543910463746, 10.417909490918822],
           [104.03269252260621, 10.415545840416735],
           [104.00625667055543, 10.450998713783086],
           [103.99458369692262, 10.454374967106343],
           [103.98016414125856, 10.450661086432177],
           [103.97055110414918, 10.44154500928109],
           [103.96780452211793, 10.418922478503333],
           [103.96402797182496, 10.411493826429554],
           [103.94548854311402, 10.404064997379319],
           [103.93965205629762, 10.371983933641415],
           [103.9224859186023, 10.36185238783363],
           [103.88815364321168, 10.372997070193032],
           [103.87064418276246, 10.375698751631267]]],
         [[[104.54716166933473, 10.038316796673168],
           [104.5567747064441, 10.013975060679252],
           [104.5622678705066, 10.016848832998893],
           [104.5622678705066, 10.029695974299369],
           [104.55488643129762, 10.043049699572245]]],
         [[[104.61188773389742, 9.797430237015753],
           [104.65274314161226, 9.795062019546611],
           [104.65960959669039, 9.807410396298387],
           [104.66132621045992, 9.818235992005938],
           [104.65033988233492, 9.821449772608924],
           [104.6324870991318, 9.825847527072936],
           [104.61703757520601, 9.813499837415831],
           [104.60639450742825, 9.802251111257338]]],
         [[[104.35397016952966, 9.711959933918985],
           [104.35740339706872, 9.694531759663716],
           [104.35482847641443, 9.66762629557491],
           [104.36272489975427, 9.65916501267071],
           [104.36272489975427, 9.662718777404807],
           [104.36117994736169, 9.699438813017013],
           [104.36255323837732, 9.707222267538631],
           [104.35757505844568, 9.713821141655176]]],
         [[[108.49226294483054, 15.974008308645066],
           [108.53723822559226, 15.921190803326539],
           [108.54084311450828, 15.925482744719817],
           [108.53895483936179, 15.932415687023292],
           [108.54152976001609, 15.938523080648551],
           [108.53826819385398, 15.94760129514114],
           [108.54170142139304, 15.958659655650118],
           [108.51166068042625, 15.968727184456412],
           [108.5121756645571, 15.979289293495262],
           [108.50170432056296, 15.982424812305972]]],
         [[[105.89565310979745, 19.349133696726263],
           [105.90732608343026, 19.33941547993501],
           [105.90526614690683, 19.348728782580796]]],
         [[[105.92517886663339, 19.363467009934766],
           [105.93590770269296, 19.344517615904316],
           [105.93865428472421, 19.355288268008877],
           [105.93359027410409, 19.360956746638323],
           [105.94131503606698, 19.37904020031988],
           [105.9273246338453, 19.387541605204685]]],
         [[[106.9820640367813, 20.753748778192385],
           [107.0205161852188, 20.703978583229826],
           [107.0428321642227, 20.702693974614657],
           [107.06686475699614, 20.717145193821544],
           [107.07991102164458, 20.71907191891975],
           [107.08918073600005, 20.729026274810078],
           [107.08265760367583, 20.74122749564338],
           [107.08849409049223, 20.745401371665565],
           [107.08471754019926, 20.754390867301616],
           [107.09124067252348, 20.760169546570665],
           [107.10737684195708, 20.767553093024674],
           [107.11218336051176, 20.790343503435228],
           [107.12076642935942, 20.770763218080898],
           [107.12110975211333, 20.759527482005065],
           [107.12763288443755, 20.740585350650104],
           [107.13175275748442, 20.736411341767422],
           [107.15715864127348, 20.735769176336],
           [107.16299512808989, 20.742190708023216],
           [107.14205244010161, 20.776862267751437],
           [107.13896253531645, 20.780714172217767],
           [107.14411237662505, 20.78488695783152],
           [107.13724592154692, 20.796120807269478],
           [107.14308240836333, 20.82468311289905],
           [107.14205244010161, 20.849389952559743],
           [107.13518598502348, 20.880187602667508],
           [107.12591627066801, 20.890131328979205],
           [107.1252296251602, 20.90584748849038],
           [107.1307227892227, 20.91418600661667],
           [107.12763288443755, 20.92059993578426],
           [107.14239576285551, 20.930220314897166],
           [107.13518598502348, 20.943367167231134],
           [107.12213972037505, 20.923486114370405],
           [107.11012342398833, 20.93342697066358],
           [107.09913709586333, 20.951382974062263],
           [107.09536054557036, 20.919637863904413],
           [107.10394361441801, 20.90841323575721],
           [107.10188367789458, 20.89782924542506],
           [107.10806348746489, 20.888527546695176],
           [107.1138999742813, 20.88916906166474],
           [107.11527326529692, 20.884999165365635],
           [107.1032569689102, 20.875696671745267],
           [107.08300092642973, 20.8702432179994],
           [107.07888105338286, 20.86254388756017],
           [107.07476118033598, 20.86446875714311],
           [107.06789472525786, 20.87665902538829],
           [107.05828168814848, 20.87890449324733],
           [107.05519178336333, 20.875375885827665],
           [107.06274488394926, 20.858052429358974],
           [107.05828168814848, 20.858052429358974],
           [107.04557874625395, 20.876979808566016],
           [107.0373390001602, 20.88788602898442],
           [107.02875593131255, 20.884999165365635],
           [107.01879957144926, 20.892376595392296],
           [107.02841260855864, 20.90167805557731],
           [107.02497938101958, 20.914506709592477],
           [107.01708295767973, 20.91707230870242],
           [107.00849988883208, 20.909696092930975],
           [107.0040366930313, 20.899432928319744],
           [106.99957349723051, 20.890131328979205],
           [106.98000410025786, 20.891093590125593],
           [106.97313764517973, 20.89782924542506],
           [106.96112134879301, 20.890452083380012],
           [106.95150831168364, 20.893018093913266],
           [106.94017866080473, 20.8676768183415],
           [106.95906141226958, 20.80960032244288]]],
         [[[107.16711500113676, 20.819227809767717],
           [107.16505506461333, 20.812488633211586],
           [107.17226484244536, 20.804465411110634],
           [107.17707136100005, 20.794195063903757],
           [107.19252088492583, 20.806070089687328],
           [107.18771436637114, 20.81441414297778],
           [107.18325117057036, 20.81826508871072],
           [107.18668439810942, 20.82885468199648],
           [107.20316389029692, 20.827571134579898],
           [107.21037366812895, 20.812809553214148],
           [107.23062971060942, 20.819548715419845],
           [107.23028638785551, 20.840085255206823],
           [107.24436262076567, 20.83719747353735],
           [107.25843885367583, 20.83077998261025],
           [107.2515723985977, 20.822115936032006],
           [107.27285840933989, 20.81537688863629],
           [107.29929426139067, 20.844577249899764],
           [107.29826429312895, 20.86061899333158],
           [107.28144147818755, 20.86061899333158],
           [107.26976850455473, 20.862223073566863],
           [107.26290204947661, 20.874734311937637],
           [107.2350929064102, 20.87794215398923],
           [107.21964338248442, 20.879546049327526],
           [107.21586683219145, 20.88435763257955],
           [107.20797040885161, 20.880187602667508],
           [107.19149091666411, 20.886602985339614],
           [107.18462446158598, 20.883395328261578],
           [107.18496778433989, 20.870564014875086],
           [107.19904401725005, 20.85708995657507],
           [107.20934369986723, 20.849069110505162],
           [107.19767072623442, 20.83719747353735],
           [107.1746681017227, 20.850031634616133],
           [107.18428113883208, 20.835913997235235]]],
         [[[107.16316678946684, 20.844577249899764],
           [107.15973356192778, 20.833186573762397],
           [107.16711500113676, 20.83206350267788],
           [107.17157819693755, 20.831903063267728],
           [107.17655637686919, 20.841689554416956]]],
         [[[107.32280368017305, 20.93599224584918],
           [107.31387728857149, 20.917393005503982],
           [107.29327792333711, 20.903923149238036],
           [107.31937045263399, 20.87377194596569],
           [107.32623690771211, 20.898149983375127],
           [107.35164279150118, 20.87505509922513],
           [107.33447665380586, 20.848106580236028],
           [107.34683627294649, 20.814735058880615],
           [107.38666171239961, 20.787133794617713],
           [107.38322848486055, 20.8211532334286],
           [107.38185519384493, 20.83334701180494],
           [107.36331576513399, 20.835272254980815],
           [107.3640024106418, 20.853240003840774],
           [107.3969613950168, 20.861581443526475],
           [107.39284152196993, 20.8692808232635],
           [107.40382785009493, 20.892376595392296],
           [107.42648715185274, 20.891735094129714],
           [107.4793588559543, 20.907771803055315],
           [107.47386638478487, 20.878745345325605],
           [107.48476738902608, 20.868620813362902],
           [107.4702612720865, 20.82095490092923],
           [107.47081779051996, 20.81171822684074],
           [107.48304728849762, 20.82109421618078],
           [107.50030071004588, 20.866476258461145],
           [107.52192976701009, 20.885641859473186],
           [107.52261752294649, 20.92316543060566],
           [107.53703707861055, 20.965489751168462],
           [107.55145663427461, 20.988570697519215],
           [107.54802340673555, 21.003956013923474],
           [107.56450289892305, 21.04177150610913],
           [107.55008334325899, 21.047539127552547],
           [107.48141879247774, 20.987288516256687],
           [107.46150607275118, 20.966772119475632],
           [107.44296664404024, 20.97254264074674],
           [107.42030734228243, 20.944970362939895],
           [107.39627474950899, 20.919317171905536],
           [107.35576266454805, 20.90713036761016],
           [107.34683627294649, 20.913544598607125],
           [107.35370272802461, 20.927013590489434],
           [107.39284152196993, 20.951382974062263],
           [107.38528842138399, 20.967413299504916],
           [107.35164279150118, 20.944970362939895]]],
         [[[107.3999835010611, 20.8087009162493],
           [107.41165647469391, 20.77018459106349],
           [107.41817903613392, 20.774678045232086],
           [107.42332944832673, 20.799714653065294],
           [107.41440340452763, 20.808701244097286]]],
         [[[107.46933469735016, 20.74353838536865],
           [107.444272136315, 20.722025373339438],
           [107.44701871834626, 20.71560298626587],
           [107.4600649829947, 20.71624523722617],
           [107.47482786141266, 20.734869330424072]]],
         [[[107.47242460213532, 20.766974453712475],
           [107.4823809619986, 20.753491132154558],
           [107.49645719490876, 20.77532066893992],
           [107.488217448815, 20.781098547777273]]],
         [[[107.37560758553376, 20.75060169249753],
           [107.39002714119782, 20.74482264756179],
           [107.40067014656891, 20.749959587298182],
           [107.40170011483063, 20.75926984581547],
           [107.39243040047516, 20.76087500485155],
           [107.3838473316275, 20.754133222357922]]],
         [[[107.62755594733565, 21.126404117161584],
           [107.56747446540206, 20.973888255214003],
           [107.57056437018721, 20.971323629679393],
           [107.57983408454268, 20.980299626518477],
           [107.59047708991378, 21.0126728476891],
           [107.5915070581755, 21.025812448261252],
           [107.60009012702315, 21.02965796594922],
           [107.60386667731612, 21.04856365104798],
           [107.61279306891768, 21.067146561097633],
           [107.62549601081221, 21.1033445276012],
           [107.63270578864424, 21.120959815073952],
           [107.63304911139815, 21.12736485560541]]],
         [[[107.69347391608565, 21.238768212388514],
           [107.66909800055831, 21.21124530959199],
           [107.6522751856169, 21.15394281650833],
           [107.64506540778487, 21.13697189762963],
           [107.64815531257003, 21.13376961946931],
           [107.65330515387862, 21.138573010763174],
           [107.65914164069503, 21.136331447532687],
           [107.6684113550505, 21.145617703022292],
           [107.66944132331221, 21.174113265511217],
           [107.67562113288253, 21.188519045436347],
           [107.67768106940596, 21.203243502736974],
           [107.68351755622237, 21.210605181001416],
           [107.69931040290206, 21.233328045806378]]],
         [[[107.79522275954619, 20.98453832913559],
           [107.80483579665557, 20.97604344390935],
           [107.82492017775908, 20.983576668259918],
           [107.82680845290557, 20.991590319712977],
           [107.83796644240752, 20.998000931258073],
           [107.84105634719268, 21.00921883900528],
           [107.8475794795169, 21.017711836687525],
           [107.85496091872588, 21.015949178825394],
           [107.86611890822783, 21.026044119059748],
           [107.85993909865752, 21.049436114098096],
           [107.86903715163604, 21.054883037578897],
           [107.86577558547393, 21.064494769193114],
           [107.85684919387236, 21.05312081944024],
           [107.84706449538604, 21.04206642982981],
           [107.8369364741458, 21.04751362293239],
           [107.82972669631377, 21.03693947784881],
           [107.81908369094268, 21.039342758562274],
           [107.81839704543486, 21.026685044568307],
           [107.81153059035674, 21.014827476611433],
           [107.80921928142466, 21.00874951454098],
           [107.80338279460825, 21.00105730161186],
           [107.79943458293833, 20.98983878044717]]],
         [[[107.73197166179575, 21.01211473299794],
           [107.72991172527232, 21.00394192792725],
           [107.73454658245005, 20.99817261954372],
           [107.73454658245005, 20.98935796784618],
           [107.74604789470591, 20.986793607831235],
           [107.75754920696177, 20.977016581414034],
           [107.75686256145396, 20.969643318722426],
           [107.74656287883677, 20.958743046879377],
           [107.73677818035044, 20.948483241834115],
           [107.73609153484263, 20.94174986249496],
           [107.74673454021372, 20.94255147115542],
           [107.75325767253794, 20.953452922757798],
           [107.76098243450083, 20.952971993107575],
           [107.76424400066294, 20.95489570243341],
           [107.7812384769813, 20.968521268602878],
           [107.79325477336802, 20.97188739369673],
           [107.79239646648325, 20.979581109259154],
           [107.78553001140513, 20.98070307635103],
           [107.78913490032114, 20.989037425252196],
           [107.78553001140513, 20.99448655577699],
           [107.77231208537974, 21.001858592292212],
           [107.76355735515513, 21.0167618146276],
           [107.75823585246958, 21.015800361342475],
           [107.75171272014536, 21.018684702602048],
           [107.74948112224497, 21.02669646890736],
           [107.73866645549693, 21.019966614142955]]],
         [[[107.74964899445682, 21.04825055454037],
           [107.76896089936405, 21.03967918849353],
           [107.76604544121595, 21.031668120102804],
           [107.78630148369642, 21.03607426102551],
           [107.78630148369642, 21.04224263939267],
           [107.78209577996107, 21.048490866104224],
           [107.77651678521009, 21.054818931013042],
           [107.76922117668958, 21.046968886315753],
           [107.75995146233412, 21.048490866104224],
           [107.75840650994154, 21.05682142716123],
           [107.7534283300099, 21.054818931013042]]],
         [[[107.72252106275666, 21.314512564776145],
           [107.73350739088166, 21.30027903079073],
           [107.7992536982547, 21.330983359523188],
           [107.82757782545197, 21.353208005712705],
           [107.81384491529572, 21.36072205192155],
           [107.76509308424103, 21.33673970619945]]],
         [[[107.82797909903776, 21.3631200706559],
           [107.83759213614714, 21.362480602831766],
           [107.84857846427214, 21.365997641316902],
           [107.85149670768034, 21.36152139586139],
           [107.84119702506315, 21.350170303201736],
           [107.84514523673307, 21.343295270328493],
           [107.88600064444792, 21.35656539312924],
           [107.91380978751432, 21.35512652222676],
           [107.92737103629362, 21.35928322183884],
           [107.95020199942839, 21.35272837265985],
           [107.97354794669401, 21.388216976936974],
           [107.98316098380339, 21.382142961212836],
           [107.99723721671354, 21.38757761873548],
           [108.0083952062155, 21.397487356816228],
           [107.99861050772917, 21.402122326379335],
           [107.9512319676901, 21.397647185798895],
           [107.9072866551901, 21.38502015798794],
           [107.87209607291472, 21.384380785816017],
           [107.84737683463347, 21.38006495058126],
           [107.82729245352995, 21.36903501567892]]],
         [[[109.0826970218808, 21.053670552521147],
           [109.12406741372651, 21.01714001561905],
           [109.13350878945893, 21.02419046574583],
           [109.14192019692963, 21.046621497378613],
           [109.14037524453705, 21.06360274542386],
           [109.13230715982026, 21.072252824809084],
           [109.11582766763276, 21.073374094560048],
           [109.0936833500058, 21.062641594440326]]]]),
    missing2 = 
    /* color: #c6ff1a */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[109.40805585113712, 12.695279760324581],
           [109.36685712066837, 12.676941713655726],
           [109.35698659149357, 12.679872540396852],
           [109.35312421051212, 12.692432844295388],
           [109.34642941681095, 12.682300914144706],
           [109.34333951202579, 12.672587280229529],
           [109.3436828347797, 12.668149031124816],
           [109.34085042205997, 12.668149031124816],
           [109.33715970245548, 12.664548130727763],
           [109.33544308868595, 12.663794447464163],
           [109.33046490875431, 12.663375733577357],
           [109.32943494049259, 12.662119587791832],
           [109.33836133209415, 12.650981491250118],
           [109.33896214691349, 12.647882836609691],
           [109.35046345916935, 12.649976526298543],
           [109.35655743805118, 12.654833820242027],
           [109.37140614715763, 12.658937324111953],
           [109.37046200958439, 12.661533384307829],
           [109.36771542755314, 12.666892908855944],
           [109.37217862335392, 12.673173458294892],
           [109.37741429535099, 12.670326295060509],
           [109.38462407318302, 12.669321406324372],
           [109.38865811554142, 12.669572628879857],
           [109.39449460235782, 12.668316513626321],
           [109.39612538543888, 12.672168580785796],
           [109.39337880340763, 12.677192928697876],
           [109.3949237558002, 12.681798493890076],
           [109.40436513153263, 12.668818960470567],
           [109.40762669769474, 12.668651478299202],
           [109.4136348458881, 12.647296600420072],
           [109.40539509979435, 12.64218791380402],
           [109.4055667611713, 12.639591656857595],
           [109.40805585113712, 12.635822849830708],
           [109.40076024261661, 12.635990353545509],
           [109.392005512392, 12.63289151705215],
           [109.38994557586857, 12.630462673000087],
           [109.40899998871036, 12.602738715981092],
           [109.41208989349552, 12.603743866559894],
           [109.41500813690372, 12.59788043261104],
           [109.43535001007267, 12.593775949050924],
           [109.435950824892, 12.595283726156504],
           [109.4330325814838, 12.5985505461365],
           [109.43406254974552, 12.605670394148442],
           [109.43517834869571, 12.609439645356796],
           [109.43577916351505, 12.61413019161688],
           [109.43697172039458, 12.61769638816276],
           [109.43748670452544, 12.623308100620454],
           [109.42495542400786, 12.646004964821062],
           [109.42881780498931, 12.670625849849037],
           [109.4163723551602, 12.685949893936582],
           [109.41070752972075, 12.695663017997843]]],
         [[[109.3380089365811, 12.633107363016626],
           [109.32590680950591, 12.638634986368675],
           [109.32058530682036, 12.640477500915793],
           [109.3156929575772, 12.639388743925773],
           [109.31251722210357, 12.635619933906215],
           [109.30427747600982, 12.631432302036686],
           [109.30221753948638, 12.625485746933702],
           [109.30281835430571, 12.61711008274657],
           [109.30599408977935, 12.61275462904446],
           [109.31955533855864, 12.60362468763471],
           [109.32504850262114, 12.607812774551784],
           [109.33603483074614, 12.609655511104835],
           [109.41225248211333, 12.55696477565883],
           [109.4119949900479, 12.562158937336033],
           [109.40770345562407, 12.564672203707666],
           [109.40366941326567, 12.570703942741915],
           [109.40049367779204, 12.573384670200696],
           [109.40057950848052, 12.57933243435128],
           [109.39800458782622, 12.583604686958294],
           [109.39594465130278, 12.585447597503245],
           [109.39688878887603, 12.588128171034604],
           [109.39783292644927, 12.591730147616822],
           [109.39731794231841, 12.594829482329265],
           [109.39319806927153, 12.598180072312847],
           [109.39105230205962, 12.599687823519513],
           [109.38985067242095, 12.602116959586873],
           [109.3859882914395, 12.606556355665171],
           [109.38761907452056, 12.609320469081245],
           [109.38590246075103, 12.616104984622995],
           [109.38684659832427, 12.620209110448187],
           [109.38590246075103, 12.625066970236231],
           [109.38066678875396, 12.627914638258142],
           [109.37603193157622, 12.62925470635596],
           [109.37139707439849, 12.63084602810089],
           [109.36676221722075, 12.632102327745683],
           [109.35972410076567, 12.632604845875063],
           [109.35749250286528, 12.628500918914995],
           [109.35577588909575, 12.627160846867271],
           [109.35242849224517, 12.62749586553751],
           [109.3471928202481, 12.629170952305568]]],
         [[[109.23020559185454, 12.596253488422223],
           [109.22951894634673, 12.525211089275617],
           [109.23501211040923, 12.526216543028628],
           [109.23312383526275, 12.551184053059039],
           [109.23930364483306, 12.572295628044104],
           [109.24548345440337, 12.572630718430153],
           [109.246856745419, 12.581677993604108],
           [109.24479680889556, 12.588547008119294],
           [109.23775869244048, 12.58988728219543],
           [109.23346715801665, 12.59558336889299]]],
         [[[109.19552999371001, 12.622386783138564],
           [109.20548635357329, 12.61183327357461],
           [109.2087479197354, 12.618031419226156],
           [109.20376973980376, 12.625066970236231]]]]),
    geo1 = ee.Image("projects/coral_atlas/southeastern_asia/in_out/southeastern_asia_geo_clean1");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
  
///////////////////////////////
// Global coral atlas project - South Eastern Asia
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Eva Kovacs (kovacsevam2@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.southeastern_asia;          //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 250, //distance to land in meters to convert reef crest to TRF - not used for Indo
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1100, //depth in centimetres
  chagos_depth_cutoff: 1500, //depth cut off for southern chagos region only
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 1000, //depth in centimetres
  
  //############
  // Clean-up stage selection
  cleanup_stage: 3, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  export_small_area: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3_absentlast';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the manually edited map - uses the output from the second pass of cleaning
  //var man_geo = ee.Image(region_params.geo_map_clean2);
 // var man_geo = ee.Image(region_params.geo_map_clean2).clip(indo_west); // use this when testing for a small area
  
 // Absent Reefs
// var absent = ee.Image().byte().paint(ee.Feature(absentreefs, {zone: 1}), "zone").clip(absentreefs);

//Attempt at clipping map to absent reefs
 var absent = ee.FeatureCollection(missing2);
 var geo2 = ee.Image(region_params.geo_map_clean1b).clipToCollection(absent);
 var man_geo = geo2
 
  /*
  // import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  //var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  //Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", true, 0.4);
 var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  // the "MID MASK" CLEAN
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });
  
  // the "REEF MASK" CLEAN
  
  // Define a kernel for reef mask Morphological Operations
  var kernel_rm = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create reef mask to clean areas inside the reef - Perform an dilation of deepwater
  var reef_mask = man_geo.eq(2)
            .focal_max({kernel: kernel_rm, iterations: 2});
  
  // Reef crest, slope, sheltered slope (within reef mask) -> Inner reef flat
  man_geo = man_geo.where({
    test: reef_mask.eq(0)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22))),
    value: ee.Image(13)
  });
  
  // the "DEEP WATER" CLEAN
  
  // Define a kernel for deep water Morphological Operations
   var kernel_dw = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

   // Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
   var deepwater = man_geo.eq(2)
             .focal_max({kernel: kernel_dw, iterations: 2})
             .focal_min({kernel: kernel_dw, iterations: 2});
    
  
   // Deep lagoon (outside reef mask and global mask) -> deepwater 
   man_geo = man_geo.where({
     test: deepwater.eq(1)
                     .and(man_geo.eq(12)),
     value: ee.Image(2)
   });
  
  
   // Reef classes in deepwater -> deepwater
   man_geo = man_geo.where({
     test: deepwater.eq(1)
                     .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(24))),
     value: ee.Image(2)
   });
  
  
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })
  
  */
  
  /*
  ###################
  ###################
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone").clip(not_reef_crest);
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone").clip(not_deep_water);
  */
/*
  // Define the manual variables
  var deep = ee.Image().byte().paint(ee.Feature(deepwater, {zone: 1}), "zone").clip(deepwater);
  var RS = ee.Image().byte().paint(ee.Feature(SRStoRS, {zone: 1}), "zone").clip(SRStoRS);
  var RCtoFlat = ee.Image().byte().paint(ee.Feature(RCtoORF, {zone: 1}), "zone").clip(RCtoORF);
  var StoDL = ee.Image().byte().paint(ee.Feature(RStoDL, {zone: 1}), "zone").clip(RStoDL);
  var eDeep = ee.Image().byte().paint(ee.Feature(deep3, {zone: 1}), "zone").clip(deep3);
  
   // Reef crest -> outer reef flat
  man_geo = man_geo.where({
    test: RCtoFlat.eq(1)
            .and(man_geo.eq(15)), //RC
    value: ee.Image(14) // ORF
  });
  
    // Slope -> Deep Lagoon
  man_geo = man_geo.where({
    test: StoDL.eq(1)
           .and(man_geo.eq(22)), //RS
    value: ee.Image(12) // DL
  });
  
  // reef -> Deep 
  man_geo = man_geo.where({
    test: eDeep.eq(1),
    value: ee.Image(2) // deep
  });  
  
  
  // Reef classes in deep water -> deep water
  man_geo = man_geo.where({
    test: deep.eq(1),
    value: ee.Image(2) //deep
  });  
  
  // SRS near reef crest -> RS
  man_geo = man_geo.where({
    test: RS.eq(1)
                     .and(man_geo.eq(21)), //SRS
    value: ee.Image(22) //RS
  });
  
  */
  /*
  // Reef crest -> Inner reef flat (inside the reef)
  man_geo = man_geo.where({
    test: notreefcrest.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(13)
  });
  
  // Deep water -> Deep lagoon (inside the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(2)),
    value: ee.Image(12)
  });
  
  ##############
  */
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.image);
  Map.addLayer(lowtide_image, region_params.visParams, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);
  //Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(1)), {palette: ['F8FF23'], opacity: 0.4}, 'global_reef_mask - land', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(3)), {palette: ['0000ff'], opacity: 0.4}, 'global_reef_mask - reef', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(2)), {palette: ['FF0000'], opacity: 0.4}, 'global_reef_mask - water', false);

  // display distance to land mask for assessing cut-off distances
  var distToLand = ee.Image(region_params.distToLand);
    
  //Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
  Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
  
  // display distance to water mask
  var distToWater = ee.Image(region_params.distToWater);
    
  Map.addLayer(distToWater.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'distToWater ' + vars.dist_to_land_ORF + 'm', false);
  
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: missing2,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // extra depth cutoff refinement
  man_benthic = man_benthic.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });
    
  // Seagrass on RC or ORF -> Coral/Algae
  
  // except for these two areas
  var sg_orf = ee.Image().byte().paint(ee.Feature(sg_on_orf, {zone: 1}), "zone").unmask(geo_map.eq(42));
 /* 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(14).or(geo_map.eq(15)))
                     .and(sg_orf.eq(0)),
    value: ee.Image(15)
  });  
  */
  /*
    **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
    */
  var SGtoRK = ee.Image().byte().paint(ee.Feature(SGonRC, {zone: 1}), "zone").clip(SGonRC);

    // SG and SD on RC -> RK 
  man_benthic = man_benthic.where({
    test: SGtoRK.eq(1)
          .and(man_benthic.eq(14).or(man_benthic.eq(11))), // seagrass or sand
    value: ee.Image(13) //rock
  });  
  
  // final smooth for missing data due to depth
  man_benthic = man_benthic.focal_mode(2)
                           .selfMask()
  
  
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    var chagos = ee.Image().byte().paint(ee.Feature(chagos_extent, {zone: 1}), "zone").clip(chagos_extent);
    var maldives = ee.Image().byte().paint(ee.Feature(maldives_extent, {zone: 1}), "zone").clip(maldives_extent);
    
    // shallow lagoon > 5m == deep lagoon
    geo_map = geo_map.where({
      test: geo_map.eq(11)
                    .and(depth.gt(vars.shallowlag_depth_cutoff)),
      value: ee.Image(12)
    });
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    //deeper for chagos
    geo_map = geo_map.where({
      test: chagos.eq(1)
                    .and(depth.gt(vars.chagos_depth_cutoff)),
      value: ee.Image(2)
    });
    
    // shallower for maldives and lakedives
    geo_map = geo_map.where({
      test: maldives.eq(1)
      .and(depth.gt(vars.geo_depth_cutoff)),
      value: ee.Image(2)
    });
    
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

    // // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    // clean_map = clean_map.where({
    //   test: distToLand.lte(vars.dist_to_land_RC)
    //                 .and(clean_map.eq(15)),
    //   value: ee.Image(16)
    // });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
    
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        /*// reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();*/
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
      if (vars.export_small_area) {
    var export_convhull = export_small;
  } else {
    //var export_convhull = clean_map.gt(2).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extent, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})
    var export_convhull = reef_extent;
  }
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
