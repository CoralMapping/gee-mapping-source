/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var refinement_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[120.3791265135556, 12.943073931417356],
           [119.9616460448056, 12.964487410039885],
           [119.5276860838681, 12.718121893326119],
           [118.67764051468846, 11.274136516065013],
           [117.48013074906346, 9.832310909340963],
           [116.81953539488961, 9.111164149268179],
           [115.99556078551461, 7.404259587855364],
           [116.02302660582711, 6.924636835087074],
           [116.52641333650114, 6.935157092700178],
           [116.83642977629442, 7.327079813730836],
           [117.08980196867724, 7.559933494202121],
           [117.1042215243413, 7.728708156063593],
           [117.07538241301317, 7.806267516832854],
           [117.04173678313036, 7.777694682373469],
           [117.00122469816942, 7.766809280711943],
           [116.8105089083745, 7.7372131701079345],
           [116.79903114964132, 7.815251102383452],
           [116.79628456761007, 7.8785111941777455],
           [116.81001747776632, 8.080470278981789],
           [116.95215309788351, 8.14275698038477],
           [116.98511208225851, 8.407760243255014],
           [116.95421303440695, 8.57210749549243],
           [117.03043068577414, 8.60333906226158],
           [117.11145485569601, 8.67258246677332],
           [117.21949593179936, 8.677595253152868],
           [117.25382743335595, 8.758021924660081],
           [117.17005745523686, 8.807220778985625],
           [117.16456429117436, 8.879818411401581],
           [117.2380353605103, 8.930696043662842],
           [117.32899521569678, 9.057838565786962],
           [117.43405197839209, 9.166315404584875],
           [117.47645700904923, 9.214954360409397],
           [117.59936655494766, 9.272561292430485],
           [117.82710432082438, 9.426359192339952],
           [118.06262373000406, 9.546233421749166],
           [118.12087470770467, 9.70103777851919],
           [118.18747932196248, 9.839758413498592],
           [118.1442206549703, 9.886436690527491],
           [118.14010078192342, 9.899288966784],
           [118.15932685614217, 9.90334747584641],
           [118.17855293036092, 9.860730631225142],
           [118.31656867743123, 9.77074366825548],
           [118.39621955633748, 9.803899603612587],
           [118.43192512274373, 9.888466030726281],
           [118.69697028875936, 10.204888105945834],
           [118.83223945379842, 10.321101500752542],
           [118.79516059637655, 10.523696314981402],
           [118.78005439520467, 10.581749075994454],
           [119.09041816473592, 10.711447635381118],
           [119.1884021258051, 11.060078159845316],
           [119.20694155451604, 11.22042040971433],
           [119.31337160822697, 11.305944864081189],
           [119.41842837092229, 11.459420686203257],
           [119.58802981135197, 11.541509572380848],
           [119.8640613054926, 11.625928413043136],
           [119.84512229930483, 11.725503011649009],
           [119.81113334666811, 11.863629432216847],
           [119.69543357860171, 11.866317333140971],
           [119.66522117625796, 12.066491048662758],
           [119.71465965282046, 12.175247786214051],
           [119.66934104930483, 12.286643687700481],
           [119.80941673289858, 12.428839721923872],
           [120.14724632274233, 12.479796773623496],
           [120.31753440867983, 12.69960116106895],
           [120.55374046336733, 12.820145030517784]]],
         [[[120.74767549954765, 10.764619900813782],
           [120.80604036771172, 10.724143439241182],
           [120.77891787015312, 10.662406414047899],
           [120.80089052640312, 10.633726481863246],
           [120.87298830472344, 10.630352194837451],
           [120.94096620999687, 10.689734187658425],
           [120.92723329984062, 10.702891127511824],
           [120.91006716214531, 10.70693930185183],
           [120.89049776517265, 10.688047359236498],
           [120.87470491849297, 10.687709992427315],
           [120.85135897122734, 10.708963368743387],
           [120.86371859036797, 10.729877934378218],
           [120.92963655911797, 10.773726356258157],
           [120.8547921987664, 10.82599882065503],
           [120.82972963773125, 10.82802208784873],
           [120.75969179593437, 10.820603374681866],
           [120.72673281155937, 10.773726356258157]]],
         [[[121.06741281451463, 10.371873934699114],
           [121.18963571490525, 10.409695486098425],
           [121.18826242388963, 10.532583773629154],
           [121.2583002656865, 10.650024582572831],
           [121.4450678438115, 10.759325358656351],
           [121.6538080781865, 10.90769502171533],
           [121.659301242249, 10.983200301368369],
           [121.571410617249, 11.150321678069542],
           [121.44644113482713, 11.250009738137937],
           [121.33932443560838, 11.235193418007556],
           [121.28439279498338, 11.132805370871408],
           [121.24240358792656, 10.909615780598548],
           [121.22041836508934, 10.86039016388046],
           [121.12979372464531, 10.77608724420416],
           [120.99658449612969, 10.674889775975679],
           [120.93039251601704, 10.393738175368545]]],
         [[[117.44126732119923, 7.416551226601631],
           [117.49070579776173, 7.262640888911269],
           [117.54014427432423, 7.133206415290846],
           [117.54426414737112, 6.986015433174962],
           [117.62116844424612, 6.975110541911152],
           [117.64863426455862, 6.949210408176415],
           [117.66648704776175, 6.917855705806323],
           [117.702192614168, 6.897405864615875],
           [117.70493919619925, 6.846959153207566],
           [117.70356590518362, 6.822415578842928],
           [117.74751121768362, 6.780143143449165],
           [117.78184349307425, 6.754232397037983],
           [117.78870994815237, 6.740594604320015],
           [117.80244285830862, 6.726956427927094],
           [117.80381614932423, 6.716324108181767],
           [117.83952171573048, 6.620844121150876],
           [117.97273094424611, 6.566275818189768],
           [118.10868675479298, 6.579918456732122],
           [118.31330711612111, 6.66585843249497],
           [118.46986229190236, 6.776330528044278],
           [118.43003685244925, 6.90450096447028],
           [118.33115989932423, 6.957667908687715],
           [118.44237300197278, 7.485290253348655],
           [118.42452021876966, 7.569700526390449],
           [118.39842768947278, 7.7044503428948286],
           [118.35722895900403, 7.817389412874715],
           [118.37508174220716, 7.879969018010716],
           [118.48631831447278, 8.29873302089325],
           [118.56047602931653, 8.730625099586966],
           [118.23637934962903, 8.833771552953321],
           [118.03038569728528, 8.765915270518828],
           [117.97820063869153, 8.703476541930689],
           [117.90404292384778, 8.71026386620734],
           [117.83812495509778, 8.662750014706342],
           [117.77220698634778, 8.589431163437448],
           [117.78593989650403, 8.513381829090852],
           [117.56346675197278, 8.306886403801894],
           [117.48106929103528, 8.209034674617195],
           [117.35197993556653, 8.021418362786171],
           [117.29475062326128, 7.9502025819910624],
           [117.38538783029253, 7.786959313668946],
           [117.43207972482378, 7.648152456975649],
           [117.44031947091753, 7.509300428788079]]],
         [[[123.05704364291432, 7.587239270501072],
           [123.06768664828542, 7.609019003578861],
           [123.06562671176198, 7.617526411603417],
           [123.0831361722112, 7.616845825175894],
           [123.08691272250417, 7.606636899083615],
           [123.0996156643987, 7.612081689917608],
           [123.12364825717214, 7.609699602433356],
           [123.13188800326589, 7.605956295369768],
           [123.13532123080495, 7.595406799810969],
           [123.14424762240651, 7.582134485916597],
           [123.16313037387135, 7.586218318429393],
           [123.1765199612737, 7.581453843396902],
           [123.18510303012135, 7.597108348881506],
           [123.1713701199651, 7.604935387774837],
           [123.16244372836354, 7.618206996949765],
           [123.15866717807057, 7.631137912977714],
           [123.1493974637151, 7.6372629472992015],
           [123.13875445834401, 7.63828377781868],
           [123.12948474398854, 7.649512752478462],
           [123.12227496615651, 7.666185533106127],
           [123.10888537875417, 7.665505024221698],
           [123.09515246859792, 7.688641715396135],
           [123.0834794949651, 7.6600609139918285],
           [123.06871661654714, 7.642707348546529],
           [123.05292376986745, 7.610720498689863]]],
         [[[123.76779301411864, 13.189314535077846],
           [123.7653897548413, 13.170260607891635],
           [123.76916630513426, 13.157557165840029],
           [123.77877934224364, 13.1435157533185],
           [123.78907902486083, 13.128804840236214],
           [123.79216892964598, 13.115430518352051],
           [123.79251225239989, 13.109411836142826],
           [123.78907902486083, 13.10272423878052],
           [123.79422886616942, 13.10205546904988],
           [123.7931988979077, 13.098042812515763],
           [123.78667576558348, 13.09135490633039],
           [123.78083927876708, 13.083997999846144],
           [123.7767194057202, 13.076640873808087],
           [123.79388554341551, 13.067945805586147],
           [123.8038419032788, 13.069617957884297],
           [123.81208164937254, 13.079316217763068],
           [123.82306797749754, 13.081991532695785],
           [123.82718785054442, 13.10205546904988],
           [123.82718785054442, 13.1090774605912],
           [123.83474095113036, 13.121114694074206],
           [123.84744389302489, 13.125126974272051],
           [123.84916050679442, 13.15287678433469],
           [123.8649533534741, 13.154548359416003],
           [123.88589604146239, 13.153545415734825],
           [123.87216313130614, 13.17986656295039],
           [123.81997807271239, 13.189226204787545],
           [123.80830509907958, 13.178863722940934],
           [123.80315525777098, 13.166160727166428],
           [123.80212528950926, 13.15880606001598],
           [123.79972203023192, 13.154125702356405],
           [123.79457218892333, 13.15613158086768],
           [123.79731877095458, 13.17786087882136],
           [123.8041852260327, 13.18722059740573],
           [123.80899174458739, 13.196914213984135],
           [123.80178196675536, 13.213960675687648],
           [123.7767194057202, 13.213292209416633]]],
         [[[123.01286048143334, 11.031885509688378],
           [122.89475745408959, 10.99144531819459],
           [122.80137366502709, 10.975267688026637],
           [122.81785315721459, 10.91594214087999],
           [122.79313391893334, 10.824233919782316],
           [122.7663535346523, 10.817489557427994],
           [122.73442572801538, 10.78073011868399],
           [122.71828738013508, 10.776852038844392],
           [122.69837511574065, 10.772719893754825],
           [122.6546014562489, 10.772699000762332],
           [122.6399766240752, 10.766563870827033],
           [122.62054543320687, 10.769871551142383],
           [122.60180299259648, 10.760530474979687],
           [122.61131535313461, 10.740344418133152],
           [122.5992483784712, 10.725866306927136],
           [122.59836488918323, 10.70783243714224],
           [122.60640757665723, 10.706327976870057],
           [122.61149133656852, 10.721547442392007],
           [122.63360333624823, 10.733879700949343],
           [122.6394749887773, 10.73679386481999],
           [122.64122693545524, 10.747128807892132],
           [122.65228445673664, 10.756330012930187],
           [122.66576031571647, 10.756487973983406],
           [122.6970035478396, 10.740930434625946],
           [122.74094886033959, 10.70281226130498],
           [122.7471286699099, 10.619137895187405],
           [122.72034949510522, 10.602940204196482],
           [122.71090762221168, 10.580159727365944],
           [122.7079892658209, 10.568853746762901],
           [122.69837670790429, 10.557547604947672],
           [122.69597357957788, 10.536453215303922],
           [122.6879907682985, 10.520756297527743],
           [122.68502982274146, 10.503456359949094],
           [122.67153321819328, 10.48535418962674],
           [122.68138273842602, 10.473328594855545],
           [122.74026221483177, 10.522614014339263],
           [122.7581149980349, 10.50236040611746],
           [122.73820227830834, 10.437539952228938],
           [122.67709082811302, 10.405800006507144],
           [122.64207190721459, 10.375407670617102],
           [122.62501308152969, 10.334538499781598],
           [122.60441371629531, 10.319339244882915],
           [122.57752068803529, 10.321494760212284],
           [122.53494866655092, 10.343111109362372],
           [122.48551018998842, 10.389040905937133],
           [122.45529778764467, 10.405249812444724],
           [122.44843133256654, 10.460623882512547],
           [122.46765740678529, 10.521388927340906],
           [122.48001702592592, 10.583491937566622],
           [122.50318449956104, 10.5866967977442],
           [122.52616078310584, 10.61628677145809],
           [122.56150271827984, 10.64992339739634],
           [122.55459571139389, 10.659160091780896],
           [122.56413110063296, 10.682358247376452],
           [122.505422909715, 10.668525641908584],
           [122.41959222123842, 10.656379420789095],
           [122.27676995561342, 10.618588081134618],
           [122.20535882280092, 10.567292361750598],
           [122.12021477983217, 10.510587125406728],
           [122.06116326616029, 10.413353950032997],
           [121.95679314897279, 10.36607684951638],
           [121.88675530717592, 10.249880010885862],
           [122.04743035600404, 9.772490964134391],
           [122.33307488725404, 9.834739865712747],
           [122.36054070756654, 9.910505309138854],
           [122.45421464268912, 9.988958210301561],
           [122.54210526768912, 10.007892288912794],
           [122.6615815860485, 10.0024826647425],
           [122.71239335362662, 10.041700396101119],
           [122.74655154885816, 10.062998054820861],
           [122.77316148106803, 10.09308195050153],
           [122.81504685704459, 10.07347679646668],
           [122.86517140910018, 10.095109897984354],
           [122.87169494647324, 10.119444597325137],
           [122.8483491641735, 10.158311180926813],
           [122.84354264561881, 10.171152676920764],
           [122.83804883762645, 10.197170352165616],
           [122.81951005284537, 10.253934109228958],
           [122.8576153545792, 10.346652005448377],
           [122.85590226475944, 10.37587055028883],
           [122.83736459773961, 10.41531818326754],
           [122.81848008458365, 10.440920695437363],
           [122.81985410934094, 10.46809835694791],
           [122.80783707921256, 10.505402874791407],
           [122.78998429600944, 10.527681551164221],
           [122.82397324864615, 10.556708925717224],
           [122.8541856509899, 10.559071498486613],
           [122.8671434650628, 10.561939303711192],
           [122.87877261801569, 10.58058518572147],
           [122.8924629397294, 10.591805838149758],
           [122.90611132065723, 10.61627161935776],
           [122.91701371495475, 10.639050721621228],
           [122.92662675206412, 10.680550671136766],
           [122.93109005739552, 10.695053600508395],
           [122.94224838793907, 10.695558795622512],
           [122.93993187949417, 10.734267898897164],
           [122.95718247716178, 10.778036340020224],
           [122.94447953526725, 10.807039834484764],
           [122.94551048430515, 10.826091253229482],
           [122.93967301671256, 10.858632142548528],
           [122.94859962860319, 10.866723003891947],
           [122.95546650990981, 10.87919768940355],
           [122.94688370699934, 10.894875271318782],
           [122.95992905919303, 10.9017874916275],
           [122.98275860802264, 10.920666047545064],
           [123.0021577579235, 10.941565784475044],
           [123.0570893985485, 10.97257566622338],
           [123.12026078526725, 10.996842000201237],
           [123.260336468861, 11.039977215992103],
           [123.24111039464225, 11.069629003489293],
           [123.14155333066053, 11.076379758372646],
           [123.06395585362662, 11.112753515377237]]],
         [[[124.8564681097281, 11.722059486057221],
           [124.88290396177888, 11.713319119072427],
           [124.89251699888825, 11.699871860887425],
           [124.90247335875154, 11.707604114252549],
           [124.91208639586091, 11.698863290165992],
           [124.91105642759919, 11.687768769662087],
           [124.90178671324372, 11.67230293902824],
           [124.89560690367341, 11.644395019795542],
           [124.88771048033357, 11.62556399713061],
           [124.89869680845858, 11.60639539850672],
           [124.90624990904452, 11.60320050395021],
           [124.92066946470858, 11.602191582279506],
           [124.92581930601716, 11.591934004962065],
           [124.94538870298982, 11.589243430503991],
           [124.94882193052888, 11.600341883076558],
           [124.96495809996247, 11.608749507925072],
           [124.97869101011872, 11.623882593868675],
           [124.97834823536763, 11.643217620327077],
           [124.96221151793122, 11.660871118512489],
           [124.96598806822419, 11.676337586735348],
           [124.97972097838044, 11.69146699256423],
           [125.00306692564607, 11.708612653100447],
           [125.01302328550935, 11.727774191828791],
           [125.02194967711091, 11.737858678039933],
           [125.03156271422029, 11.748278926360676],
           [125.02641287291169, 11.756009823685371],
           [125.01199331724763, 11.769118240347499],
           [124.98349752867341, 11.76777381610059],
           [124.96942068532763, 11.764749342368614],
           [124.94504538023592, 11.750295703105202],
           [124.93440200095525, 11.735842189092782],
           [124.9158629461539, 11.732144181112844],
           [124.89389028990388, 11.727101879643078],
           [124.8784407659781, 11.730127271581255],
           [124.86436453306794, 11.736850246009132]]],
         [[[124.86478037914179, 11.738963026200764],
           [124.85173411449335, 11.760475277616244],
           [124.82804484447382, 11.77526397528249],
           [124.81637187084101, 11.792404424617263],
           [124.78547282298945, 11.784674550487326],
           [124.77276988109492, 11.770222463148524],
           [124.7581711174746, 11.748632716369276],
           [124.76435092704492, 11.73451488402769],
           [124.78220371024804, 11.730481084882213],
           [124.7852936150332, 11.72207714728345],
           [124.7798004509707, 11.713672953910075],
           [124.78701022880273, 11.70157046645619],
           [124.78769687431054, 11.69182085535599],
           [124.78907016532617, 11.679381197938138],
           [124.79456332938867, 11.666940982197689],
           [124.80074313895898, 11.66122502035724],
           [124.8131027580996, 11.655508940826204],
           [124.81013502222709, 11.642357370533496],
           [124.80206693751029, 11.637313434623305],
           [124.79880537134818, 11.631596863373975],
           [124.79932035547904, 11.615455322735244],
           [124.80687345606498, 11.612260531964825],
           [124.81425489527396, 11.609402003929606],
           [124.82112135035209, 11.609906452182665],
           [124.82592786890677, 11.60973830286637],
           [124.83227933985404, 11.60704790001823],
           [124.83760084253959, 11.606879748978596],
           [124.84275068384818, 11.606711597837592],
           [124.85356535059623, 11.59998546909797],
           [124.84721387964896, 11.584682922536723],
           [124.84172071558646, 11.576610912031876],
           [124.8492738161724, 11.567193272019713],
           [124.86506666285209, 11.555084412193189],
           [124.87055982691459, 11.560466192299497],
           [124.87536634546927, 11.575265554294829],
           [124.8767396364849, 11.592082060720637],
           [124.8822328005474, 11.609570153448681],
           [124.89253248316459, 11.616968631899397],
           [124.88017286402396, 11.619658939012956],
           [124.86712659937552, 11.616968631899397],
           [124.8547669802349, 11.616968631899397],
           [124.8492738161724, 11.624366913955404],
           [124.83966077906302, 11.623694350977992],
           [124.8273011599224, 11.62907480931825],
           [124.82524122339896, 11.638490361183456],
           [124.83073438746146, 11.641852981058804],
           [124.82867445093802, 11.65194059668351],
           [124.82798780543021, 11.665390181099209],
           [124.81974805933646, 11.67480450241501],
           [124.81288160425834, 11.68825297835892],
           [124.8218079958599, 11.69833890682455],
           [124.81974805933646, 11.707752108397846],
           [124.82524122339896, 11.715147970538405],
           [124.83622755152396, 11.705735020745362],
           [124.8382874880474, 11.696994137595714],
           [124.84652723414115, 11.694304579534933],
           [124.8602601442974, 11.699011288988268],
           [124.86643995386771, 11.707752108397846],
           [124.8657533083599, 11.715820311827592],
           [124.85270704371146, 11.72052665503525],
           [124.85957349878959, 11.73330061080478]]],
         [[[124.8189701232094, 11.789984900775265],
           [124.83047143546526, 11.775701141431894],
           [124.83459130851213, 11.778557952717978],
           [124.85004083243791, 11.776541383128297],
           [124.85398904410783, 11.773516500999806],
           [124.85072747794572, 11.770659637315148],
           [124.83338967887346, 11.772676250056598],
           [124.8522724303383, 11.76074440958945],
           [124.85931054679338, 11.75166914227419],
           [124.860683837809, 11.755870692108989],
           [124.86411706534807, 11.75738323435467],
           [124.87115518180315, 11.752509457369518],
           [124.87699166861955, 11.748475921531236],
           [124.87956658927385, 11.741417091723049],
           [124.8793949278969, 11.73116465988443],
           [124.8958744200844, 11.728811588977816],
           [124.8987926634926, 11.735030375664588],
           [124.89347116080705, 11.74696333036556],
           [124.88128320304338, 11.75133301551818],
           [124.88008157340471, 11.766962475544098],
           [124.8764766844887, 11.773852600657962],
           [124.87544671622697, 11.77956623196314],
           [124.87252847281877, 11.78124668914892],
           [124.86720697013322, 11.7799023242226],
           [124.86188546744768, 11.784271486177614],
           [124.85931054679338, 11.7856158297196],
           [124.85656396476213, 11.789480780740435],
           [124.85604898063127, 11.793513715094061],
           [124.86257211295549, 11.792001371656038],
           [124.86240045157854, 11.79620230507037],
           [124.85931054679338, 11.801579405974792],
           [124.85347405997697, 11.802755632744594],
           [124.8545040282387, 11.805948222826734],
           [124.85416070548479, 11.810148942599023],
           [124.8464359435219, 11.811997238899234],
           [124.84317437735979, 11.811325132596307],
           [124.84248773185197, 11.806956401443902],
           [124.84231607047502, 11.801579405974792],
           [124.83939782706682, 11.796538376964955],
           [124.83562127677385, 11.792673525324076],
           [124.83218804923479, 11.793177639494765],
           [124.81725350943987, 11.79233744869583]]],
         [[[123.36426905224347, 11.562160989073767],
           [123.35499873226397, 11.547697611101507],
           [123.3381765229466, 11.542315282911256],
           [123.2835882050755, 11.540969760464325],
           [123.24968360595923, 11.561319172546485],
           [123.22998604528328, 11.534827946953376],
           [123.25148701258338, 11.498244964523385],
           [123.2722585541966, 11.489835132867933],
           [123.28667810986066, 11.469647855258776],
           [123.28736475536847, 11.445421217223561],
           [123.27843836376691, 11.419173352189881],
           [123.26401880810285, 11.410423523813778],
           [123.24753931591535, 11.392249941834963],
           [123.24616602489972, 11.378114130470795],
           [123.2667653901341, 11.378787280266996],
           [123.29560450146222, 11.388884336167244],
           [123.30178431103253, 11.382826145617353],
           [123.2997243745091, 11.371382544989979],
           [123.28461817333722, 11.351186834528315],
           [123.27843836376691, 11.332336215299579],
           [123.28187159130597, 11.308771193531177],
           [123.2942312104466, 11.299344641870485],
           [123.3107107026341, 11.29732462618874],
           [123.32513025829816, 11.302037973977276],
           [123.33062342236066, 11.29732462618874],
           [123.32444361279035, 11.283184118186963],
           [123.31963709423566, 11.247493074994171],
           [123.27157190868878, 11.266349272269515],
           [123.24341944286847, 11.249513440912288],
           [123.21801355907941, 11.217859415066517],
           [123.22076014111066, 11.188896310166601],
           [123.23105982372785, 11.1558883114781],
           [123.2667653901341, 11.11546524710858],
           [123.30109766552472, 11.109401303635629],
           [123.33886316845441, 11.135677481002027],
           [123.34229639599347, 11.165993199679205],
           [123.3326833588841, 11.19159067477318],
           [123.33131006786847, 11.207756335773903],
           [123.34160975048566, 11.211797609868889],
           [123.34847620556378, 11.205735677544666],
           [123.34641626904035, 11.180813065993112],
           [123.38898829052472, 11.122202814192407],
           [123.4205739838841, 11.122202814192407],
           [123.44460657665753, 11.132982597516461],
           [123.45559290478253, 11.148477836742044],
           [123.4480398041966, 11.17475048492903],
           [123.43293360302472, 11.182160289013042],
           [123.40340784618878, 11.18350750577084],
           [123.3931081635716, 11.19091708597149],
           [123.39448145458722, 11.211124068109523],
           [123.40546778271222, 11.2272886369811],
           [123.39242151806378, 11.233350117003512],
           [123.38830164501691, 11.250186893069511],
           [123.37525538036847, 11.259615057901225],
           [123.36907557079816, 11.271063128518751],
           [123.38280848095441, 11.28183736681062],
           [123.39516810009503, 11.291264493789328],
           [123.41164759228253, 11.304731280781073],
           [123.43499353954816, 11.315504254852124],
           [123.46134349190446, 11.296652543097233],
           [123.46816676179532, 11.301366078180926],
           [123.47155714011629, 11.315506088451988],
           [123.49988154003644, 11.321900516462467],
           [123.48357510613883, 11.341089076241788],
           [123.45078638622785, 11.351860047915688],
           [123.44597986767316, 11.36868986625512],
           [123.43362024853253, 11.379460428471587],
           [123.41645411083722, 11.366670340505827],
           [123.39791468212628, 11.346474296359043],
           [123.3876149995091, 11.322237157850864],
           [123.36838892529035, 11.32089058992117],
           [123.36976221630597, 11.344454613331955],
           [123.39173487255597, 11.370709377691984],
           [123.40752727750969, 11.376094645264017],
           [123.42023066113019, 11.381816434652476],
           [123.44065836498761, 11.380806720105607],
           [123.45327540027199, 11.385182555689655],
           [123.45786740887979, 11.379965663477337],
           [123.45346874152152, 11.371466683349553],
           [123.45195604959568, 11.360485427147008],
           [123.46554926464582, 11.357582297582264],
           [123.48837820868792, 11.36784707257273],
           [123.50091150829816, 11.422538598943799],
           [123.50434473583722, 11.441383242451582],
           [123.47893885204816, 11.448113168397514],
           [123.4403150422337, 11.445084721526236],
           [123.41576746532941, 11.456861832796685],
           [123.41096102403668, 11.462077251178957],
           [123.41387924542518, 11.467376695427928],
           [123.40649775097394, 11.466283168607827],
           [123.38881642492596, 11.46090018750517],
           [123.36838892529035, 11.460226631642742],
           [123.35671595165753, 11.47637710827711],
           [123.38074854443097, 11.489835132867933],
           [123.38830195465538, 11.464432862875242],
           [123.41405085155988, 11.469479621878323],
           [123.42349216208478, 11.46939562768604],
           [123.43070200512433, 11.463759627316719],
           [123.43160328096101, 11.453055495817871],
           [123.44228919410575, 11.447734909584184],
           [123.44679519612295, 11.454191267517187],
           [123.44924145760545, 11.46367594187855],
           [123.46726587841535, 11.465610226467714],
           [123.49679163525128, 11.459553675077949],
           [123.51464441845441, 11.455515902044036],
           [123.54485682079816, 11.454842934265024],
           [123.5798757416966, 11.443402237038285],
           [123.60253504345441, 11.447440183004973],
           [123.62176111767316, 11.466956109144752],
           [123.79376581738019, 11.560142845859607],
           [123.74586874776969, 11.592947477920417],
           [123.67394617626691, 11.59478561801206],
           [123.63506401167704, 11.589786141192898],
           [123.61386370403518, 11.590501171838996],
           [123.61255559500046, 11.596228496011715],
           [123.6293250292225, 11.601782774891108],
           [123.63135848919866, 11.620197972121634],
           [123.60317873464436, 11.619107645366652],
           [123.58064757257573, 11.61307453469387],
           [123.58124903271222, 11.582846118112315],
           [123.53936181234893, 11.546016471763028],
           [123.52425604426186, 11.527850463855128],
           [123.52563074657941, 11.505983914186556],
           [123.50434473583722, 11.493872414985965],
           [123.49953821728253, 11.497236772563802],
           [123.51696287743876, 11.528859164180881],
           [123.48597784448653, 11.546352592104016],
           [123.45593657234485, 11.515403841945442],
           [123.44941309521222, 11.51674925377487],
           [123.44460657665753, 11.532693688103548],
           [123.4631457188678, 11.539421380778979],
           [123.46108606884503, 11.552203707421928],
           [123.48511866161847, 11.574403112086637],
           [123.5247704074473, 11.576591392835345],
           [123.56099299023175, 11.604335883197779],
           [123.53936365673566, 11.657130804019237],
           [123.52219751904035, 11.679994282139692],
           [123.50709131786847, 11.695459683456411],
           [123.44494989941144, 11.734791699062074],
           [123.41816983560352, 11.734118927378342],
           [123.40924387348085, 11.705544568476503],
           [123.42778311171787, 11.69848540569219],
           [123.4535329682591, 11.671925034440372],
           [123.4425466401341, 11.65982072274571],
           [123.42881372997785, 11.658475766639617],
           [123.41714072057364, 11.683105002913845],
           [123.38486758734564, 11.668058373027467],
           [123.39928797314191, 11.627203702237058],
           [123.43087366650128, 11.612070796642978],
           [123.43293360302472, 11.595255493808041],
           [123.41439417431378, 11.579784520799878],
           [123.39173487255597, 11.592564951345027],
           [123.37731531689191, 11.598618635430968],
           [123.36426905224347, 11.586511136049156],
           [123.3656423432591, 11.576421152487637]]],
         [[[123.43617372857538, 11.24182972704412],
           [123.43703203546015, 11.234926567657105],
           [123.4415810619494, 11.231306552182179],
           [123.446730903258, 11.229538621140504],
           [123.45488481866327, 11.227939055151017],
           [123.45848970757929, 11.223140303998282],
           [123.46003465997187, 11.217583755663393],
           [123.46338205682245, 11.211690330038442],
           [123.4675877605578, 11.206301950026704],
           [123.47754412042109, 11.205291617595881],
           [123.4785740886828, 11.211942907887321],
           [123.48363809930292, 11.218341473094286],
           [123.48526888238398, 11.22861255770082],
           [123.4756558452746, 11.235768425210273],
           [123.47136431085077, 11.242587380813397],
           [123.47539835320917, 11.25083725958792],
           [123.48011904107538, 11.252773421396675],
           [123.48784380303827, 11.251847432590386],
           [123.48930292474238, 11.254036128606662],
           [123.49204950677363, 11.256814064976325],
           [123.49634104119745, 11.257066603317105],
           [123.4958260570666, 11.252436698538876],
           [123.49453859673945, 11.249069448308568],
           [123.48981790887323, 11.248311811581997],
           [123.48011904107538, 11.249911264556609],
           [123.47634249078241, 11.248648539262026],
           [123.47445421563593, 11.246038889447913],
           [123.47694330560175, 11.240482782092911],
           [123.48183565484491, 11.235684239565519],
           [123.48990373956171, 11.230548868776353],
           [123.49393778192011, 11.22743392720729],
           [123.49496775018183, 11.223056114669632],
           [123.49402361260859, 11.218594045129594],
           [123.49668436395136, 11.218173091614725],
           [123.50114755975214, 11.221793271794358],
           [123.50337915765253, 11.227181362903936],
           [123.50561075555292, 11.231980046872616],
           [123.50775652276484, 11.232821913024807],
           [123.51273470269648, 11.234084707646858],
           [123.52045946465937, 11.236357724035422],
           [123.52045946465937, 11.23980930725734],
           [123.51900034295527, 11.243513399382415],
           [123.52372103082148, 11.2528576020496],
           [123.52595262872187, 11.253699407225406],
           [123.53196077691523, 11.255130470376232],
           [123.53384905206171, 11.253025963281633],
           [123.53153162347284, 11.24797508350841],
           [123.52784090386835, 11.243850132669861],
           [123.52260523187128, 11.236694465680602],
           [123.51874285088984, 11.23383214916467],
           [123.50998812066523, 11.230885617202363],
           [123.50535326348749, 11.228191618791376],
           [123.50355081902948, 11.222045840811218],
           [123.50543909417597, 11.219435950319047],
           [123.51050310479609, 11.222130030434423],
           [123.51359300958124, 11.220614613461748],
           [123.51977281915156, 11.221961651163479],
           [123.52586679803339, 11.222214220033065],
           [123.52286272393671, 11.217078609605391],
           [123.5184853588244, 11.210174858310545],
           [123.50801401483027, 11.208827765660839],
           [123.4935944591662, 11.200913469615948],
           [123.48492555963007, 11.191735982940063],
           [123.48887377129999, 11.179863756799957],
           [123.48913126336542, 11.165128048185878],
           [123.50252085076777, 11.138601888231097],
           [123.55637957537242, 11.15826584617304],
           [123.55273180352656, 11.175822036941415],
           [123.55247431146113, 11.184831626926776],
           [123.55058603631464, 11.192409569836954],
           [123.54938440667597, 11.200155706508792],
           [123.5591691051623, 11.209332926140025],
           [123.57058458672968, 11.21430029049985],
           [123.58375954719381, 11.202681765867027],
           [123.5921280895373, 11.21699441850985],
           [123.56800966607538, 11.23357959046137],
           [123.56380396234003, 11.235347496740824],
           [123.5620873485705, 11.242755748047243],
           [123.56414728509394, 11.246207254665334],
           [123.57006960259882, 11.251426527603288],
           [123.57461862908808, 11.254709570187853],
           [123.58191423760859, 11.2579925753378],
           [123.58766489373652, 11.249321993441294],
           [123.58972483025995, 11.237788873311928],
           [123.59530382501093, 11.21876242636383],
           [123.5907185344237, 11.203608043668005],
           [123.59391870412526, 11.191147538661232],
           [123.57858278989589, 11.180580432513969],
           [123.59563415566136, 11.164266517786977],
           [123.61680435438117, 11.164792434494007],
           [123.62733014752602, 11.185758561611811],
           [123.63257610131963, 11.2002405052327],
           [123.63791859180927, 11.208322392465178],
           [123.6365503048049, 11.215247435717886],
           [123.64033247832542, 11.233116290286574],
           [123.62489386302781, 11.23383186351984],
           [123.61358576165644, 11.240314413531529],
           [123.60800676690546, 11.250332171758071],
           [123.60938005792109, 11.2579925753378],
           [123.6016552959582, 11.267588837192427],
           [123.59255724297968, 11.269188183044351],
           [123.58483248101679, 11.265147713217768],
           [123.57959680901972, 11.265821128797402],
           [123.57315950738398, 11.273060246686008],
           [123.56603556024042, 11.276174694809507],
           [123.55908327447382, 11.276848084560545],
           [123.55204515801874, 11.275922173246041],
           [123.5444920574328, 11.272386848059849],
           [123.54251795159784, 11.2694407105236],
           [123.53994303094355, 11.265821128797402],
           [123.53762560235468, 11.264137586892295],
           [123.53247576104609, 11.266410366136272],
           [123.53479318963495, 11.271376747162835],
           [123.53891306268183, 11.276174694809507],
           [123.54886942254511, 11.280720045001269],
           [123.56457643853632, 11.281982629513381],
           [123.56972627984491, 11.279541627782796],
           [123.57719354974238, 11.272639372729522],
           [123.58594827996698, 11.268935655343316],
           [123.59410219537226, 11.275501303480482],
           [123.60792093621698, 11.26716795522673],
           [123.61126832724459, 11.273039344918859],
           [123.61667559754538, 11.283287276765678],
           [123.60551767693964, 11.295029011025303],
           [123.59757840815429, 11.301930822327613],
           [123.58963899957148, 11.300079063973516],
           [123.58483248101679, 11.304371539050969],
           [123.58182840692011, 11.303698213877405],
           [123.57676439629999, 11.301509896140475],
           [123.5690396343371, 11.302688223151483],
           [123.56706552850214, 11.305044862642793],
           [123.56569223748652, 11.307738141190798],
           [123.56517725335566, 11.309589755508183],
           [123.56655054437128, 11.312367154545203],
           [123.57230120049921, 11.316743607459957],
           [123.57573442803827, 11.320615029274306],
           [123.57985430108515, 11.321877438109563],
           [123.58045511590448, 11.319184292529457],
           [123.57813768731562, 11.313292948239528],
           [123.58182840692011, 11.30992641137112],
           [123.5880940471789, 11.30815896367731],
           [123.59667711602656, 11.3067281647016],
           [123.60337190972773, 11.31001057527504],
           [123.60663347588984, 11.31548117598354],
           [123.60706262933222, 11.32414975997881],
           [123.60543184625116, 11.329451774151883],
           [123.60465937005488, 11.331808193345239],
           [123.60671930657831, 11.333659651944396],
           [123.61083917962519, 11.334922003205126],
           [123.6129849468371, 11.334417063369795],
           [123.61538820611445, 11.330545828335213],
           [123.61624651299921, 11.326842858824495],
           [123.6126416240832, 11.31750106367389],
           [123.60757761346308, 11.308916442595491],
           [123.6091444414392, 11.302792201266561],
           [123.61377929861693, 11.293533790527832],
           [123.6245081346765, 11.289325323226949],
           [123.628198854281, 11.283938395038973],
           [123.62845634634643, 11.278635538901565],
           [123.62261985953002, 11.263904869525092],
           [123.6123630750799, 11.255192333775545],
           [123.61618255789428, 11.248836718759982],
           [123.62004493887572, 11.243869948816986],
           [123.63085960562377, 11.242775564269603],
           [123.63970016653685, 11.242943931393516],
           [123.64485000784545, 11.245721974737737],
           [123.65205978567748, 11.255907904483681],
           [123.65678047354369, 11.261295357990823],
           [123.66218780691771, 11.263231449459502],
           [123.66467689688353, 11.267356122617533],
           [123.66622184927611, 11.27434267890697],
           [123.66836761648803, 11.278972231090648],
           [123.67180084402709, 11.28006647797992],
           [123.67334579641967, 11.284359252443432],
           [123.67557739432006, 11.294207139567922],
           [123.67712234671264, 11.299425541036397],
           [123.67901062185912, 11.309188746766331],
           [123.67222999746947, 11.310956188107072],
           [123.70304321463256, 11.334268559800117],
           [123.74581926846983, 11.324215067845401],
           [123.76274345188725, 11.268347823399989],
           [123.8144627446722, 11.215825144040014],
           [123.8437592494486, 11.246469033434787],
           [123.7940875350415, 11.328293265638134],
           [123.74780490287904, 11.366749411431757],
           [123.68064140494018, 11.408653432218241],
           [123.62802719290404, 11.348322392630507],
           [123.62004493887572, 11.356821680408933],
           [123.60965942557006, 11.36170234508005],
           [123.60210632498412, 11.361786493738437],
           [123.59386657889037, 11.360019366697426],
           [123.58708595450072, 11.355306974392285],
           [123.57970451529174, 11.344367192230294],
           [123.56245254690795, 11.359009574900428],
           [123.53430008108764, 11.355811877291437],
           [123.52741287698313, 11.35934620987272],
           [123.52670525377458, 11.372978328365058],
           [123.49885200674682, 11.373314625110549],
           [123.4919424798973, 11.358125735769821],
           [123.49189972098021, 11.347649170899674],
           [123.51344322378783, 11.311966149691402],
           [123.52554535086303, 11.293533790527832],
           [123.51773475821166, 11.29302877771068],
           [123.5033152025476, 11.286042675892752],
           [123.49353050406127, 11.281244893045246],
           [123.49069809134154, 11.278046326621231],
           [123.48657821829467, 11.282675819124801],
           [123.49095558340697, 11.286968554582549],
           [123.50031112845092, 11.293786296603065],
           [123.50194191153197, 11.29807886587607],
           [123.49910949881225, 11.302455537022597],
           [123.5021994035974, 11.315080175490126],
           [123.5003969591394, 11.32055067934435],
           [123.48820900137572, 11.30439135102579],
           [123.48151420767455, 11.297658028591593],
           [123.47679351980834, 11.29370212793601],
           [123.47078537161498, 11.291682072519388],
           [123.45314716513305, 11.29054578509812],
           [123.44739650900512, 11.280613599861486],
           [123.44859813864379, 11.27194369980378],
           [123.46070026571898, 11.26462037661753],
           [123.46610759909301, 11.262095049524506],
           [123.47211574728637, 11.260916555962302],
           [123.47597812826781, 11.25409803419518],
           [123.46619342978148, 11.241470715724775],
           [123.4573528688684, 11.243996223689658],
           [123.43958591635375, 11.24466968874286]]],
         [[[123.95307478407246, 11.209027140573518],
           [123.9661210487209, 11.220140459500355],
           [123.98054060438496, 11.230243105669574],
           [123.99118360975605, 11.253141127111697],
           [123.98946699598652, 11.2642527462764],
           [123.98672041395527, 11.277384106477983],
           [123.99118360975605, 11.28748474447074],
           [124.0052598426662, 11.289168149592621],
           [124.02414259413105, 11.286138013265388],
           [124.03409895399433, 11.28512796071559],
           [124.04817518690449, 11.285464645293668],
           [124.05538496473652, 11.288158107704197],
           [124.07358107069355, 11.289841508876922],
           [124.0814774940334, 11.278057493394664],
           [124.09658369520527, 11.285464645293668],
           [124.09624037245136, 11.329230274552035],
           [124.08594068983417, 11.34909092918406],
           [123.93728193739277, 11.343031892772228],
           [123.93693861463886, 11.22249777522536]]],
         [[[124.23172847774299, 11.440608758360684],
           [124.29112331416877, 11.447675195739622],
           [124.28563015010627, 11.515302153021265],
           [124.28460018184455, 11.553314154711972],
           [124.22520534541877, 11.541541076135184]]],
         [[[120.37832072150803, 5.286969518231859],
           [120.38244059455491, 5.285260205127787],
           [120.38656046760178, 5.279790371501444],
           [120.38793375861741, 5.2719274011332],
           [120.38896372687913, 5.264064331194408],
           [120.39205363166428, 5.258594310849734],
           [120.39514353644944, 5.253466123122981],
           [120.40200999152756, 5.2493635425528895],
           [120.41574290168381, 5.24902165962016],
           [120.42947581184006, 5.264406205868916],
           [120.42707255256272, 5.284576478565206],
           [120.41574290168381, 5.29961828843933],
           [120.41230967414475, 5.30713905608034],
           [120.41333964240647, 5.314659732019355],
           [120.43222239387131, 5.352945383060016],
           [120.43634226691819, 5.398406479072349],
           [120.45213511359788, 5.451724922750083],
           [120.44595530402756, 5.481116402013117],
           [120.44114878547288, 5.499570778004723],
           [120.43977549445725, 5.507772539309147],
           [120.44870188605881, 5.519733238235391],
           [120.4696445740471, 5.535452646940234],
           [120.47170451057053, 5.560397806711058],
           [120.45282175910569, 5.572699140373814],
           [120.41299631965256, 5.573724239888543],
           [120.37488749396897, 5.561081220887447],
           [120.36870768439866, 5.539211574100434],
           [120.40612986457444, 5.513582051747743],
           [120.42844584357834, 5.4797493884856605],
           [120.43187907111741, 5.463344982323951],
           [120.41265299689866, 5.461977928181181],
           [120.39239695441819, 5.478724126286693],
           [120.30862620246506, 5.503329932644783],
           [120.27395060432053, 5.469154927618051],
           [120.25747111213303, 5.4284841293173365],
           [120.2777271546135, 5.40558423601689],
           [120.33197214973069, 5.399773677426074],
           [120.3433018006096, 5.379948999863997],
           [120.34295847785569, 5.367643702509802],
           [120.35016825568772, 5.350894426653608],
           [120.37248423469163, 5.361832781297102],
           [120.37523081672288, 5.374821822846443],
           [120.36355784309006, 5.387810587357168],
           [120.36115458381272, 5.400799074167697],
           [120.36802103889084, 5.405242439995655],
           [120.39205363166428, 5.405926031845169],
           [120.40235331428147, 5.405926031845169],
           [120.40475657355881, 5.403191659817256],
           [120.40200999152756, 5.392254048339701],
           [120.39102366340256, 5.3755054489437875],
           [120.38229378626535, 5.369501250646674],
           [120.37474068567941, 5.319252201024408],
           [120.34006508753488, 5.3209614200015665],
           [120.33319863245676, 5.317884822424501],
           [120.35276802942941, 5.284383099765125],
           [120.36066445276926, 5.275494583038175],
           [120.36615761683176, 5.274810845705751],
           [120.37096413538644, 5.280622589010058],
           [120.3743973629255, 5.283699372234434]]]]),
    global_not_applied = /* color: #0b4a8b */ee.Geometry.MultiPoint(),
    RC_landDist_not_applied = /* color: #ffc82d */ee.FeatureCollection([]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

///////////////////////////////
// Global coral atlas project - Philippines
// Contact: mitchell.lyons@gmail.com
// Region coordinator: V1: Robert Canto (rfcanto@gmail.com); V2: Chris Roelfsema (chris.m.roelfsema@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICSgeo_depth_cutoff
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.philippines;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 200, //distance to land in meters to convert reef crest to TRF
  wave_height: 0.6, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1400, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 900, //depth in centimetres
  lagoon_region: "Philippines",
  
  //############
  // Clean-up stage selection
  cleanup_stage: 3, // set to 1, 2 or 3
  geo_refinement: true, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  // should the global extent + depth cleanup be applied?
  global_extent_clean: true,
  global_depth_thresh: 500, // this is the depth limit for ADDING to the global extent (i.e. 5 = everything <5m will be added to the global extent layer)
  global_land_dist: -1, // [-1 (don't apply) OR +ve distance in meters] WITHIN this distance, the global extent/depth mask will be applied
  global_not_applied: true, // true = EXCLUDE reefs within 'global_not_applied' geometry polygons - mutually exclusive to land distance rule
 
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset, // asset path
  local_epsg: region_params.epsg

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth');
  var distToLand = ee.Image(region_params.distToLand);
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);

  // the "GLOBAL MASK" clean
  // currently uses GCRMN extent + bathymetry threhold < vars.global_depth_thresh
  if (vars.global_extent_clean) {
    var blanket_mask = ee.Image([param_module.global_extent_mask.gcrmn]).unmask(0, false)
              .eq(1) // extent according to global extent layer
              .add(depth.lt(vars.global_depth_thresh)) // combine with areas less than depth thrshold
              .eq(0) // get leftovers
              .selfMask().connectedPixelCount(100, false).gte(100).unmask(0, false);
    
    blanket_mask = blanket_mask.where({
      test: blanket_mask.eq(0).connectedPixelCount(100,false).lt(100),
      value: ee.Image(1)
    });
    
    Map.addLayer(blanket_mask.selfMask(), {min:0,max:1}, "Global clean mask", false);
    
    if (vars.global_land_dist > 0) {
      man_geo = man_geo.where({
        test: blanket_mask.eq(1)
                          .and(distToLand.lte(vars.global_land_dist)),
        value: ee.Image(0)
      });
    } else if (vars.global_not_applied) {
      var global_not_applied_i = ee.Image().byte().paint(ee.Feature(global_not_applied, {zone: 1}), 'zone').unmask(0, false);
      man_geo = man_geo.where({
        test: blanket_mask.eq(1)
                          .and(global_not_applied_i.eq(0)),
        value: ee.Image(0)
      });
    } else {
      man_geo = man_geo.where({
        test: blanket_mask.eq(1),
        value: ee.Image(0)
      });
    }
  }
  
  // the "MID MASK" CLEAN
  //  - import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", false, 0.4);
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone");
  
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });
  
  
  // the "LAGOONS MASK" CLEAN
  // - import the global lagoon mask from asset
  
  // LAGOON clean stage 1 - clean inside the lagoon extent
  var lagoons_mask = ee.FeatureCollection(region_params.lagoons_mask).filterBounds(region_extent).geometry();
  var lagoons_mask_i = ee.Image().byte().paint(ee.Feature(lagoons_mask,{zone: 1}), "zone");
  Map.addLayer(lagoons_mask, {}, "lagoon mask", false);
  
  var ocean_lagoon_mask = ee.FeatureCollection(region_params.lagoons_mask)
                                    .filterBounds(region_extent).filter(ee.Filter.neq("LagoonType", "ClosedTerrestrial"))
                                    .geometry();
  var ocean_lagoon_mask_i = ee.Image().byte().paint(ee.Feature(ocean_lagoon_mask,{zone: 1}), "zone");
  Map.addLayer(ocean_lagoon_mask, {}, "ocean lagoon mask", false);
  
  // RC within Lagoon -> ORF
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(15)),
    value: ee.Image(14)
  });
  // Reef slope, sheltered slope (within lagoon mask) -> Back Reef Slope
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(21).or(man_geo.eq(22))),
    value: ee.Image(24)
  });
  /*// Plateau within lagoon mask -> Deep
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(23)),
    value: ee.Image(2)
  });*/
  // TRF within oceanic/closed lagoons -> ORF
  man_geo = man_geo.where({
    test: ocean_lagoon_mask_i.eq(1)
                             .and(man_geo.eq(16)),
    value: ee.Image(14)
  });
  

  // LAGOON clean stage 2 - buffer the lagoon mask, and clean inside buffer
  var lagoon_buffered = lagoons_mask.buffer(1000); // buffer 1000 m wide around reef mask
  var reef_band_mask = lagoon_buffered.difference(lagoons_mask);//substract buffered lagoon mask - lagoon mask resulting in band around reef of 1000 m
  var reef_band_mask_i = ee.Image().byte().paint(ee.Feature(reef_band_mask.dissolve(),{zone: 1}), "zone");

  // BRS, DL and SL should not be present on outside of reef on within reef_band_mask_i  -> Reef Slope
  man_geo = man_geo.where({
   test: reef_band_mask_i.eq(1)
                         .and(man_geo.eq(24).or(man_geo.eq(12)).or(man_geo.eq(11))),
    value: ee.Image(22)
  });    
  // IRF or TRF on within reef_band_mask_i  -> ORF as RC would get artefacts
  man_geo = man_geo.where({
    test: reef_band_mask_i.eq(1)
                          .and(man_geo.eq(13).or(man_geo.eq(16))),
    value: ee.Image(14)
  });   
  
  
  // The 'TURBID WATER' clean
  var turbid_mask = ee.FeatureCollection(region_params.turbid_mask).filterBounds(region_extent).geometry();
  var turbid_mask_i = ee.Image().byte().paint(ee.Feature(turbid_mask,{zone: 1}), "zone");
  Map.addLayer(turbid_mask, {}, "turbid mask", false);
  
  // leave only TRF within turbid mask (after changing IRF, ORF to TRF)
  man_geo = man_geo.where({
    test: turbid_mask_i.eq(1)
                       .and((man_geo.eq(13)).or(man_geo.eq(14))),
    value: ee.Image(16)
  });
  
  man_geo = man_geo.where({
    test: turbid_mask_i.eq(1)
                       .and(man_geo.neq(16)),
    value: ee.Image(2)
  });
  
  
  // The 'HARBOUR & SHIPPING' clean
  var harbour_mask = ee.FeatureCollection(region_params.harbour_mask).filterBounds(region_extent).geometry();
  var harbour_mask_i = ee.Image().byte().paint(ee.Feature(harbour_mask,{zone: 1}), "zone");
  Map.addLayer(harbour_mask, {}, "harbour mask", false);
  
  // remove mapping within harbour mask
  man_geo = man_geo.where({
    test: harbour_mask_i.eq(1)
                        .and(man_geo.gt(2)),
    value: ee.Image(2)
  });
  
  /*// BRS and DL should not be present on outside of a reef -> Reef Slope RULE CHRIS
   man_geo = man_geo.where({
    test: lagoons_mask_i.neq(1) //Requires a mask that reprsent all areas excepth the lagoon mask
                        .and(man_geo.eq(12)),
    value: ee.Image(22)
  }); */
  
 /* // the 'WAVE' clean (un-comment this sectio nbased on whether you have waves or not)
  var waves = ee.Image(region_params.waves);
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false);
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  });*/
  
  
  /*// the "DISTANCE TO DEEP WATER" CLEAN
  // use a distance to deepwater to cut out RC/slope
  var dist_to_deep = man_geo.eq(2).fastDistanceTransform(256).sqrt()
                                  .multiply(ee.Image.pixelArea().sqrt())
                                  .uint16()
                                  .selfMask();
  Map.addLayer(dist_to_deep, {}, "distance to deepwater", false);
  
  // reef crest too far from deep water -> ORF
  man_geo = man_geo.where({
    test: man_geo.eq(15)
                 .and(dist_to_deep.gte(300)),
    value: ee.Image(14)
  });
  // reef slope too far from deep wter -> BRS
  man_geo = man_geo.where({
    test: man_geo.eq(21).or(man_geo.eq(22))
                 .and(dist_to_deep.gte(1500)),
    value: ee.Image(24)
  });*/
  
  
  /*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone");
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone");
  
  
  // Reef crest -> Inner reef flat (inside the reef)
  man_geo = man_geo.where({
    test: notreefcrest.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(13)
  });
  
  // Deep water -> Deep lagoon (inside the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(2)),
    value: ee.Image(12)
  });
  
  ##############
  */
  
  

  
  /*// attempt to gain back missing reef crest
  var reef_crest_smooth = man_geo.eq(15).selfMask().focalMode(10);
  Map.addLayer(reef_crest_smooth, {colour: 'red'}, "reef crest smooth", false);
  //var reef_crest_holes = man_geo.gt(2).unmask(0,false).connectedComponents(ee.Kernel.plus(1), 512);
  //Map.addLayer(reef_crest_holes, {}, "reef crest holes", false);
  
  man_geo = man_geo.unmask(0, false).where({
    test: reef_crest_smooth.eq(1)
                           //.and(reef_crest_holes.select('labels').gt(1))
                           .and(man_geo.unmask(0, false).eq(0)),
    value: ee.Image(15)
  }).selfMask();*/
  
  
  // mask to deep and anything removed to this point + re-do land
  man_geo = man_geo.where({
    test: distToLand.eq(0),
    value: ee.Image(0)
  });
  
  man_geo = man_geo.updateMask(man_geo.gt(2)).selfMask();
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone");
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.Image(region_params.pixels).select(['b1','b2','b3']);
  Map.addLayer(lowtide_image, region_params.visParams, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);

  // display distance to land mask for assessing cut-off distances
  Map.addLayer(distToLand, {}, 'Distance to land mask', false);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: vars.local_epsg,
    maxPixels: 1e13,
    shardSize: 256, // SWP specific cuase of size?
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth');
  var dove_b1 = ee.Image(region_params.pixels).select('b1');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // Deep (or land or missing) in geo == masked from benthic
  man_benthic = man_benthic.where({
    test: geo_map.unmask(0).lte(2),
    value: ee.Image(0)
  });
  
  
  /*
  ** Generic benthic rules **
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  /*// Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });*/
  // Rubble on Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(15)),
    value: ee.Image(13)
  });
  
  // Sand in benthic and reef crest in geo --> coral/aglae
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(15)),
    value: ee.Image(15)
  });
    
  // Seagrass on RC or ORF -> Coral/Algae
  /*// except for these two areas (use if there are exceptions, e.g. in Indonesia this can occur)
  var sg_orf = ee.Image().byte().paint(ee.Feature(sg_on_orf, {zone: 1}), "zone").unmask(geo_map.eq(42));*/
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
                     //.and(sg_orf.eq(0)),
    value: ee.Image(15)
  });  
  
  // Rubble on slope --> rock
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
    value: ee.Image(13)
  });  
  
  // Sand on slope --> rubble
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
    value: ee.Image(12)
  });  
  
  /*
  ** Manual polygon guided rules **
   - same as per geomorphic clean section (add a geometry, paint the layer, create a rule)
          - OR -
  ** Region-specific clean-up rules **
  */
  
  /*// Seagrass in turbid water & TRF --> rubble
  var turbid_mask = ee.FeatureCollection(region_params.turbid_mask).filterBounds(region_extent).geometry();
  var turbid_mask_i = ee.Image().byte().paint(ee.Feature(turbid_mask,{zone: 1}), "zone");
  Map.addLayer(turbid_mask, {}, "turbid mask", false);
  
  man_benthic = man_benthic.where({
    test: turbid_mask_i.eq(1)
                       .and(man_benthic.eq(14))
                       .and(geo_map.neq(16)),
    value: ee.Image(12)
  });*/
  
  /*// Rubble on Outer reef (and dark) -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14))
                     .and(dove_b1.lt(750)),
    value: ee.Image(13)
  });*/
  
  
  
  
  
  
  
  
  
  // Add the manual layer to the map
  var dove_image = ee.Image(region_params.pixels).select(['b1','b2','b3']);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: vars.local_epsg,
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.segments).select('depth');
  var image = ee.Image(region_params.pixels).select('b3','b2','b1');
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(image, {bands: ['b3','b2','b1'], min:200, max:1200}, 'Dove low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geomorphic map - stage 1 clean', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    if (!vars.manual_clean) Map.addLayer(geo_map, map_palettes.geo, 'Final geo map (manual clean - stage 3)', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
    // 3. Object-based re-classificaiton and cleaning
    
    /* OUTPUT EXTENT
      - to the mapping extent just so it doesn't balloon out
      - to the 'reef boundary' extent for noise/deep removal
    */  
    var class_extent_mask = geo_map.gt(0);
    
    /*
    
    ########
    Initial small object clean
     - this was originally at the end, but we needed to massively reduce the number of objects to 
       iterate through in the OBIA cleaning, so this happens first now
     - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
     
     - includes a possible special case for:
          - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
          - benthic to allow breaking waves (temporal class) to grow into surrounding class
    ########
    
    */
    
    // ##############################################################################################
    // START OF CLEAN 1
    // ##############################################################################################
    
    if (vars.geomorphic && !vars.obia_2nd_pass) {
      
      // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
      clean_map = geo_map.where({
        test: depth.gt(vars.geo_depth_cutoff),
        value: ee.Image(2)
      });
      
      // shallow lagoon > 5m == deep lagoon
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                      .and(depth.gt(vars.shallowlag_depth_cutoff)),
        value: ee.Image(12)
      });
      
      // the "LAND MASK" CLEAN
      var distToLand = ee.Image(region_params.distToLand);
      // display distance to land mask for assessing cut-off distances
      Map.addLayer(distToLand.unmask(8000, false).lte(vars.dist_to_land_RC).selfMask(), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
      Map.addLayer(distToLand.unmask(8000, false).gte(vars.dist_to_land_ORF).selfMask(), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
      // only apply RC distance rules to non-terrestrial lagoons
      var ocean_lagoon_mask = ee.FeatureCollection(region_params.lagoons_mask)
                                    .filter(ee.Filter.eq("MappingReg", vars.lagoon_region))
                                    .filter(ee.Filter.neq("LagoonType", "ClosedTerrestrial"))
                                    .geometry().buffer(1000);
      // add in manual areas for not applying land distance rules 
      var skip_rc_dist = ee.FeatureCollection(ocean_lagoon_mask).merge(RC_landDist_not_applied).geometry().dissolve();
      var skip_rc_dist_i = ee.Image().byte().paint(ee.Feature(skip_rc_dist,{zone: 1}), "zone").unmask(0, false);
      Map.addLayer(skip_rc_dist_i, {min:0,max:1}, "Skip RC landDist rule", false);
      
      
      // reef crest close to land -> TRF (check if needed or not)
      clean_map = clean_map.where({
        test: clean_map.eq(15)
                       .and(distToLand.unmask(8000, false).lte(vars.dist_to_land_RC))
                       .and(skip_rc_dist_i.eq(0)),
        value: ee.Image(16)
      });
      
      // TRF outside of specified distance from land -> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(16)
                       .and(distToLand.unmask(8000, false).gt(vars.dist_to_land_ORF)),
        value: ee.Image(14)
      });
      
      // mask out land areas
      clean_map = clean_map.updateMask(distToLand.unmask(8000, false));
      
      
      // the "DISTANCE TO DEEP WATER" CLEAN
      // use a distance to deepwater to cut out RC/slope
      var dist_to_deep = clean_map.eq(2).or(clean_map.eq(22))
                                  .fastDistanceTransform(50).sqrt()
                                  .multiply(ee.Image.pixelArea().sqrt())
                                  .uint8()
                                  //.selfMask();
      Map.addLayer(dist_to_deep, {}, "distance to deepwater", false);
  
      // reef crest too far from deep water -> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(15)
                       .and(dist_to_deep.gte(250)),
        value: ee.Image(14)
      });
      
    }
    
    if (!vars.geomorphic && vars.cleanup_stage == 1) {
      // BENTHIC CLEAN 1 rules (pre-manual)
      
      // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
      var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
      // replace small objects with smooth underneath
      var clean_map = benthic_map.where({
        test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
        value: smooth_map
      }).updateMask(class_extent_mask);
      
      // replace small missing 
      var clean_map = benthic_map.unmask(0, false).where({
        test: geo_map.gt(2),
        value: smooth_map
      }).selfMask();
      
      // Deep (or land or missing) in geo == masked from benthic
      clean_map = clean_map.where({
        test: geo_map.unmask(0).lte(2),
        value: ee.Image(0)
      });
        
      // cut benthic off to < 10 - 15 m
      clean_map = clean_map.where({
        test: depth.gt(vars.benthic_depth_cutoff),
        value: ee.Image(0)
      });
     
     
     
      // #####################
      // special case for SWP, remap separate coral (16) & algae (17) classes back to coral/algae (15)
      clean_map = clean_map.where({
        test: clean_map.eq(16), 
        value: ee.Image(15)
      });
      clean_map = clean_map.where({
        test: clean_map.eq(17), 
        value: ee.Image(15)
      });
    
    }
  
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      // get rid of patch reef
      geo_map = geo_map.where({
        test: geo_map.eq(25),
        value: smooth_map
      });
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }
  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: vars.local_epsg,
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend