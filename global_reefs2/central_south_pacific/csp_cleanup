/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    geometry = /* color: #d63000 */ee.Geometry.MultiPoint(),
    GCRMN_ext = ee.Image("projects/coral_atlas/global_datasets/GCRMN_reefextent_final"),
    DL_BRS_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                41.868436333202276,
                16.26200389772498
              ],
              [
                42.052457329296026,
                16.185524891774566
              ],
              [
                42.184293266796026,
                16.027198500068216
              ],
              [
                42.376554008983526,
                15.95855127095861
              ],
              [
                42.522875005168956,
                16.134823239824076
              ],
              [
                42.63609209349317,
                16.331853535978833
              ],
              [
                42.382047173046026,
                16.628160238499756
              ],
              [
                42.302396294139776,
                16.72550933158957
              ],
              [
                42.203519341014776,
                16.9148027809237
              ],
              [
                42.005765434764776,
                17.14327870422006
              ],
              [
                41.843717094921026,
                17.21675163667523
              ],
              [
                41.525113579296026,
                17.140654132537104
              ],
              [
                41.316373344921026,
                17.004125425756694
              ],
              [
                41.283414360546026,
                16.780739436693196
              ],
              [
                41.538846489452276,
                16.488628204047952
              ],
              [
                41.832730766796026,
                16.264640574626306
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                35.15200278567732,
                28.00115485094333
              ],
              [
                35.155092690462475,
                27.985239206456058
              ],
              [
                35.18839499759138,
                27.970079265351078
              ],
              [
                35.20281455325544,
                27.945363995294592
              ],
              [
                35.229765389437084,
                27.936264925296182
              ],
              [
                35.23611686038435,
                27.93762983465353
              ],
              [
                35.27336737918318,
                27.926558405968997
              ],
              [
                35.28332373904646,
                27.93944968697414
              ],
              [
                35.2663292627281,
                27.965076017233557
              ],
              [
                35.22169730472029,
                27.986906669884174
              ],
              [
                35.1923432092613,
                28.000700150858453
              ],
              [
                35.16968390750349,
                28.004943943696823
              ],
              [
                35.15577933597029,
                28.004034573588775
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    BRS_Deep_Mask = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[40.44841911611584, 15.511714038986296],
           [40.53356315908459, 15.470688597022786],
           [40.62969353017834, 15.466717961090994],
           [40.60360100088147, 15.56199216830302],
           [40.59261467275647, 15.646643337984687],
           [40.62420036611584, 15.69027792620937],
           [40.63244011220959, 15.711430732229724],
           [40.64205314931897, 15.733903181794108],
           [40.68462517080334, 15.745799355994619],
           [40.71071770010022, 15.777519081449206],
           [40.77800895986584, 15.818483049910105],
           [40.81508781728772, 15.880573881696861],
           [40.73543693838147, 15.979615335232616],
           [40.64891960439709, 16.065411634622592],
           [40.46627189931897, 16.148532756870985],
           [40.38112785635022, 16.178869875021284],
           [40.25066520986584, 16.139298797229056],
           [40.26714470205334, 16.062772299033117],
           [40.33580925283459, 16.000335093525187],
           [40.34679558095959, 15.947524529727035],
           [40.32756950674084, 15.86564067486166],
           [40.32894279775647, 15.810152053149167],
           [40.36602165517834, 15.774472755750384],
           [40.41683342275647, 15.748039598604317],
           [40.46077873525647, 15.674008478101946],
           [40.46352531728772, 15.652851792730923],
           [40.43056633291272, 15.590691378809197],
           [40.41958000478772, 15.541743339835675]]],
         [[[36.989143078260916, 21.604396687447046],
           [36.976440136366385, 21.604077483370617],
           [36.96828622096111, 21.591707783113783],
           [36.97781342738201, 21.569200198607245],
           [36.98982972376873, 21.555709935323396],
           [37.0130040096574, 21.556987173800437],
           [37.02459115260174, 21.570716776928787],
           [37.03574914210369, 21.584365267576658],
           [37.03892487757732, 21.593303932872857],
           [37.03017014735271, 21.60256125439041],
           [37.009656612806815, 21.602481452425003],
           [36.995151226454276, 21.605753296914987]]],
         [[[38.8203666065709, 21.987186346487956],
           [38.77367471203965, 21.778831739348323],
           [38.81006692395371, 21.723346790140702],
           [38.92954324231309, 21.70676092276774],
           [38.997521147586525, 21.770542247539225],
           [38.906883940555275, 21.92923444954882],
           [38.846459135867775, 22.0081960271092]]],
         [[[38.67450171557765, 23.032739423169286],
           [38.61819678393702, 22.981861305664996],
           [38.60000067797999, 22.931280211645756],
           [38.61819678393702, 22.861384003428462],
           [38.72565680590968, 22.823416237814378],
           [38.770975409425304, 22.824682000714766],
           [38.81286078540187, 22.865496541614043],
           [38.76067572680812, 23.024524380347962],
           [38.718790350831554, 23.04126989917521],
           [38.690294562257336, 23.042217696502526]]]]),
    DW_SL_BRS_to_RS = 
    /* color: #085fd6 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[43.42605742535747, 12.7643096358263],
           [43.56338652691997, 12.855369212580358],
           [43.37661894879497, 13.854797899792418],
           [43.10196074566997, 14.552399179261817],
           [42.89871367535747, 14.552399179261817],
           [42.83279570660747, 14.679968603229183],
           [42.99759062848247, 14.711849362605953],
           [42.99759062848247, 14.802152860051127],
           [42.78885039410747, 14.791530866409419],
           [42.76138457379497, 14.94549870775323],
           [42.99209746441997, 15.035704474100038],
           [42.87674101910747, 15.221301926784259],
           [42.71743926129497, 15.231902576073052],
           [42.60757598004497, 15.131174894386277],
           [42.71194609723247, 14.600246390575206],
           [42.98660430035747, 13.77478398468794],
           [43.29971465191997, 12.812521746298835]]],
         [[[41.58393348316916, 17.890771668956223],
           [42.18406165699729, 17.276795264717546],
           [42.42164100270041, 17.31613095284905],
           [42.35434974293479, 17.47207943305904],
           [41.67319739918479, 17.984842337594266],
           [41.56058753590354, 17.92474739897366]]],
         [[[39.25105248787724, 16.477690116578714],
           [39.28881786223642, 16.481969950600348],
           [39.29225106882125, 16.609004833417266],
           [39.14157298387291, 17.013519465259023],
           [39.083957371679496, 17.190476805089297],
           [38.984743931624855, 17.45789756495348],
           [38.87877927450557, 17.682214143055095],
           [38.68767912604894, 17.98287271462049],
           [38.61420832768302, 17.945315496913093],
           [38.621074756547685, 17.93616992147385],
           [38.63686754339835, 17.92016402723837],
           [38.64613722227912, 17.904810076410364],
           [38.65369029366213, 17.887167725958776],
           [38.655406900176786, 17.873771437079764],
           [38.661243364527216, 17.860700913160578],
           [38.67051304355094, 17.84436140694654],
           [38.67016972102993, 17.828020401058907],
           [38.69935204448547, 17.777680687684335],
           [38.728534369597156, 17.747273858195655],
           [38.73265422727748, 17.742696038506224],
           [38.731967584097305, 17.738772100096654],
           [38.79204884228343, 17.654386654735102],
           [38.8026918083719, 17.642935964619458],
           [38.81299145281576, 17.625267758072866],
           [38.79342212700608, 17.61905075579197],
           [38.861870097740784, 17.482962732212414],
           [38.97247477660111, 17.19752058022705],
           [39.023973009494206, 17.005886150506544],
           [39.04354233909103, 16.934957845986812],
           [39.08769045367005, 16.824243175289123],
           [39.12888904484413, 16.724643256002032],
           [39.13472551222631, 16.706558472677184],
           [39.15944466352502, 16.668081512716356],
           [39.15892958497869, 16.657555648223376],
           [39.160817747439474, 16.64670081436623],
           [39.16871435147226, 16.625649221106904],
           [39.170430722985394, 16.61051583306178],
           [39.16940099586178, 16.599000892763616],
           [39.17935706383188, 16.587484523130886],
           [39.18553711188764, 16.5624768132255],
           [39.18794036398665, 16.542072960184722],
           [39.18416339713707, 16.524135616365587],
           [39.16734106974252, 16.52594580625369],
           [39.170087642891026, 16.515742217899618],
           [39.16940100026994, 16.503892213118682],
           [39.167684393429326, 16.48019002532349]]]]),
    Terrestrial_RF = 
    /* color: #28b50a */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -151.77263350576987,
                -16.501302782614676
              ],
              [
                -151.77229018301597,
                -16.504594578746353
              ],
              [
                -151.77194686026206,
                -16.507557147354206
              ],
              [
                -151.76954360098472,
                -16.509202999187696
              ],
              [
                -151.76954360098472,
                -16.51249466081589
              ],
              [
                -151.77160353750816,
                -16.516280002383546
              ],
              [
                -151.7733201512777,
                -16.51924239188535
              ],
              [
                -151.7743501195394,
                -16.530104098034002
              ],
              [
                -151.768513632723,
                -16.53405365787449
              ],
              [
                -151.7601022252523,
                -16.533230839571985
              ],
              [
                -151.75855727285972,
                -16.530762363619193
              ],
              [
                -151.75666899771323,
                -16.5279647193814
              ],
              [
                -151.74928755850425,
                -16.530104098034002
              ],
              [
                -151.74774260611167,
                -16.53685121386375
              ],
              [
                -151.74216363240635,
                -16.536604374003687
              ],
              [
                -151.7384728917562,
                -16.540800635626752
              ],
              [
                -151.7380546241846,
                -16.54403496716677
              ],
              [
                -151.73359142838382,
                -16.54732603502437
              ],
              [
                -151.7325614601221,
                -16.54321219142777
              ],
              [
                -151.73393475113772,
                -16.538769141796564
              ],
              [
                -151.73238979874515,
                -16.534848798363804
              ],
              [
                -151.72878490982913,
                -16.534025983451123
              ],
              [
                -151.72620998917483,
                -16.532051213349135
              ],
              [
                -151.71968685685061,
                -16.531557517666865
              ],
              [
                -151.71670422582986,
                -16.530652404233944
              ],
              [
                -151.7164252906885,
                -16.52810161253898
              ],
              [
                -151.71236820456795,
                -16.49032185531778
              ],
              [
                -151.7125398659449,
                -16.486865212924993
              ],
              [
                -151.71597309348397,
                -16.482091652916164
              ],
              [
                -151.7180330300074,
                -16.47896408427693
              ],
              [
                -151.7209512734156,
                -16.47633030309331
              ],
              [
                -151.72438450095467,
                -16.474190329514432
              ],
              [
                -151.73468418357186,
                -16.46991031144964
              ],
              [
                -151.7429239296656,
                -16.462502364511224
              ],
              [
                -151.74790210959725,
                -16.461185366531392
              ],
              [
                -151.7619783425074,
                -16.466782546162488
              ],
              [
                -151.76575489280037,
                -16.473367256459408
              ],
              [
                -151.76798649070076,
                -16.489828053040938
              ],
              [
                -151.77141971823983,
                -16.49822252038524
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -151.472394253213,
                -16.68768648758751
              ],
              [
                -151.46003463407237,
                -16.68604216325602
              ],
              [
                -151.44973495145518,
                -16.677491448737015
              ],
              [
                -151.4449284329005,
                -16.662033417780393
              ],
              [
                -151.44389846463878,
                -16.652494860987293
              ],
              [
                -151.43600204129893,
                -16.64098217712291
              ],
              [
                -151.4291355862208,
                -16.61861270067788
              ],
              [
                -151.43634536405284,
                -16.604136944192074
              ],
              [
                -151.47445418973643,
                -16.57584027176738
              ],
              [
                -151.52389266629893,
                -16.57353687106421
              ],
              [
                -151.55273177762706,
                -16.606110975226915
              ],
              [
                -151.549298550088,
                -16.642297947426307
              ],
              [
                -151.50123336454112,
                -16.678478089158066
              ],
              [
                -151.4785740627833,
                -16.6873576238529
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -151.47906140765917,
                -16.72109082614189
              ],
              [
                -151.4866145082451,
                -16.730625959362722
              ],
              [
                -151.4921076723076,
                -16.738516743400204
              ],
              [
                -151.49313764056933,
                -16.746407200623135
              ],
              [
                -151.49416760883105,
                -16.75495482698896
              ],
              [
                -151.4965708681084,
                -16.76777554669752
              ],
              [
                -151.4965708681084,
                -16.775993502193955
              ],
              [
                -151.4962275453545,
                -16.783553707437715
              ],
              [
                -151.49485425433886,
                -16.78979886745838
              ],
              [
                -151.4957684545321,
                -16.792948609418907
              ],
              [
                -151.49533930108973,
                -16.794592011186776
              ],
              [
                -151.49336519525477,
                -16.79656407452897
              ],
              [
                -151.49233522699305,
                -16.798700453362294
              ],
              [
                -151.49224939630457,
                -16.800754641100426
              ],
              [
                -151.4918202428622,
                -16.80165847666089
              ],
              [
                -151.49259271905848,
                -16.804452122991993
              ],
              [
                -151.49190607355067,
                -16.807081399608332
              ],
              [
                -151.4903611211581,
                -16.809710639780658
              ],
              [
                -151.48770036981531,
                -16.81464036685813
              ],
              [
                -151.48641290948817,
                -16.820309394539525
              ],
              [
                -151.4855546026034,
                -16.83037256152865
              ],
              [
                -151.48426714227625,
                -16.831933485454822
              ],
              [
                -151.48572626398035,
                -16.837109088523984
              ],
              [
                -151.48675623224207,
                -16.839327160817437
              ],
              [
                -151.48495378778406,
                -16.846720547414023
              ],
              [
                -151.48640307688893,
                -16.85702075327041
              ],
              [
                -151.4821115424651,
                -16.862113529735264
              ],
              [
                -151.47902163767995,
                -16.865070562787615
              ],
              [
                -151.48005160594167,
                -16.868027549575096
              ],
              [
                -151.47764834666432,
                -16.901372584209522
              ],
              [
                -151.46683367991628,
                -16.916975378932086
              ],
              [
                -151.44606265330495,
                -16.919603090928064
              ],
              [
                -151.43387469554128,
                -16.915825743407567
              ],
              [
                -151.4045206000823,
                -16.89907311580447
              ],
              [
                -151.37859973216237,
                -16.885932758593498
              ],
              [
                -151.3692432047878,
                -16.88067112625442
              ],
              [
                -151.36357837934835,
                -16.876235925576275
              ],
              [
                -151.3524203898464,
                -16.865558163457266
              ],
              [
                -151.34933048506124,
                -16.855208372106656
              ],
              [
                -151.34881550093039,
                -16.845186605794048
              ],
              [
                -151.3520770670925,
                -16.83516430870209
              ],
              [
                -151.3586001994167,
                -16.832535421630762
              ],
              [
                -151.37229851686845,
                -16.82172398925724
              ],
              [
                -151.3837998291243,
                -16.81087882570414
              ],
              [
                -151.3937561889876,
                -16.803155376557225
              ],
              [
                -151.39564446413408,
                -16.792473492660648
              ],
              [
                -151.40594414675127,
                -16.78244840879108
              ],
              [
                -151.4128106018294,
                -16.771929719313388
              ],
              [
                -151.42877510988603,
                -16.7503974622098
              ],
              [
                -151.432551660179,
                -16.74020577360031
              ],
              [
                -151.43495491945635,
                -16.732315059508124
              ],
              [
                -151.44182137453447,
                -16.725081617916757
              ],
              [
                -151.45280770265947,
                -16.71669705815407
              ],
              [
                -151.46121911013017,
                -16.71735468400482
              ],
              [
                -151.46448067629228,
                -16.71866992890521
              ],
              [
                -151.4739220520247,
                -16.719327547954688
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -151.03565362408423,
                -16.715848800233637
              ],
              [
                -151.04887155010962,
                -16.741494641951267
              ],
              [
                -151.05127480938697,
                -16.75924743324599
              ],
              [
                -151.0449233384397,
                -16.774697588669948
              ],
              [
                -151.0371985764768,
                -16.779299519935734
              ],
              [
                -151.03054755592765,
                -16.781600443777684
              ],
              [
                -151.0197328891796,
                -16.796720107081434
              ],
              [
                -151.00136512184562,
                -16.809045028559357
              ],
              [
                -150.99003547096672,
                -16.812002890566355
              ],
              [
                -150.98076575661125,
                -16.811016941689935
              ],
              [
                -150.97681754494133,
                -16.809538008764136
              ],
              [
                -150.97115271950187,
                -16.805101140794637
              ],
              [
                -150.96634620094719,
                -16.79869214831399
              ],
              [
                -150.96171134376945,
                -16.793433326164596
              ],
              [
                -150.95844977760734,
                -16.79261162204392
              ],
              [
                -150.95295661354484,
                -16.78505177729245
              ],
              [
                -150.95484488869133,
                -16.78242219553981
              ],
              [
                -150.95192664528312,
                -16.7799569295909
              ],
              [
                -150.95535987282219,
                -16.7730540147856
              ],
              [
                -150.95432990456047,
                -16.76960246337474
              ],
              [
                -150.959651407246,
                -16.76615084930692
              ],
              [
                -150.96634620094719,
                -16.75672422094247
              ],
              [
                -150.9696077671093,
                -16.754258621802823
              ],
              [
                -150.9721826877636,
                -16.75146423749711
              ],
              [
                -150.97630256081047,
                -16.749984840962792
              ],
              [
                -150.9805940952343,
                -16.747683534614143
              ],
              [
                -150.97939246559562,
                -16.739299969144785
              ],
              [
                -150.97750419044914,
                -16.737162922851162
              ],
              [
                -150.97716086769523,
                -16.733053151070383
              ],
              [
                -150.97801917458,
                -16.728121307945454
              ],
              [
                -150.9802507724804,
                -16.724011341207245
              ],
              [
                -150.98427830577612,
                -16.720764924356182
              ],
              [
                -150.9828125894633,
                -16.71127112533943
              ],
              [
                -150.98357773365376,
                -16.694706519762875
              ],
              [
                -151.00352875676793,
                -16.685930128163484
              ],
              [
                -151.0142671547629,
                -16.686777726935144
              ],
              [
                -151.02500577731755,
                -16.689926820277524
              ],
              [
                -151.03069161221848,
                -16.70806383177426
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -152.27500859824235,
                -16.443208615997143
              ],
              [
                -152.27586690512712,
                -16.451111202018946
              ],
              [
                -152.2729486617189,
                -16.454568482207893
              ],
              [
                -152.26762715903337,
                -16.45308679824221
              ],
              [
                -152.26591054526384,
                -16.45605015485678
              ],
              [
                -152.2612756880861,
                -16.460988981942247
              ],
              [
                -152.2528642806154,
                -16.463458348317378
              ],
              [
                -152.24891606894548,
                -16.45654404322472
              ],
              [
                -152.24651280966813,
                -16.448312406270162
              ],
              [
                -152.24359456625993,
                -16.442879334597208
              ],
              [
                -152.24651280966813,
                -16.43728146535565
              ],
              [
                -152.2502893599611,
                -16.43365922868351
              ],
              [
                -152.2605890425783,
                -16.434153174025532
              ],
              [
                -152.26316396323259,
                -16.43579964942737
              ],
              [
                -152.27170758902673,
                -16.441030446630556
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -149.8641085844978,
                -17.491351965990184
              ],
              [
                -149.87527387615998,
                -17.485701626604047
              ],
              [
                -149.87617509838898,
                -17.48574255890987
              ],
              [
                -149.87746255871613,
                -17.486070017024886
              ],
              [
                -149.87793462750275,
                -17.486683999401418
              ],
              [
                -149.87827795025666,
                -17.487216115784417
              ],
              [
                -149.8808957862552,
                -17.487134251826827
              ],
              [
                -149.8829128074344,
                -17.486888659732983
              ],
              [
                -149.88488691326936,
                -17.48664306730746
              ],
              [
                -149.88686101910432,
                -17.486233745861288
              ],
              [
                -149.8879768180545,
                -17.48615188146151
              ],
              [
                -149.8890926170047,
                -17.486233745861288
              ],
              [
                -149.88977926251252,
                -17.48684772768509
              ],
              [
                -149.89025133129914,
                -17.48832127560497
              ],
              [
                -149.89072340008576,
                -17.489467360176555
              ],
              [
                -149.89128129956086,
                -17.48971294878782
              ],
              [
                -149.89218252178986,
                -17.489344565746528
              ],
              [
                -149.89261167523225,
                -17.488403139028204
              ],
              [
                -149.8933412360843,
                -17.48762543501957
              ],
              [
                -149.89449995037873,
                -17.487134251826827
              ],
              [
                -149.89810483929475,
                -17.487338911651705
              ],
              [
                -149.90132349011262,
                -17.488362207321195
              ],
              [
                -149.90514295574982,
                -17.48762543501957
              ],
              [
                -149.90827577587922,
                -17.4887715239767
              ],
              [
                -149.9103786277469,
                -17.488935250380916
              ],
              [
                -149.91230981823762,
                -17.49135019771932
              ],
              [
                -149.9138547706302,
                -17.493028362573256
              ],
              [
                -149.91582887646516,
                -17.494911163237653
              ],
              [
                -149.91904752728303,
                -17.4998956764764
              ],
              [
                -149.92084997174103,
                -17.502678834964783
              ],
              [
                -149.92110746380646,
                -17.50668978249672
              ],
              [
                -149.92072122570832,
                -17.509268202000754
              ],
              [
                -149.91943376538117,
                -17.512624185254918
              ],
              [
                -149.9180175590213,
                -17.514588634477942
              ],
              [
                -149.91582887646516,
                -17.51413845007494
              ],
              [
                -149.91462724682648,
                -17.515161594830992
              ],
              [
                -149.9138547706302,
                -17.51708509136252
              ],
              [
                -149.9134256171878,
                -17.517821744211286
              ],
              [
                -149.9164296912845,
                -17.519172266669624
              ],
              [
                -149.9184467124637,
                -17.52101387200951
              ],
              [
                -149.91750257489045,
                -17.52371485937119
              ],
              [
                -149.91483473050297,
                -17.528007065719216
              ],
              [
                -149.91311811673344,
                -17.529807659025728
              ],
              [
                -149.91032861935795,
                -17.532999575959135
              ],
              [
                -149.90621157394278,
                -17.535997855639717
              ],
              [
                -149.90526743636954,
                -17.537225480741906
              ],
              [
                -149.90475245223868,
                -17.539394264774927
              ],
              [
                -149.90329333053458,
                -17.54049910704273
              ],
              [
                -149.90192003951896,
                -17.54090830617381
              ],
              [
                -149.90110464797843,
                -17.541603942576646
              ],
              [
                -149.89891596542228,
                -17.544509218693598
              ],
              [
                -149.88655634628165,
                -17.550892478678982
              ],
              [
                -149.88621302352774,
                -17.55338843584268
              ],
              [
                -149.88565512405265,
                -17.554861443604405
              ],
              [
                -149.88385267959464,
                -17.557602842820195
              ],
              [
                -149.88243945083656,
                -17.560379438319313
              ],
              [
                -149.87930663070716,
                -17.56352990202705
              ],
              [
                -149.87325556716956,
                -17.566475740564595
              ],
              [
                -149.87196810684242,
                -17.56762133149196
              ],
              [
                -149.86866640874413,
                -17.56996789104346
              ],
              [
                -149.86446070500878,
                -17.574959244997075
              ],
              [
                -149.8651473505166,
                -17.5768411951623
              ],
              [
                -149.86587691136864,
                -17.57843674626852
              ],
              [
                -149.86510443517236,
                -17.579827728055697
              ],
              [
                -149.8607699854043,
                -17.585637006916905
              ],
              [
                -149.8541610223916,
                -17.59005520670593
              ],
              [
                -149.84536337682275,
                -17.591364282198555
              ],
              [
                -149.83750986882714,
                -17.59451420623976
              ],
              [
                -149.81274073431916,
                -17.596139091036367
              ],
              [
                -149.8045009882254,
                -17.59548457177145
              ],
              [
                -149.79673831862243,
                -17.58722106213789
              ],
              [
                -149.79270427626403,
                -17.571142953614856
              ],
              [
                -149.7913309852484,
                -17.570406517468758
              ],
              [
                -149.78154628676208,
                -17.5521992266823
              ],
              [
                -149.77632378090547,
                -17.54555421021962
              ],
              [
                -149.7740063523166,
                -17.543671934816256
              ],
              [
                -149.7728905533664,
                -17.541789639863904
              ],
              [
                -149.77327679146455,
                -17.540398365813925
              ],
              [
                -149.76968486203097,
                -17.533073541064265
              ],
              [
                -149.76822574032687,
                -17.523047463362676
              ],
              [
                -149.76382253051506,
                -17.508731750080514
              ],
              [
                -149.76227757812248,
                -17.50373857231214
              ],
              [
                -149.75716311478476,
                -17.49448855258142
              ],
              [
                -149.76467330002646,
                -17.48441941199446
              ],
              [
                -149.76857859635214,
                -17.479507433798364
              ],
              [
                -149.77926451706747,
                -17.475495886564506
              ],
              [
                -149.78033740067343,
                -17.47516840941681
              ],
              [
                -149.7823115065084,
                -17.475373082703182
              ],
              [
                -149.7846718504415,
                -17.476109904628213
              ],
              [
                -149.78694636368613,
                -17.47664205194099
              ],
              [
                -149.79197695637046,
                -17.478288477448693
              ],
              [
                -149.79463770771324,
                -17.4788206183905
              ],
              [
                -149.79609682941734,
                -17.478984353751798
              ],
              [
                -149.80017378711997,
                -17.47927089027954
              ],
              [
                -149.8032207765609,
                -17.478615948981666
              ],
              [
                -149.8062677660018,
                -17.480171430714705
              ],
              [
                -149.8075981416732,
                -17.47996676282538
              ],
              [
                -149.80910017872154,
                -17.479311824032372
              ],
              [
                -149.8110742845565,
                -17.481112900040134
              ],
              [
                -149.81223299885093,
                -17.481194766707752
              ],
              [
                -149.8269958772689,
                -17.48360981682858
              ],
              [
                -149.83077242756187,
                -17.48365074960515
              ],
              [
                -149.83223154926597,
                -17.484387538008395
              ],
              [
                -149.83802512073814,
                -17.48246369534486
              ],
              [
                -149.83987048054038,
                -17.48135849993247
              ],
              [
                -149.84399035358726,
                -17.482013431357718
              ],
              [
                -149.8466081895858,
                -17.483200488556214
              ],
              [
                -149.84926894092857,
                -17.486024834885768
              ],
              [
                -149.84991267109214,
                -17.48811236702746
              ],
              [
                -149.85192969227134,
                -17.49228735941842
              ],
              [
                -149.8542471208602,
                -17.495561796170033
              ],
              [
                -149.86102774524986,
                -17.49298318216311
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -149.5799058555179,
                -17.541156667971844
              ],
              [
                -149.58471237407258,
                -17.542793453015832
              ],
              [
                -149.59003387675813,
                -17.543120808250926
              ],
              [
                -149.5934671042972,
                -17.542957130707276
              ],
              [
                -149.5993035911136,
                -17.543939193751893
              ],
              [
                -149.60599838481477,
                -17.54623065349405
              ],
              [
                -149.6138948081546,
                -17.549013101368445
              ],
              [
                -149.6187013267093,
                -17.552450183864604
              ],
              [
                -149.6219628928714,
                -17.561615418322482
              ],
              [
                -149.6219628928714,
                -17.564070313063386
              ],
              [
                -149.6212762473636,
                -17.56668883075752
              ],
              [
                -149.62213455424836,
                -17.575362399997694
              ],
              [
                -149.62041794047883,
                -17.58223549913724
              ],
              [
                -149.61732803569367,
                -17.58599922844219
              ],
              [
                -149.61698471293977,
                -17.588617428699855
              ],
              [
                -149.61440979228547,
                -17.59139922491796
              ],
              [
                -149.6132081626468,
                -17.597453574540772
              ],
              [
                -149.61492477641633,
                -17.60154423645163
              ],
              [
                -149.6154397605472,
                -17.606452908442588
              ],
              [
                -149.61269317851594,
                -17.61528818170783
              ],
              [
                -149.6070283530765,
                -17.62494104132046
              ],
              [
                -149.59484039531281,
                -17.654387250092068
              ],
              [
                -149.57534548647712,
                -17.6973106013236
              ],
              [
                -149.57892163675018,
                -17.716939567954448
              ],
              [
                -149.5857880918283,
                -17.717430126516263
              ],
              [
                -149.5854447690744,
                -17.722662667677824
              ],
              [
                -149.58647473733612,
                -17.72675048420715
              ],
              [
                -149.58561643045135,
                -17.73083820751157
              ],
              [
                -149.58149655740448,
                -17.73410831902059
              ],
              [
                -149.58080991189667,
                -17.735579849727845
              ],
              [
                -149.58304150979706,
                -17.738686374859487
              ],
              [
                -149.58149655740448,
                -17.74179284611293
              ],
              [
                -149.57840665261932,
                -17.743754800193514
              ],
              [
                -149.57291348855682,
                -17.744408780110057
              ],
              [
                -149.56913693826385,
                -17.746370705527625
              ],
              [
                -149.55265744607635,
                -17.754381677826885
              ],
              [
                -149.5463059751291,
                -17.753237275165628
              ],
              [
                -149.5418427793283,
                -17.75552607316943
              ],
              [
                -149.5311997739572,
                -17.75470864867159
              ],
              [
                -149.5250199643869,
                -17.756506977637617
              ],
              [
                -149.50613721292206,
                -17.75618001007905
              ],
              [
                -149.48536618631073,
                -17.761738377306802
              ],
              [
                -149.46768506448456,
                -17.778575905983573
              ],
              [
                -149.46339353006073,
                -17.77922975859956
              ],
              [
                -149.4594453183908,
                -17.782335525848925
              ],
              [
                -149.45275052468963,
                -17.783479742278097
              ],
              [
                -149.4426225034494,
                -17.77563353960414
              ],
              [
                -149.4342110959787,
                -17.77432580566308
              ],
              [
                -149.42459805886932,
                -17.774489272929
              ],
              [
                -149.41670163552948,
                -17.77416233824765
              ],
              [
                -149.4100068418283,
                -17.77440753008756
              ],
              [
                -149.40262540261932,
                -17.77032080172114
              ],
              [
                -149.38786252420135,
                -17.768686084214824
              ],
              [
                -149.38116773050018,
                -17.766397454595896
              ],
              [
                -149.374472936799,
                -17.76231054313611
              ],
              [
                -149.36674817483612,
                -17.7626374994898
              ],
              [
                -149.3627999631662,
                -17.765416604363484
              ],
              [
                -149.3495820371408,
                -17.757079160199265
              ],
              [
                -149.33584912698456,
                -17.75528083698402
              ],
              [
                -149.33172925393768,
                -17.752338087283704
              ],
              [
                -149.32829602639862,
                -17.754790382061227
              ],
              [
                -149.31833966653534,
                -17.763781842020826
              ],
              [
                -149.31164487283417,
                -17.773263255563183
              ],
              [
                -149.31250317971893,
                -17.77800377375493
              ],
              [
                -149.2998002378244,
                -17.80252168729066
              ],
              [
                -149.29502738910975,
                -17.809975726894592
              ],
              [
                -149.29760230976405,
                -17.819781539482413
              ],
              [
                -149.29605735737147,
                -17.824193979176023
              ],
              [
                -149.29434074360194,
                -17.831057557082502
              ],
              [
                -149.2897058864242,
                -17.839228138334676
              ],
              [
                -149.28472770649256,
                -17.83546971751883
              ],
              [
                -149.27459968525233,
                -17.84364009631492
              ],
              [
                -149.27013648945155,
                -17.849195739686266
              ],
              [
                -149.26378501850428,
                -17.850993116582117
              ],
              [
                -149.26035179096522,
                -17.851483307129648
              ],
              [
                -149.25915016132655,
                -17.854587815897926
              ],
              [
                -149.25245536762537,
                -17.85769227048257
              ],
              [
                -149.24215568500819,
                -17.864881325657027
              ],
              [
                -149.20164360004725,
                -17.87272359972708
              ],
              [
                -149.18361915546717,
                -17.88170911324465
              ],
              [
                -149.17331947284998,
                -17.880238787592162
              ],
              [
                -149.1249109645492,
                -17.831711217377435
              ],
              [
                -149.12336601215662,
                -17.82762580118145
              ],
              [
                -149.12370933491053,
                -17.820762091077253
              ],
              [
                -149.1223360438949,
                -17.8150421307352
              ],
              [
                -149.12679923969569,
                -17.779410820016356
              ],
              [
                -149.13969838550915,
                -17.761919456439973
              ],
              [
                -149.15497624805798,
                -17.750639071642066
              ],
              [
                -149.16750752857556,
                -17.748350211138888
              ],
              [
                -149.17420232227673,
                -17.748023228677845
              ],
              [
                -149.17935216358532,
                -17.749821624822225
              ],
              [
                -149.20304143360485,
                -17.740665965421446
              ],
              [
                -149.21625935963024,
                -17.737886476191175
              ],
              [
                -149.2186626189076,
                -17.734616433642586
              ],
              [
                -149.2219241850697,
                -17.733635409238623
              ],
              [
                -149.22673070362438,
                -17.733635409238623
              ],
              [
                -149.2306789152943,
                -17.732163862561055
              ],
              [
                -149.23685872486462,
                -17.730692303798346
              ],
              [
                -149.25316655567516,
                -17.732981389985085
              ],
              [
                -149.2775424712025,
                -17.7295477497394
              ],
              [
                -149.29505193165173,
                -17.719736986566975
              ],
              [
                -149.30088841846813,
                -17.70878099998712
              ],
              [
                -149.3010600798451,
                -17.697170194573612
              ],
              [
                -149.2984851591908,
                -17.67623614168021
              ],
              [
                -149.30449330738415,
                -17.667894550686952
              ],
              [
                -149.31565156597796,
                -17.659061548829733
              ],
              [
                -149.3130763762318,
                -17.64532124769822
              ],
              [
                -149.30854602841976,
                -17.638656949573786
              ],
              [
                -149.30734439878108,
                -17.639311312246843
              ],
              [
                -149.30356784848811,
                -17.63653025447584
              ],
              [
                -149.30133625058772,
                -17.628350424081894
              ],
              [
                -149.29893299131038,
                -17.61951579044281
              ],
              [
                -149.29790302304866,
                -17.613134952615006
              ],
              [
                -149.29824634580257,
                -17.60708112868968
              ],
              [
                -149.29944797544124,
                -17.60069985128362
              ],
              [
                -149.30695797243234,
                -17.570672456930737
              ],
              [
                -149.31708599367258,
                -17.573454529221546
              ],
              [
                -149.38317562379953,
                -17.536956888767918
              ],
              [
                -149.4063499096882,
                -17.523698078258636
              ],
              [
                -149.43976535272466,
                -17.51794633831061
              ],
              [
                -149.47821750116216,
                -17.508778896305227
              ],
              [
                -149.5070432203312,
                -17.523726062589912
              ],
              [
                -149.5195745008488,
                -17.52880053586501
              ],
              [
                -149.52472434215738,
                -17.519306244431856
              ],
              [
                -149.5283292310734,
                -17.51914254539594
              ],
              [
                -149.5305608289738,
                -17.520779529111152
              ],
              [
                -149.53536734752848,
                -17.521761712253156
              ],
              [
                -149.5389722364445,
                -17.52028843554686
              ],
              [
                -149.5418904798527,
                -17.51881514688121
              ],
              [
                -149.54498038463785,
                -17.521598015431962
              ],
              [
                -149.55459342174723,
                -17.522252801830803
              ],
              [
                -149.55991492443277,
                -17.52356236754068
              ],
              [
                -149.56266150646402,
                -17.522089105452572
              ],
              [
                -149.566438056757,
                -17.523071281506976
              ],
              [
                -149.5726178663273,
                -17.527163624509782
              ],
              [
                -149.57536444835856,
                -17.530273743455624
              ],
              [
                -149.57467780285074,
                -17.533711181300493
              ],
              [
                -149.57347617321207,
                -17.53600277033357
              ],
              [
                -149.57725272350504,
                -17.539931141294765
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -147.6906298606649,
                -23.86545686707101
              ],
              [
                -147.69749631574302,
                -23.867654624333777
              ],
              [
                -147.70333280255943,
                -23.876445280360265
              ],
              [
                -147.6964663474813,
                -23.886177096051416
              ],
              [
                -147.66968717267662,
                -23.892455298383037
              ],
              [
                -147.64943113019615,
                -23.886491013404353
              ],
              [
                -147.62677182843834,
                -23.872991879534716
              ],
              [
                -147.6130389182821,
                -23.858863371509585
              ],
              [
                -147.61509885480552,
                -23.853525534055372
              ],
              [
                -147.64496793439537,
                -23.84850148616658
              ],
              [
                -147.65355100324302,
                -23.848187476706748
              ],
              [
                -147.66453733136802,
                -23.85101353445719
              ],
              [
                -147.6789568870321,
                -23.85603748495721
              ],
              [
                -147.6858233421102,
                -23.855095509075863
              ],
              [
                -147.68788327863365,
                -23.86043328184817
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -149.53267366887172,
                -23.373004732833365
              ],
              [
                -149.52718050480922,
                -23.385295022870785
              ],
              [
                -149.51859743596157,
                -23.39758417297042
              ],
              [
                -149.51070101262172,
                -23.407036589368772
              ],
              [
                -149.49628145695766,
                -23.40546123350509
              ],
              [
                -149.4653824091061,
                -23.40325570379777
              ],
              [
                -149.44546968937954,
                -23.3956936087091
              ],
              [
                -149.42967684269985,
                -23.383089157303765
              ],
              [
                -149.4262436151608,
                -23.366701577958125
              ],
              [
                -149.43448336125454,
                -23.351257582441537
              ],
              [
                -149.4434097528561,
                -23.341485963043482
              ],
              [
                -149.46229250432094,
                -23.338018441335283
              ],
              [
                -149.4763687372311,
                -23.33644226517156
              ],
              [
                -149.48941500187954,
                -23.341170737539052
              ],
              [
                -149.5210006952389,
                -23.355039951655737
              ],
              [
                -149.52958376408657,
                -23.362289191277718
              ],
              [
                -149.53336031437954,
                -23.368592555881893
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -159.77593156666833,
                -18.82970129917763
              ],
              [
                -159.78726121754724,
                -18.845623037338385
              ],
              [
                -159.79206773610193,
                -18.85277108173228
              ],
              [
                -159.8009941277035,
                -18.862193038649405
              ],
              [
                -159.80545732350427,
                -18.870639860374002
              ],
              [
                -159.80305406422693,
                -18.884283827081145
              ],
              [
                -159.79790422291833,
                -18.89467848440421
              ],
              [
                -159.7900077995785,
                -18.90052519553551
              ],
              [
                -159.7793647942074,
                -18.89760186550012
              ],
              [
                -159.76769182057458,
                -18.89175505225448
              ],
              [
                -159.7632286247738,
                -18.875837692973032
              ],
              [
                -159.76563188405115,
                -18.861868152393217
              ],
              [
                -159.76666185231286,
                -18.851146552921595
              ],
              [
                -159.76631852955896,
                -18.843348595738533
              ],
              [
                -159.76460191578943,
                -18.836200150126363
              ],
              [
                -159.76666185231286,
                -18.831326035484533
              ],
              [
                -159.77181169362146,
                -18.82872644985204
              ],
              [
                -159.77524492116052,
                -18.826126824000614
              ]
            ]
          ],
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    ArteFactDove1 = /* color: #d63000 */ee.Geometry.Polygon(
        [[[-146.05846187260835, -15.788281834595544],
          [-146.17896815922944, -15.919726504985077],
          [-146.0447289624521, -16.039207079451543],
          [-145.95924159672944, -16.067242308035123],
          [-145.8576180615732, -16.0098293943229],
          [-145.91392299321382, -15.924669524238606],
          [-145.95546504643647, -15.857638483594831],
          [-145.95580836919038, -15.835840336086665],
          [-145.997983480312, -15.795664701454493]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - Central South Pacific
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Chris Roelfsema
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////


//////////////////////////////////////////////////////////////
// START NOTES for THINGS TO DO
// CHECK SG in Atoll reefs to SD or RU when on IRF or SL, create 
// CHECK where SG could be in region, as possible only French Polonesy
// CHECK lagoon_mask correction , how to improve
// DONE Adjust midmask in map viewer using clean 2 and 3
// DONE Adjust depth range to deeper
// DONE Add rule for TRF notin buffer zone by creating TRF mask for major islands
// DONE Add rule of bright areas mapped as ORF should be IRF, see above
// DONE Add rule or check rules TRF close to land, see above
// DONE Consider adjust depth range
// DONE Check imagery marqueses missing
// DONE Check why some location in deep water is still phantom reef, added unmask depth
// DONE Check why marqueses one island has so much phantom reefs, see above
// Check missing areas on breaking waves if related to depth mask taking out to much
// END NOTES TO FOLLOW UP ON
//////////////////////////////////////////////////////////////


//*********************************************************
//*** PLEASE READ *********************** Mask that need to be created before running this script
//*********************************************************
//******* BIG MASK to be created in viewer, then exported to and include in reef_param
//******* Useally bigger mask and covering more different areas
//******* They Include
//******* Mid_mask= masking out areas that should not be classified include to turbid or no reef areas
//******* Lagoons_mask to much RC and should be ORF, or RS replaced BRS
//DELETE******* Coastline Mask+ areas that should have not DL nor BRS but RS
//DELETE* Banks_0_3m_mask = areas that are not turbid enough to be deleted but show shallow reef up to 3 m
//DELETE* DW_0_5m_mask = areas that are not turbid enough to be deleted but show shallow reef up to 5 m
//DELETE* SG_to_AC mask = Seagrass areas that are not seagrass but AC based on existing data
//*********************************************************
//******* SMALLER MASK to be created in clean up script and are just smaller corrections after review
//******* Useally small mask and covering a view different areas
//******* They Include
//******* DL_BRS_mask area identified to require clean up
//******* BRS_Deep_Mask area identified to require clean up
//******* DW_SL_BRS_to_RS area identified to require clean up
//*********************************************************
//*** THANK YOU FO READING *********************** Mask that need to be created before running this script
//*********************************************************


// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.central_south_pacific;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(1), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1250, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF
  wave_height: 0.6, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1400, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 900, //depth in centimetres
  turbid1_depth_cutoff: 300,//depth in centimeters to be combined with depth5m_mask Code introduced CR
  turbid2_depth_cutoff: 500,//depth in centimeters to be combined with depth8m_mask Code introduced CR
  
  //############
  // Clean-up stage selection
  cleanup_stage: 2, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  // should the global extent + depth cleanup be applied?
  global_extent_clean: true,
  global_depth_thresh: 500, // this is the depth limit for ADDING to the global extent (i.e. 5 = everything <5m will be added to the global extent layer)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth').unmask(9999,false);// replace pixel with segments and add value to nodata
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);
  
  
   // the "GLOBAL MASK" clean
  // currently uses GCRMN extent + bathymetry threhold < vars.global_depth_thresh
  if (vars.global_extent_clean) {
    var blanket_mask = ee.Image([param_module.global_extent_mask.gcrmn]).unmask(0, false)
              .eq(1) // extent according to global extent layer
              .add(depth.lt(vars.global_depth_thresh)) // combine with areas less than depth thrshold
              .eq(0) // get leftovers
              .selfMask().connectedPixelCount(25, true).gte(25)
   Map.addLayer(blanket_mask, {}, "blank_mask")
    man_geo = man_geo.where({
      test: blanket_mask.eq(1),
      value: ee.Image(0)
    });
  }
  // import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  // the "MID MASK" CLEAN
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });
  //************************************* START Import AND APPLY Lagoons mask Chris SCS************************************START
  // import the lagoon mask from asset ****only use ee.FC if  lagoons mask created in map viewer****
  var lagoons_mask = ee.FeatureCollection(region_params.Lagoons_mask).geometry();
  var lagoonsmask = ee.Image().byte().paint(ee.Feature(lagoons_mask.dissolve(),{zone: 1}), "zone").clip(lagoons_mask.dissolve());

  
  // RC within Lagoon ORF
man_geo = man_geo.where({
test: lagoonsmask.eq(1)
             .and(man_geo.eq(15)),
  value: ee.Image(14)
});
// Reef slope, sheltered slope (within lagoon mask) -> Back Reef Slope
 man_geo = man_geo.where({
  test: lagoonsmask.eq(1)
                    .and(man_geo.eq(21).or(man_geo.eq(22))),
    value: ee.Image(24)
 });    
  //************************************* END IMPORT AND APPLY Lagoons mask Chris SCS************************************END
  
  //*********************START CREATING and APPLYING REEF OUTINE BUFFER FROM  reef (lagoon) mask Chris SCS**************START
  // in map viewer manual digitised reef top areas with lagoon in it. Tried to use CNN layer but to many artefacts and manual took 3 hr
  // creatimg a buffer around lagoon_mask

  var lagoon_buffered = lagoons_mask.buffer(1000); // buffer 1000 m wide around reef mask
  var reef_band_mask = lagoon_buffered.difference(lagoons_mask);//substract buffered lagoon mask - lagoon mask resulting in band around reef of 1000 m
  var reefbandmask = ee.Image().byte().paint(ee.Feature(reef_band_mask.dissolve(),{zone: 1}), "zone").clip(reef_band_mask.dissolve()); // paint it as image

  // BRS, DL and SL should not be present on outside of reef on within reefbandmask  -> Reef Slope
  man_geo = man_geo.where({
   test: reefbandmask.eq(1)
                      .and(man_geo.eq(24).or(man_geo.eq(12)).or(man_geo.eq(11))),
    value: ee.Image(22)
 });    
  // IRF on within reefbandmask  -> ORF as RC would get artefacts
   man_geo = man_geo.where({
  test: reefbandmask.eq(1)
                    .and(man_geo.eq(13)),
    value: ee.Image(14)
  });   
  //********************* END CREATING and APPLYING REEF OUTINE BUFFER FROM  Lagoons mask Chris SCS*****************END
  //************************************* clean up small groups of  pixesl in deep water Chris RSAG ************************************
   var man_geo = man_geo.where({
   test:man_geo.eq(22)// Reef Slope pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are RS and neighbouring each other, with groups smaller then 25
   value: ee.Image(0) // change those selected no class
  })
   var man_geo = man_geo.where({
    test:man_geo.eq(12)// Deep Lagoon pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are Deep Lagoon and neighbouring each other, with groups smaller then 25
    value: ee.Image(0) // change those selected no class
  })
     var man_geo = man_geo.where({
    test:man_geo.eq(23)// Plateau pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are Plateau and neighbouring each other, with groups smaller then 25
    value: ee.Image(0) // change those selected no class
  })
  
 //************************************* END flean up small groups of pixesl in deep water Chris RSAG ************************************


  // CR ************************************ terrestrial reef flat only close to major land, otherwise outer reef flat ************************* 
  // CR step 1: assign all pixels assinged TRF to a temporary class TC(33)
  // CR Step 2: create TRF_mask for the areas within lagoons, where TRF should stay, areas around major land mass
  // CR step 3: label all TC pixels that fall within the TRF_mask to TRF
  // CR Step 4: all the remaining TC pixels can then be assigned ORF
  // CR step 4 does not require a mask
  var terrestrialRF = ee.Image().byte().paint(ee.Feature(Terrestrial_RF, {zone: 1}), "zone").clip(Terrestrial_RF);
  
  man_geo = man_geo.where({//CR
    test: man_geo.eq(16),//CR
    value: ee.Image(33) //CR creating temp variable
  });//CR
  
  man_geo = man_geo.where({
    test: terrestrialRF.eq(1)
                     .and(man_geo.eq(33)),
    value: ee.Image(16)//CR temp variable assigned TRF when falling within low energie zone
  });  
   man_geo = man_geo.where({
    test: terrestrialRF.eq(1)
                     .and(man_geo.eq(14)),
    value: ee.Image(16)//CR temp variable assigned TRF when falling within low energie zone
  });  
   man_geo = man_geo.where({
    test: man_geo.eq(33),
    value: ee.Image(14) //CR temp variable assinged ORF when not falling in low energie zone
  }); 
 
 
 //************************************* START Import AND APPLY coast mask Chris Red Sea ************************************START
 /* // import the coast mask from asset ****only use ee.FC if  coast mask created in map viewer****
  var Coast_mask = ee.FeatureCollection(region_params.Coast_mask).geometry();
  var Coastmask = ee.Image().byte().paint(ee.Feature(Coast_mask.dissolve(),{zone: 1}), "zone").clip(Coast_mask.dissolve());

  
  //***** clean-up areas that are  coast mask 
  man_geo = man_geo.where({
    test: (Coastmask.eq(1))
                     .and(man_geo.eq(21).or(man_geo.eq(22)).or(man_geo.eq(11))),//
    value: ee.Image(24)
  });
    //Deep Lagoon within Coast Deep Water
   man_geo = man_geo.where({
   test: Coastmask.eq(1)
             .and(man_geo.eq(12)),//
   value: ee.Image(2)
   }); 
    //shallow Lagoon within Back Reef Slope
    man_geo = man_geo.where({
    test: Coastmask.eq(1)
             .and(man_geo.eq(11)),//
    value: ee.Image(24)
    }); 
  //************************************* END IMPORT AND APPLY Lagoons mask Chris Red Sea ************************************END
  */
  /*
   //************************************* START Import AND APPLY 0-3 m mask Chris Red Sea ************************************START
  // import the coast mask from asset ****only use ee.FC if  coast mask created in map viewer****
  var Banks0_3mMask = ee.FeatureCollection(region_params.Banks0_3mMask).geometry();
  var Banks_0_3mMask = ee.Image().byte().paint(ee.Feature(Banks0_3mMask.dissolve(),{zone: 1}), "zone").clip(Banks0_3mMask.dissolve());

  
  //Mask out areas deeper then 3 m due to turbied water within 0-3 m mask
man_geo = man_geo.where({
test: Banks_0_3mMask.eq(1)
             .and(depth.gt(vars.turbid1_depth_cutoff)),
  value: ee.Image(0)
});

  //************************************* END IMPORT AND APPLY 0-3_mask Chris Red Sea ************************************END
  
  */
  /*
  //************************************* START Import AND APPLY 0-5 m mask Chris Red Sea ************************************START
  // import the coast mask from asset ****only use ee.FC if  coast mask created in map viewer****
  var DW0_5mMask = ee.FeatureCollection(region_params.DW0_5mMask).geometry();
  var DW_0_5mMask = ee.Image().byte().paint(ee.Feature(DW0_5mMask.dissolve(),{zone: 1}), "zone").clip(Banks0_3mMask.dissolve());

  
   //Mask out areas deeper then 3 m due to turbied water within 0-5 m mask
     man_geo = man_geo.where({
        test: DW_0_5mMask.eq(1)
                    .and(depth.gt(vars.turbid1_depth_cutoff)),
     value: ee.Image(0)
  });

  //************************************* END IMPORT AND APPLY 0-5 m mask Chris Red Sea ************************************END
   */ 
  //*************************************************************************************************************** 
  //START*********************SMALL MASK, geometry created in cleanup script ***CHRIS******************************
  //***************************************************************************************************************
  var DL_BRS_mask = ee.Image().byte().paint(ee.Feature(DL_BRS_mask, {zone: 1}), "zone");
  var BRS_Deep_Mask = ee.Image().byte().paint(ee.Feature(BRS_Deep_Mask, {zone: 1}), "zone");
  var DW_SL_BRS_to_RS = ee.Image().byte().paint(ee.Feature(DW_SL_BRS_to_RS, {zone: 1}), "zone");
 
  //*************Deep Lagoon with mask should be Back Reef slope (DUE TO SHALLOW BANK SOUTHERN RED SEA WITH NO EDGE)
  man_geo = man_geo.where({
  test: DL_BRS_mask.eq(1)
             .and(man_geo.eq(12)),//,
  value: ee.Image(24)
  });
  //*************Back Reef slope = Deep Lagoon, + Plateau to no data (DUE TO ARTEFACT IN IMAGE SOUTHER RED SEA)
  //*** Areas that are partly turbid and have image aretefacts and were labelled as DL or PL
  man_geo = man_geo.where({
  test: BRS_Deep_Mask.eq(1)
             .and((man_geo.eq(24)).or(man_geo.eq(12)).or(man_geo.eq(23))),//,
  value: ee.Image(0)
  });
   //***** clean-up areas that are  DW_SL_BRS_to_RS (DUE TO Micture of classes triggered by variable bottoms RED SEA)
  //*** Areas that are partly turbid and have image aretefacts and were labelled as DL or PL
  man_geo = man_geo.where({
    test: (DW_SL_BRS_to_RS.eq(1))
                     .and(man_geo.eq(21).or(man_geo.eq(24)).or(man_geo.eq(12)).or(man_geo.eq(11))),//
    value: ee.Image(22)
  });

  //*************************************************************************************************************** 
  //END**************************SMALL MASK, geometry created in cleanup script ***CHRIS***************************
 


  /*
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not) NO WAVES WERE USED FOR RED SEA DUE TO ENCLOSED NATURE OF RED SEA NO OCEAN SWELL
  
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })*/
  
  
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  
  
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.Image(region_params.image);
  Map.addLayer(lowtide_image, {bands: ['b3','b2','b1'], min:0, max:2000, gamma:1.5}, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  //  Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);
  Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", false, 0.4);// CR added
  Map.addLayer(lagoons_mask, {color: 'blue'}, "lagoons mask import", true, 0.4);// CR added*/
  //Map.addLayer(ORFtoRS_mask, {}, "ORF_IRF_RCToRS");// CR added*/
  var GCRMNext=ee.Image([param_module.global_extent_mask.gcrmn])
  Map.addLayer(GCRMNext, {}, "GCRMNextmask");// CR added GCRMN_ext
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
 
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 
// CR************************************BENTHIC 2**********************************
// CR************************************BENTHIC 2**********************************
// CR************************************BENTHIC 2**********************************
if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // extra depth cutoff refinement
  man_benthic = man_benthic.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(15)), //(geo_map.eq(14).or
    value: ee.Image(13)
  });
   
  // Rubble on Reef Slope or Shelterled reef slope -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(21).or(geo_map.eq(22))), //sheltered slope or reef slope
    value: ee.Image(13) // rock
  }); 
     // Coral/Algae and Seagrass on Deep Lagoon -> Sand
  man_benthic = man_benthic.where({
    test: man_benthic.eq(15)
                     .and(geo_map.eq(12)),
    value: ee.Image(11)
  });
  // Additional specifically for other regions then French polonesya or Cook Islands
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(12)),
    value: ee.Image(11)
  });
  man_benthic = man_benthic.where({
    test: man_benthic.eq(13)
                     .and((geo_map.eq(12)).or(geo_map.eq(11))),
    value: ee.Image(11)
  });
  // Limited seagrass in this region, or fine small species of halovila
  // Seagrass on Reef Crest or Outer Reef Flat or reef slope or sheltered slope change to coral/algae
  // Seagrass on inner Reef Flat change  rubble
  // Seagrass on shallow lagoon change to BMA
  // Seagrass in generaly does not grow on hard substrate areas.
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(15)),// reef crest
    value: ee.Image(15) // coral algae
  });  
    man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(14)),// outer reef flat
    value: ee.Image(15) // coral algae
  });  
    man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(13)),// inner reeflat
    value: ee.Image(11) //sand
  });  
      man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(11)),// shallow lagoon
    value: ee.Image(18)//BMA Mats
  });  
   // Seagrass on reef slope or sheltered slope change to rock -> rock
  // Seagrass in generaly does not grow on hard substrate areas.
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(21).or(geo_map.eq(22))), //sheltered slope or reef slope
    value: ee.Image(13) // rock
  }); 
   
  // Sand on Reef crest ->  ROCK
  // Sand in generally cannot stay in high energy zone so has to be hard substrate posisble Rock
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(15)),
    value: ee.Image(15)
  }); 
  // CR Sand bright on ORF, -> Coral/Algae as its bright wave on the RC/ORF area and assinged to sand but should be C/A
    var image = ee.Image(region_params.image); 
    man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(14))
                     .and(image.select('b1').gt(1500)),
    value: ee.Image(13)
  });
  // CR Rubble brighter on IRF, -> sand
    man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(13))
                     .and(image.select('b1').gt(1500)),
    value: ee.Image(11)
  });
  // Sand on Reef slope or sheltered slope -> Rubble CR ADDED
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and((geo_map.eq(21)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });  
 /*   // Seagrass to coral within mask areas
  var SG_to_AC_mask = ee.FeatureCollection(region_params.SG_to_AC_mask).geometry();
  var SG_to_ACMmask = ee.Image().byte().paint(ee.Feature(SG_to_AC_mask.dissolve(),{zone: 1}), "zone").clip(SG_to_AC_mask.dissolve());
   man_benthic = man_benthic.where({ 
    test: SG_to_ACMmask.eq(1)
                     .and(man_benthic.eq(14)),
    value: ee.Image(15)
  });  *//*
  
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
  
  */
  
  
  // final smooth for missing data due to depth
  man_benthic = man_benthic.focal_mode(2)
                           .selfMask()
  
  
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(GCRMN_ext, {}, "GCRMN_ext");// CR added GCRMN_ext
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
        

  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    // shallow lagoon > 5m == deep lagoon
    geo_map = geo_map.where({
      test: geo_map.eq(11)
                    .and(depth.gt(vars.shallowlag_depth_cutoff)),
      value: ee.Image(12)
    });
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    geo_map = geo_map.where({
      test: depth.gt(vars.geo_depth_cutoff),
      value: ee.Image(2)
    });
   
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

   // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    clean_map = clean_map.where({
    test: distToLand.lte(vars.dist_to_land_RC)
                     .and(clean_map.eq(15)),
       value: ee.Image(14)
     });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
   // TRF
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        /*// reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();*/
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
