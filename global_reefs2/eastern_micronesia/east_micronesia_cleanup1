/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    imageVisParam2 = {"opacity":1,"bands":["b3","b2","b1"],"min":44.94,"max":2202.06,"gamma":1},
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    East_micro_generalMask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-162.39380775703214, 6.430139945646318],
           [-162.4082273126962, 6.428263545903672],
           [-162.42127357734464, 6.413593273045789],
           [-162.43071495307706, 6.387833982282129],
           [-162.4247068048837, 6.384080864694575],
           [-162.38505302680753, 6.387663386625116],
           [-162.383336413038, 6.385957426927715],
           [-162.38230644477628, 6.384251461545416],
           [-162.37921653999112, 6.383910267786891],
           [-162.3697751642587, 6.382545490479695],
           [-162.35569893134854, 6.38305728239608],
           [-162.34539924873135, 6.388004577882275],
           [-162.34574257148526, 6.392440043521415],
           [-162.3459142328622, 6.397557840687094],
           [-162.34917579902432, 6.402504995893119],
           [-162.3555272699716, 6.40881681397531],
           [-162.35981880439542, 6.4132520988818715],
           [-162.3668569208505, 6.418540272754101],
           [-162.37063347114346, 6.421610800131721],
           [-162.37441002143643, 6.424169558799392],
           [-162.3781865717294, 6.427069469735225],
           [-162.38179146064542, 6.430651689828812]]],
         [[[-162.1166727836962, 5.891482322198418],
           [-162.11718776782706, 5.88781108451787],
           [-162.1152136619921, 5.884737471523485],
           [-162.1159003074999, 5.881834599201709],
           [-162.11435535510734, 5.879017090987982],
           [-162.11220958789542, 5.877309503308631],
           [-162.11195209583, 5.874150452292281],
           [-162.10654476245597, 5.869283771067399],
           [-162.1031115349169, 5.869283771067399],
           [-162.09847667773917, 5.86945453253169],
           [-162.09341266711905, 5.87030833906835],
           [-162.08826282581046, 5.872015948217044],
           [-162.08680370410636, 5.871845187537689],
           [-162.08354213794425, 5.873040511193992],
           [-162.08139637073234, 5.872272089137951],
           [-162.07847812732413, 5.872528229941076],
           [-162.07504489978507, 5.871759807178393],
           [-162.06877925952628, 5.870137577865666],
           [-162.06199863513663, 5.869283771067399],
           [-162.05607631763175, 5.868429962961198],
           [-162.05135562976554, 5.86860072468707],
           [-162.0499823387499, 5.8697106746300385],
           [-162.04517582019523, 5.870393719650082],
           [-162.0441458519335, 5.870564480774268],
           [-162.04629161914542, 5.873125891357009],
           [-162.04474666675284, 5.87526039117838],
           [-162.04440334399894, 5.87654108714369],
           [-162.04260089954093, 5.87816329780324],
           [-162.04191425403312, 5.879443987089091],
           [-162.03933933337882, 5.879785503734157],
           [-162.0390818413134, 5.880980810340893],
           [-162.04191425403312, 5.882603008055827],
           [-162.04406002124503, 5.883542172991121],
           [-162.04594829639151, 5.885505876365675],
           [-162.0471499260302, 5.8859327674856665],
           [-162.0481798942919, 5.886018145670315],
           [-162.04886653979972, 5.8867865487419175],
           [-162.0504114921923, 5.887554950750985],
           [-162.05195644458487, 5.888750240652824],
           [-162.0547888573046, 5.89114081274026],
           [-162.0581362541552, 5.893019112160601],
           [-162.06053951343253, 5.89387288252349],
           [-162.06294277270987, 5.895068158825098],
           [-162.06637600024894, 5.8963488091483285],
           [-162.07032421191886, 5.896519562301424],
           [-162.07392910083487, 5.895665796010446],
           [-162.0753023918505, 5.895153535605266],
           [-162.07684734424308, 5.8953242891262105],
           [-162.0778773125048, 5.895153535605266],
           [-162.07993724902823, 5.893787505546293],
           [-162.08354213794425, 5.892762980795657],
           [-162.08646038135245, 5.893360620463351],
           [-162.09058025439933, 5.893360620463351],
           [-162.09281185229972, 5.893275243407354],
           [-162.09427097400382, 5.894129013376274],
           [-162.0983908470507, 5.8943851441108315],
           [-162.10302570422843, 5.894043636438467],
           [-162.1068022545214, 5.893616751552514],
           [-162.10946300586417, 5.893445997506193],
           [-162.11500660002795, 5.893327564720463]]],
         [[[-160.38141732364602, 4.698744749940885],
           [-160.38382058292336, 4.699001376575035],
           [-160.38630967288918, 4.700027882166781],
           [-160.38862710147805, 4.700712218387957],
           [-160.39257531314797, 4.701396553937043],
           [-160.3950644031138, 4.700968844297627],
           [-160.3968668475718, 4.70105438624653],
           [-160.40004258304543, 4.701482095833415],
           [-160.40364747196145, 4.699856798006478],
           [-160.40879731327004, 4.696606190982795],
           [-160.41128640323586, 4.691901338195756],
           [-160.40982728153176, 4.686768735357086],
           [-160.4031324878306, 4.6824059933053634],
           [-160.40210251956887, 4.681550550495975],
           [-160.39695267826028, 4.678043224044555],
           [-160.39163117557473, 4.675562421555397],
           [-160.38648133426614, 4.673765972889252],
           [-160.38081650882668, 4.67077188154682],
           [-160.37695412784524, 4.669146512321429],
           [-160.3730917468638, 4.668804328846702],
           [-160.3646803393931, 4.668119961396588],
           [-160.35927300601907, 4.668804328846702],
           [-160.3536081805796, 4.671114064061668],
           [-160.35043244510598, 4.674792515548162],
           [-160.34905915409036, 4.679155305066064],
           [-160.3511190906138, 4.684544595751712],
           [-160.35103325992532, 4.687281997337867],
           [-160.35335068851418, 4.6889073244564665],
           [-160.35712723880715, 4.6897627582631936],
           [-160.36124711185403, 4.6907892774482365],
           [-160.36476617008157, 4.691730252042213],
           [-160.36562447696633, 4.692157967347481],
           [-160.37146096378274, 4.693954368767631],
           [-160.37352090030618, 4.694980881788644],
           [-160.37592415958352, 4.696520648488045],
           [-160.3771257892222, 4.697204988152209],
           [-160.3800440326304, 4.698744749940885]]],
         [[[-159.35361517674198, 3.9407006902838777],
           [-159.36940802342167, 3.9341929550800843],
           [-159.38039435154667, 3.927000135978985],
           [-159.38897742039433, 3.9160395305732205],
           [-159.39447058445683, 3.903023625260798],
           [-159.3934406161951, 3.8903500499239425],
           [-159.3814243198084, 3.8739083709019067],
           [-159.36975134617558, 3.8667150357833413],
           [-159.36254156834354, 3.8509579933352738],
           [-159.35567511326542, 3.83485810521471],
           [-159.3440021396326, 3.8208132742611385],
           [-159.33026922947636, 3.8074533436207894],
           [-159.31241644627323, 3.8050553853857942],
           [-159.29799689060917, 3.8071107785674734],
           [-159.2835773349451, 3.809166166842575],
           [-159.2660678744959, 3.8187579138397445],
           [-159.2557681918787, 3.825951653765799],
           [-159.2444385409998, 3.8345155511043982],
           [-159.239975345199, 3.8475325106846956],
           [-159.24134863621464, 3.85917909542893],
           [-159.2447818637537, 3.8670575769359328],
           [-159.25336493260136, 3.8739083709019067],
           [-159.2670978427576, 3.881444180194832],
           [-159.2883838534998, 3.8817867153840617],
           [-159.30349005467167, 3.889322454370839],
           [-159.31481970555058, 3.897885712330151],
           [-159.31859625584354, 3.9105591740202783],
           [-159.32374609715214, 3.9338504412920434],
           [-159.3385089755701, 3.939330644995886],
           [-159.3484653354334, 3.9407006902838777]]],
         [[[-157.48485095398576, 2.047233170101573],
           [-157.49085910217912, 2.045517651099322],
           [-157.49480731384904, 2.043115921414441],
           [-157.49686725037247, 2.037283134378379],
           [-157.4975538958803, 2.0326512002115917],
           [-157.49515063660294, 2.025102834588487],
           [-157.48862750427872, 2.0125793323034333],
           [-157.48416430847794, 2.0024575272623024],
           [-157.48090274231583, 1.994222792279192],
           [-157.4784994830385, 1.9827284058287544],
           [-157.48158938782365, 1.9684889806196941],
           [-157.48038775818497, 1.9654008964225527],
           [-157.48347766297013, 1.9628274885615447],
           [-157.4824476947084, 1.9585384666597998],
           [-157.4850226153627, 1.9556219254937988],
           [-157.49137408630997, 1.9535631875005537],
           [-157.49188907044083, 1.947386958392192],
           [-157.48897082703263, 1.9424116462555678],
           [-157.4934340228334, 1.9364069396844676],
           [-157.49703891174943, 1.9326325418025994],
           [-157.50510699646622, 1.925769978715447],
           [-157.5140333880678, 1.9187358228695126],
           [-157.5202131976381, 1.9151329513475637],
           [-157.52931125061662, 1.9105006768327872],
           [-157.53308780090958, 1.9079271855912736],
           [-157.53325946228654, 1.9056968234004303],
           [-157.53325946228654, 1.9019223577289828],
           [-157.53617770569474, 1.9002066887841245],
           [-157.5373793353334, 1.8952312392109747],
           [-157.5418425311342, 1.8909420470681577],
           [-157.5505972613588, 1.8847655917650443],
           [-157.5615835894838, 1.8768734225579986],
           [-157.56227023499162, 1.8727557549074538],
           [-157.5593519915834, 1.8682949373676134],
           [-157.55471713440568, 1.8617752605922921],
           [-157.54939563172013, 1.8538829880284784],
           [-157.538924287726, 1.845990680276636],
           [-157.53566272156388, 1.845990680276636],
           [-157.52948291199357, 1.8492505507778356],
           [-157.52141482727677, 1.8525104152907632],
           [-157.5143767108217, 1.8547408454491312],
           [-157.50579364197404, 1.8561134164569808],
           [-157.49738223450333, 1.8545692739982718],
           [-157.4894858111635, 1.8516525567895867],
           [-157.48536593811662, 1.8485642627485566],
           [-157.48124606506974, 1.8439318116163448],
           [-157.4784994830385, 1.837755191355175],
           [-157.47523791687638, 1.830205959807306],
           [-157.47180468933732, 1.8195683523453314],
           [-157.4681998004213, 1.8128769219335183],
           [-157.46322162048966, 1.808415954578484],
           [-157.45893008606583, 1.803783399949318],
           [-157.45378024475724, 1.8005234470264229],
           [-157.4488020648256, 1.7965771804248312],
           [-157.4433089007631, 1.7921161731319406],
           [-157.4352408160463, 1.786282531816957],
           [-157.4271727313295, 1.7837088606385647],
           [-157.41927630798966, 1.7821646562030964],
           [-157.40691668884904, 1.780620450472697],
           [-157.40108020203263, 1.7790762434484606],
           [-157.39627368347794, 1.7777036138971969],
           [-157.38494403259904, 1.773928877371074],
           [-157.37756259339005, 1.7754730886999748],
           [-157.37086779968888, 1.7766741410639306],
           [-157.36777789490372, 1.7766741410639306],
           [-157.3657179583803, 1.7759878255229808],
           [-157.36228473084122, 1.7744436146239893],
           [-157.35661990540177, 1.7735857191228988],
           [-157.35232837097794, 1.7730709816313146],
           [-157.34838015930802, 1.7718699269276534],
           [-157.3418570269838, 1.7684383377702875],
           [-157.3367071856752, 1.7658646417372725],
           [-157.32881076233537, 1.7631193620402719],
           [-157.3217726458803, 1.7605456586469317],
           [-157.31387622254044, 1.7578003711107162],
           [-157.30769641297013, 1.7528245271666096],
           [-157.30443484680802, 1.749221321570418],
           [-157.30203158753068, 1.7463044357805668],
           [-157.2953367938295, 1.7425296356859568],
           [-157.29001529114396, 1.7387548280255072],
           [-157.28744037048966, 1.7365242563128889],
           [-157.2840071429506, 1.7354947607881461],
           [-157.2781706561342, 1.7306904409339081],
           [-157.2730208148256, 1.727945109835645],
           [-157.2682142962709, 1.7265724427980076],
           [-157.2646094073549, 1.7239986894312072],
           [-157.2587729205385, 1.7210817647423835],
           [-157.25465304749162, 1.718508003958237],
           [-157.25207812683732, 1.7147331485350032],
           [-157.2484732379213, 1.7107867008140152],
           [-157.24469668762833, 1.706668659753794],
           [-157.2407484759584, 1.70220743865398],
           [-157.2378302325502, 1.7006631674052355],
           [-157.2323370684877, 1.6987757230897682],
           [-157.22461230652482, 1.6972314490963323],
           [-157.2174025286928, 1.6946576563671525],
           [-157.20950610535294, 1.691740687139126],
           [-157.20178134339005, 1.6936281383173908],
           [-157.19045169251115, 1.6972314490963323],
           [-157.17843539612443, 1.6967166908243905],
           [-157.1719122638002, 1.6974030351565226],
           [-157.16693408386857, 1.7013495103350993],
           [-157.16453082459122, 1.7063254892670734],
           [-157.1631575335756, 1.7123309639336308],
           [-157.1635008563295, 1.7205670128633057],
           [-157.16332919495255, 1.7265724427980076],
           [-157.1638441790834, 1.733778933668222],
           [-157.16556079285294, 1.7408138149590497],
           [-157.16762072937638, 1.7512802970450836],
           [-157.17139727966935, 1.7586582738997296],
           [-157.17774875061662, 1.7643204224062998],
           [-157.1844435443178, 1.7667225408112202],
           [-157.1913099993959, 1.7675804394889596],
           [-157.19886309998185, 1.7698109741954042],
           [-157.20366961853654, 1.771183609604423],
           [-157.2103644122377, 1.7734141399749572],
           [-157.2151709307924, 1.7761594044321265],
           [-157.22117907898576, 1.7777036138971969],
           [-157.22787387268693, 1.7785615074863923],
           [-157.23336703674943, 1.7794194006767081],
           [-157.23886020081193, 1.7833657042093107],
           [-157.24383838074357, 1.7861109538505022],
           [-157.2484732379213, 1.791086708366202],
           [-157.25345141785294, 1.7940035236990828],
           [-157.26100451843888, 1.795204563955354],
           [-157.26649768250138, 1.7979497958628796],
           [-157.27147586243302, 1.8012097533898312],
           [-157.27542407410294, 1.8041265525489552],
           [-157.27954394714982, 1.8054991623000574],
           [-157.28847033875138, 1.8067001949819903],
           [-157.2975683917299, 1.8104748639528012],
           [-157.3059797992006, 1.8147642509682418],
           [-157.31250293152482, 1.8193967775163031],
           [-157.31645114319474, 1.8252303125375438],
           [-157.32125766174943, 1.8284902209272154],
           [-157.32657916443497, 1.828833368834504],
           [-157.3308706988588, 1.8310638286318122],
           [-157.33533389465958, 1.838098337486391],
           [-157.33979709046037, 1.8435886666079793],
           [-157.34134204285294, 1.8523388436237531],
           [-157.34237201111466, 1.8574859863992557],
           [-157.3422003497377, 1.865206672432806],
           [-157.34357364075333, 1.8730988942481728],
           [-157.34323031799943, 1.8804763737982224],
           [-157.34271533386857, 1.8926577251987378],
           [-157.34460360901505, 1.8991772865989927],
           [-157.3451185931459, 1.9058683898254027],
           [-157.3422003497377, 1.9117016380929477],
           [-157.33842379944474, 1.9190789530950545],
           [-157.3360205401674, 1.9269709292535504],
           [-157.33224398987443, 1.9353775592769629],
           [-157.32657916443497, 1.9413822695001666],
           [-157.32125766174943, 1.9427547717013467],
           [-157.3169661273256, 1.9449850853993413],
           [-157.31284625427872, 1.9482447693458949],
           [-157.308211397101, 1.9487594557084342],
           [-157.30426318543107, 1.9528769409419673],
           [-157.30151660339982, 1.959739393900035],
           [-157.30151660339982, 1.9672880596667415],
           [-157.30494983093888, 1.9751798100769722],
           [-157.31027133362443, 1.983414640100947],
           [-157.31576449768693, 1.987360481639331],
           [-157.32142932312638, 1.9894191778303554],
           [-157.32812411682755, 1.989762293612464],
           [-157.3437453021303, 1.9909631982875668],
           [-157.35353000061662, 1.9919925444555355],
           [-157.363143037726, 1.9940512348615633],
           [-157.36983783142716, 1.9961099226921812],
           [-157.37601764099747, 1.9971392656408817],
           [-157.3832274188295, 2.001599744296018],
           [-157.38975055115372, 2.0067464353547937],
           [-157.39558703797013, 2.0096628864336696],
           [-157.40056521790177, 2.0124077768083737],
           [-157.4052000750795, 2.015324217768519],
           [-157.41052157776505, 2.020299310875494],
           [-157.4161864032045, 2.0257890511001313],
           [-157.41996295349747, 2.0333374135200866],
           [-157.42322451965958, 2.0386555567599776],
           [-157.42665774719865, 2.0412288455708136],
           [-157.43438250916154, 2.0426012645859726],
           [-157.4403906573549, 2.0448314429846595],
           [-157.44742877380997, 2.047233170101573],
           [-157.454638551642, 2.049463342059306],
           [-157.45790011780412, 2.048777135633786],
           [-157.46631152527482, 2.04774782544429],
           [-157.47678286926896, 2.048090928914268]]],
         [[[-159.99786174951313, -0.36371589074600214],
           [-160.00438488183735, -0.36474583819633216],
           [-160.0064448183608, -0.3689514557250799],
           [-160.00953472314595, -0.37195546702987337],
           [-160.01245296655415, -0.37530279270754374],
           [-160.01382625756978, -0.37933674759035463],
           [-160.01185215173481, -0.38062417960488065],
           [-160.00695980249165, -0.3805383508098934],
           [-160.0045565432143, -0.38113915235691675],
           [-159.9994067019057, -0.3805383508098934],
           [-159.99365604577778, -0.380452522014041],
           [-159.98893535791157, -0.38036669321733624],
           [-159.98584545312642, -0.3801950356213568],
           [-159.98455799279927, -0.3791650899739179],
           [-159.98455799279927, -0.37530279270754374],
           [-159.9855021303725, -0.37135466485045393],
           [-159.98584545312642, -0.36843648225647757],
           [-159.98687542138813, -0.3659474434060712],
           [-159.99048031030415, -0.3649174960932811],
           [-159.9954584902358, -0.363887548662556]]],
         [[[-171.71065687603388, -2.765757231857675],
           [-171.71632170147333, -2.763871154761651],
           [-171.72095655865107, -2.76541430897234],
           [-171.72250151104365, -2.771415445141594],
           [-171.72250151104365, -2.778273849216416],
           [-171.7230164951745, -2.7844463788237848],
           [-171.72404646343622, -2.788904296764055],
           [-171.72061323589716, -2.793876569916825],
           [-171.72112822002802, -2.7959340560984147],
           [-171.72026991314326, -2.800049017634134],
           [-171.71906828350458, -2.8058785217284594],
           [-171.71632170147333, -2.8113650872638036],
           [-171.713918442196, -2.819766340722473],
           [-171.71288847393427, -2.823195406340494],
           [-171.70808195537958, -2.832110929553287],
           [-171.7032754368249, -2.835197056225011],
           [-171.69537901348505, -2.8338254453867098],
           [-171.6890275425378, -2.832796736191315],
           [-171.68061613506708, -2.8336539939176197],
           [-171.6706597752038, -2.83536850746547],
           [-171.6655099338952, -2.8375973712786955],
           [-171.65881514019404, -2.8398262307943045],
           [-171.6519486851159, -2.8439410370594915],
           [-171.64525389141474, -2.84891307504173],
           [-171.6402757114831, -2.853885091552642],
           [-171.6351258701745, -2.8602286675929554],
           [-171.62980436748896, -2.8641719539370274],
           [-171.6241395420495, -2.8679437803438197],
           [-171.61950468487177, -2.8710298108796777],
           [-171.61692976421747, -2.8706869190093953],
           [-171.61469816631708, -2.8669151016476295],
           [-171.61469816631708, -2.862971824747057],
           [-171.6153848118249, -2.858514191039116],
           [-171.61881803936396, -2.852170605528345],
           [-171.62070631451044, -2.848227277975047],
           [-171.62396788067255, -2.84462683667703],
           [-171.62619947857294, -2.836740116474328],
           [-171.62619947857294, -2.829024794658239],
           [-171.629632706112, -2.8225095940261298],
           [-171.63358091778193, -2.816337264996307],
           [-171.63358091778193, -2.8139369059802064],
           [-171.6347825474206, -2.81033635818965],
           [-171.63855909771357, -2.803306685266622],
           [-171.6454255527917, -2.800049017634134],
           [-171.65366529888544, -2.7976486251602015],
           [-171.66310667461786, -2.7916476224846543],
           [-171.67186140484247, -2.7839320025907837],
           [-171.68765425152216, -2.7733015102280474],
           [-171.69692396587763, -2.7678147670870823],
           [-171.70344709820185, -2.7667859999187248],
           [-171.70894026226435, -2.765585770427405]]],
         [[[-171.08728495664164, -3.102954041094699],
           [-171.0896023852305, -3.1043253178123345],
           [-171.0918339831309, -3.106896456859888],
           [-171.09269229001566, -3.110410336762425],
           [-171.09234896726176, -3.1148669480852105],
           [-171.09166232175394, -3.1202662788368296],
           [-171.09200564450785, -3.1257512848503772],
           [-171.0925206286387, -3.130293533752325],
           [-171.0921773058848, -3.1356070829443663],
           [-171.09200564450785, -3.1392922705656217],
           [-171.09166232175394, -3.1434059530195078],
           [-171.09046069211527, -3.146148398978975],
           [-171.08934489316508, -3.147776722853993],
           [-171.08659831113383, -3.147348216817781],
           [-171.08170596189066, -3.1464055029178466],
           [-171.0793885333018, -3.1458912949766704],
           [-171.07664195127055, -3.1452056839939115],
           [-171.07552615232035, -3.1434916545649045],
           [-171.07518282956644, -3.140492096288934],
           [-171.07638445920512, -3.1379638904788445],
           [-171.07719985074564, -3.136206998093535],
           [-171.07814398831889, -3.133293121289106],
           [-171.07908812589213, -3.130936303233455],
           [-171.0797318560557, -3.1282366687630376],
           [-171.08046141690775, -3.1246371453229393],
           [-171.08101931638285, -3.1216375330256927],
           [-171.08149138516947, -3.1194520958156784],
           [-171.08179179257914, -3.1173095059054194],
           [-171.08204928464457, -3.1152526154862876],
           [-171.08183470792338, -3.1112245267765855],
           [-171.08149138516947, -3.10925332881869],
           [-171.08127680844828, -3.1064679341200523],
           [-171.0820921999888, -3.1045824319987623],
           [-171.083207998939, -3.103553974877631],
           [-171.08526793546244, -3.1032540080287276]]],
         [[[-171.5199048590171, -3.5797569007581185],
           [-171.52054858918066, -3.580356543101647],
           [-171.5212781500327, -3.581769984214762],
           [-171.52089191193457, -3.583483243243822],
           [-171.5194757055747, -3.585068004989357],
           [-171.51861739868994, -3.586395776229395],
           [-171.51763034577246, -3.588066195372649],
           [-171.5169866156089, -3.588965650569633],
           [-171.51651454682226, -3.5904219094869556],
           [-171.51518417115088, -3.5902505850289654],
           [-171.51428294892187, -3.589351131097232],
           [-171.51368213410254, -3.5877663767768935],
           [-171.51351047272559, -3.5854963185032602],
           [-171.5134246420371, -3.583611737541685],
           [-171.51466918702002, -3.5824124567265345],
           [-171.51561332459326, -3.5813845004912532],
           [-171.5169866156089, -3.580442206261526],
           [-171.51805949921484, -3.5797140691471365],
           [-171.51926112885351, -3.5799282271820476]]],
         [[[-171.24706714340923, -4.439611434234609],
           [-171.25256030747173, -4.443376643283005],
           [-171.2595984239268, -4.448254271869432],
           [-171.26208751389262, -4.4502224286454055],
           [-171.26337497421977, -4.454073154943255],
           [-171.26260249802348, -4.456982579221731],
           [-171.25865428635356, -4.461945688174106],
           [-171.25625102707622, -4.465026221687107],
           [-171.25333278366801, -4.466823193597587],
           [-171.2504145402598, -4.467935602574053],
           [-171.24689548203227, -4.46767889296002],
           [-171.24080150315044, -4.467935602574053],
           [-171.23513667771098, -4.468106742266816],
           [-171.23015849777934, -4.46767889296002],
           [-171.22689693161723, -4.466138633388825],
           [-171.22475116440532, -4.463229245375707],
           [-171.22560947129008, -4.4601487043223615],
           [-171.22895686814067, -4.454672155000417],
           [-171.23058765122173, -4.452875153365594],
           [-171.23264758774516, -4.449537852972177],
           [-171.23479335495708, -4.445772675394872],
           [-171.23668163010356, -4.44226419715551],
           [-171.23822658249614, -4.44029601912735],
           [-171.24114482590434, -4.438670128970156],
           [-171.24329059311626, -4.437728822505272]]],
         [[[-172.1745685553021, -4.488831717300405],
           [-172.18280830139585, -4.4936234766439815],
           [-172.19516792053648, -4.499441999217603],
           [-172.20615424866148, -4.503549163631015],
           [-172.21284904236265, -4.506458391061425],
           [-172.22126044983335, -4.51107890481277],
           [-172.22538032288023, -4.514843746135129],
           [-172.2243503546185, -4.523229004306197],
           [-172.21937217468687, -4.527849411212711],
           [-172.21353568787046, -4.532640913135117],
           [-172.19825782532163, -4.541197087538099],
           [-172.1910480474896, -4.54307943229445],
           [-172.18418159241148, -4.539999229226577],
           [-172.1768001532025, -4.533154286457638],
           [-172.16976203674741, -4.52750715986076],
           [-172.160320661015, -4.522886750769816],
           [-172.15173759216734, -4.5201487166577445],
           [-172.1464160894818, -4.518950823480625],
           [-172.14006461853452, -4.518608567923588],
           [-172.1357730841107, -4.514330359831961],
           [-172.13457145447202, -4.50560273714305],
           [-172.13336982483335, -4.498415204493386],
           [-172.13336982483335, -4.495163678317529],
           [-172.14057960266538, -4.492596673720523],
           [-172.14813270325132, -4.4883183126470145],
           [-172.1551708197064, -4.485580148397791],
           [-172.16341056580015, -4.485237877144702]]],
         [[[-174.54026315861512, -4.653841925876198],
           [-174.54318140202332, -4.6542696643014265],
           [-174.54378221684266, -4.658632581385232],
           [-174.5440397089081, -4.665134133075652],
           [-174.54266641789246, -4.672662170343162],
           [-174.53940485173035, -4.6757417986591046],
           [-174.53803156071473, -4.679591315014705],
           [-174.53331087284852, -4.682328735988288],
           [-174.52653024845887, -4.683868530578965],
           [-174.51974962406922, -4.684980602341523],
           [-174.51459978276063, -4.686263759869507],
           [-174.50910661869813, -4.688744524410157],
           [-174.50430010014344, -4.691738538847427],
           [-174.498635274704, -4.695844594908852],
           [-174.49477289372254, -4.698410867674361],
           [-174.49288461857606, -4.697640986836382],
           [-174.49176881962586, -4.694561454985136],
           [-174.4920263116913, -4.691652995755941],
           [-174.49477289372254, -4.6866914785220555],
           [-174.49829195195008, -4.681558837421897],
           [-174.50455759220887, -4.675998433741113],
           [-174.51562975102235, -4.668812615923395],
           [-174.52335451298524, -4.665390772039401],
           [-174.53365419560242, -4.657691562342418],
           [-174.53914735966492, -4.654440759598735]]],
         [[[-176.4799364858503, 0.2016873750653375],
           [-176.48251140650459, 0.20018534725385728],
           [-176.4843138509626, 0.19821125334969134],
           [-176.48457134302802, 0.1971812912191804],
           [-176.4859875493879, 0.19482096109698707],
           [-176.48714626368232, 0.19263229105177118],
           [-176.48663127955146, 0.191516498371332],
           [-176.48547256525703, 0.19044362072549606],
           [-176.4835413747663, 0.1898857243232302],
           [-176.48143852289863, 0.1895853185607068],
           [-176.47924984034248, 0.1894565732323244],
           [-176.47620285090156, 0.1894994883418997],
           [-176.47358501490302, 0.18967114877910676],
           [-176.47118175562568, 0.19130192284752595],
           [-176.47023761805244, 0.1928468665588857],
           [-176.4698513799543, 0.19464930071150854],
           [-176.47066677149482, 0.196709225221377],
           [-176.4718684011335, 0.1985545740456509],
           [-176.4738854223127, 0.20001368692375857],
           [-176.476460342967, 0.20070032823333955],
           [-176.4783915334577, 0.20112947903720665]]],
         [[[-176.62133231480834, 0.8197214985214419],
           [-176.6226197751355, 0.818863279384791],
           [-176.62399306615112, 0.8169751966376894],
           [-176.6233064206433, 0.8150012909989389],
           [-176.62201896031615, 0.8113109430812322],
           [-176.620731499989, 0.8071056587935873],
           [-176.62047400792358, 0.8029003701577933],
           [-176.61952987035033, 0.7988667218915475],
           [-176.6174699338269, 0.7962062283135216],
           [-176.6148950131726, 0.7956054714613192],
           [-176.61257758458373, 0.79843761014049],
           [-176.6119767697644, 0.8043593483389394],
           [-176.6130925687146, 0.8093370346728039],
           [-176.61789908726928, 0.817232662519129],
           [-176.62055983861205, 0.818863279384791]]],
         [[[177.14153170233197, -7.187083262572337],
           [177.13895678167768, -7.190659813549205],
           [177.13895678167768, -7.196961287205275],
           [177.14136004095502, -7.206839096794282],
           [177.14273333197065, -7.2160354845726244],
           [177.14239000921674, -7.227104962709561],
           [177.1425616705937, -7.239366221904088],
           [177.1432483161015, -7.246859049591837],
           [177.14942812567182, -7.252478588596665],
           [177.16041445379682, -7.254862614260152],
           [177.1655642951054, -7.251116282549389],
           [177.1674525702519, -7.239706807682094],
           [177.1655642951054, -7.226253474014222],
           [177.16401934271283, -7.212970042733778],
           [177.16213106756635, -7.201048682788331],
           [177.15766787176557, -7.193384785864817],
           [177.1545779669804, -7.189637944715094],
           [177.14719652777143, -7.1864020115748355]]],
         [[[177.33015006392094, -6.105314349244797],
           [177.33075087874028, -6.10736259806391],
           [177.33298247664067, -6.110264270478927],
           [177.33658736555668, -6.113251269768243],
           [177.3398489317188, -6.114787434337564],
           [177.3471445402393, -6.113934010121477],
           [177.3511785825977, -6.112995241911132],
           [177.353753503252, -6.111117700548685],
           [177.35358184187504, -6.107618628615486],
           [177.35220855085942, -6.104716941863788],
           [177.34997695295903, -6.103692813374999],
           [177.34465545027348, -6.103351436777059],
           [177.34079306929203, -6.103010059961619],
           [177.33753150312992, -6.102327305678319],
           [177.33418410627934, -6.102839371472343]]],
         [[[176.05593492393052, -5.64139370594638],
           [176.0571365535692, -5.64668941050066],
           [176.05988313560044, -5.649593486002914],
           [176.06486131553208, -5.6518142397976545],
           [176.07086946372544, -5.654718289598737],
           [176.07790758018052, -5.657793149973157],
           [176.08408738975083, -5.660355521130815],
           [176.0991935909227, -5.66582187496691],
           [176.1117248714403, -5.674021308692819],
           [176.12511445884263, -5.688199220996726],
           [176.13249589805162, -5.701351911533384],
           [176.13833238486802, -5.70510976778034],
           [176.14090730552232, -5.702376783859923],
           [176.13610078696763, -5.694348568334456],
           [176.13283922080552, -5.683928802219501],
           [176.12786104087388, -5.66838421051963],
           [176.11876298789537, -5.6562557218289005],
           [176.109149950786, -5.652497546943989],
           [176.09679033164537, -5.649081003148619],
           [176.07413102988755, -5.642931173541831],
           [176.05868150596177, -5.639514573351002]]],
         [[[175.95963936779754, -1.2712349091195636],
           [175.95105629894988, -1.2671160468012446],
           [175.9472797486569, -1.2787861396224376],
           [175.94041329357879, -1.2887400004118703],
           [175.9472797486569, -1.3004099945326655],
           [175.95517617199675, -1.3199742751427814],
           [175.96135598156707, -1.3343899624857631],
           [175.9692524049069, -1.3505217028695873],
           [175.98058205578582, -1.354297201160655],
           [175.99946480725066, -1.3591023722951878],
           [176.01113778088347, -1.3687126858473562],
           [176.02143746350066, -1.377636513951181],
           [176.02624398205535, -1.375233948125433],
           [176.03002053234832, -1.3666533361763995],
           [176.02281075451629, -1.3566997879209413],
           [176.01422768566863, -1.3440003738340978],
           [176.00564461682097, -1.3347331921106742],
           [175.9963749024655, -1.3172284204312135],
           [175.98229866955535, -1.2925155926199596],
           [175.9692524049069, -1.2811887992207465]]],
         [[[174.69188957769967, -1.1919164820908923],
           [174.69738274176217, -1.2262411129722934],
           [174.72347527105904, -1.2619382620011073],
           [174.74682121832467, -1.3223476985279476],
           [174.77428703863717, -1.3607893059863008],
           [174.8086193140278, -1.4033489417342613],
           [174.82372551519967, -1.4253149038152293],
           [174.8580577905903, -1.4747375474788649],
           [174.88964348394967, -1.5186678660688473],
           [174.91985588629342, -1.546123863361994],
           [174.95281487066842, -1.5447510718790354],
           [175.01598625738717, -1.5365143043816407],
           [175.0667980249653, -1.5365143043816407],
           [175.07915764410592, -1.5282775051220312],
           [175.07641106207467, -1.4967028167827605],
           [175.0777843530903, -1.4719918735065405],
           [175.05993156988717, -1.4678733562105313],
           [175.0448253687153, -1.4582634530549259],
           [175.02971916754342, -1.4390435239174109],
           [175.0063732202778, -1.4321792241466298],
           [174.98714714605904, -1.4280606344087678],
           [174.97204094488717, -1.422569169947755],
           [174.94182854254342, -1.404721820441922],
           [174.90337639410592, -1.386874334608788],
           [174.87865715582467, -1.3566705913295585],
           [174.84432488043404, -1.3333310764530761],
           [174.81823235113717, -1.3196018464368895],
           [174.80037956793404, -1.3141101331671778],
           [174.80037956793404, -1.2839054956990956],
           [174.7921398218403, -1.2454627147961226],
           [174.7646740015278, -1.2083923590664094],
           [174.7317150171528, -1.1699484930214086],
           [174.70562248785592, -1.1397422278417983],
           [174.6657970484028, -1.1081626119922345],
           [174.65618401129342, -1.1109086790480782],
           [174.64107781012154, -1.1315041001811101]]],
         [[[174.23224276202092, -0.6688862212819839],
           [174.25078219073185, -0.6778119964551911],
           [174.2748147835053, -0.6606470297854475],
           [174.29266756670842, -0.6469150136820467],
           [174.31464022295842, -0.6537810264281949],
           [174.32562655108342, -0.6661398256449828],
           [174.3407327522553, -0.694976902287819],
           [174.33317965166935, -0.7114551532217427],
           [174.3194467415131, -0.7450980646784982],
           [174.30708712237248, -0.7670688076816329],
           [174.31738680498967, -0.7842333723316056],
           [174.34004610674748, -0.7773675548317706],
           [174.37163180010685, -0.7691285591050794],
           [174.38811129229435, -0.7636358864407548],
           [174.39703768389592, -0.7629493018631983],
           [174.42175692217717, -0.7574566213067853],
           [174.42725008623967, -0.7718748927895953],
           [174.44372957842717, -0.7869796961837165],
           [174.44716280596623, -0.8075770670022899],
           [174.46295565264592, -0.8165025620994522],
           [174.47668856280217, -0.8075770670022899],
           [174.47668856280217, -0.7821736282596676],
           [174.46982210772404, -0.749217587435002],
           [174.4567758430756, -0.7245003935418377],
           [174.4512826790131, -0.708022189084978],
           [174.45814913409123, -0.6853645626077678],
           [174.44922274248967, -0.6524078246269147],
           [174.43617647784123, -0.6373025802518003],
           [174.4121438850678, -0.6249437109493272],
           [174.39429110186467, -0.6022857087863848],
           [174.37094515459904, -0.5810008330076134],
           [174.35515230791935, -0.5713882820032269],
           [174.32631319659123, -0.5693284475434363],
           [174.30708712237248, -0.5562828123196416],
           [174.28786104815373, -0.5446103773900405],
           [174.27412813799748, -0.5459836062113794],
           [174.24666231768498, -0.5425505335716839],
           [174.2315561165131, -0.5253851414006432],
           [174.21782320635685, -0.5315646880952514],
           [174.1931039680756, -0.5404906890520533],
           [174.17937105791935, -0.5761945595327629],
           [174.1704446663178, -0.5981660618057735],
           [174.16975802080998, -0.6118982062617306],
           [174.1869241585053, -0.6304365453745384],
           [174.20546358721623, -0.6503480212225689],
           [174.21644991534123, -0.6606470297854475]]],
         [[[169.53547048183066, -0.8447057499647711],
           [169.53032064052206, -0.8445341072392462],
           [169.5275740584908, -0.8458214274958235],
           [169.525084968525, -0.8471087473253794],
           [169.5221667251168, -0.8510565254665258],
           [169.5210509261666, -0.8531162341981884],
           [169.52182340236288, -0.8562916163317418],
           [169.52371167750937, -0.8606684900942968],
           [169.52559995265585, -0.8646162542783804],
           [169.5276598891793, -0.8652170006426402],
           [169.53521298976523, -0.864702075193378],
           [169.53993367763144, -0.8696796849375902],
           [169.54062032313925, -0.8707953551879585],
           [169.5422511062203, -0.873541619011947],
           [169.5437102279244, -0.873541619011947],
           [169.5459418258248, -0.8704520720691455],
           [169.5481734237252, -0.8646162542783804],
           [169.54946088405234, -0.8592095327302754],
           [169.54860257716757, -0.8534595188796841],
           [169.54611348720175, -0.8489109943681331],
           [169.54207944484335, -0.8462505341531462],
           [169.53701543422324, -0.8448773926827137]]]]),
    region_extentFull = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[151.16206487195154, 25.324115068106657],
          [151.16206487195154, -18.81277174346313],
          [219.18940862195151, -18.81277174346313],
          [219.18940862195151, 25.324115068106657]]], null, false),
    mid_mask = /* color: #d63000 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                171.27516731782526,
                7.210937922107024
              ],
              [
                171.25250801606745,
                7.184369771927195
              ],
              [
                171.3046930746612,
                7.168700647298676
              ],
              [
                171.3050363974151,
                7.194929094809317
              ],
              [
                171.28890022798151,
                7.220134226618266
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -160.4177880754486,
                4.70566941539675
              ],
              [
                -160.4248261919037,
                4.703958585759412
              ],
              [
                -160.42860274219666,
                4.696430885438072
              ],
              [
                -160.4284310808197,
                4.687876581909195
              ],
              [
                -160.42448286914978,
                4.684283743185293
              ],
              [
                -160.4171014299408,
                4.684797006990706
              ],
              [
                -160.4141831865326,
                4.6885609300481255
              ],
              [
                -160.41401152515564,
                4.691982660685175
              ],
              [
                -160.41366820240174,
                4.696430885438072
              ],
              [
                -160.41315321827088,
                4.698997156045828
              ],
              [
                -160.41074995899353,
                4.703616419327483
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    sg_coral = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-172.17245763309026, -4.4832248407736515],
           [-172.1939153052094, -4.494348605019315],
           [-172.2268742895844, -4.506156722852885],
           [-172.2301358557465, -4.511290627338481],
           [-172.2261876440766, -4.518135776853309],
           [-172.19494527347112, -4.502562968139387],
           [-172.17245763309026, -4.492637267712219],
           [-172.1583814001801, -4.4887011766667895],
           [-172.14344686038518, -4.494177471469373],
           [-172.13623708255315, -4.49469087199864],
           [-172.12919896609807, -4.490925926388897],
           [-172.1415585852387, -4.486647555519497],
           [-172.15340322024846, -4.48151347738812],
           [-172.16696446902776, -4.482026886824504]]],
         [[[177.1437460712666, -7.2212430584342195],
           [177.13808124582715, -7.233674771908212],
           [177.13662212412305, -7.242870613668758],
           [177.14091365854688, -7.250107949827973],
           [177.15164249460645, -7.256153165010114],
           [177.1602255634541, -7.25751545581285],
           [177.16400211374707, -7.255727448288438],
           [177.16932361643262, -7.246446723710982],
           [177.1682936481709, -7.237080661082388],
           [177.1660620502705, -7.233589624349551],
           [177.16297214548536, -7.234100509460574],
           [177.1631438068623, -7.247468464225157],
           [177.15945308725782, -7.251555403107557],
           [177.14717929880567, -7.248319912883621],
           [177.14537685434766, -7.242444884393001],
           [177.14434688608594, -7.236314338259332],
           [177.14537685434766, -7.230609449679593],
           [177.14657848398633, -7.2265223210106075],
           [177.14426105539746, -7.223286651261597]]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

///////////////////////////////
// Global coral atlas project - East_micro
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Rodney Borrego (rodbio2008@gmail.com)...Note: previous geometries for geo 3 are in version saved 21/04 15:58. I removed geoms as the script crashed.
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export



// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.eastern_micronesia;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

//Map.centerObject(geometry, 7)



var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 8000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF - not used for Indo
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1350, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 1000, //depth in centimetres
  input_bands: ['b1_p', 'b2_p', 'b3_p', 'depth_stdDev_p', 'b1_savg_p', 'b2_savg_p'],
  //############
  // Clean-up stage selection
  cleanup_stage: 2, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  //if the global extend + depth cleanup be applied?
  global_extent_clean: true,
  global_depth_thresh: 500, //this threshold will be adding to the global extent (above 5 m will be added to the global extent)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: false,
  
  // export options
  do_export: true, // export the results?
  
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset (not working when there is dateline)
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry(); //need to merge the geom!
Map.addLayer(region_extent, {}, "Extent_region", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  //var depth = ee.ImageCollection(region_params.pixels).mosaic().select('depth');
  
  var depth = ee.ImageCollection(region_params.pixels).mosaic().select('depth').unmask(9999,false)

  var man_geo = ee.ImageCollection(region_params.geo_map_clean2).mosaic(); // use this when testing for a small area
  

  // To clean deep water using ASU neural network layer + -5 m
  // currently uses GCRMN extent + bathymetry threhold < vars.global_depth_thresh
  if (vars.global_extent_clean) {
    var blanket_mask = ee.Image([param_module.global_extent_mask.gcrmn]).unmask(0, false)
              .eq(1) // extent according to global extent layer
              .add(depth.lt(vars.global_depth_thresh)) // combine with areas less than depth thrshold
              .eq(0) // get leftovers
              .selfMask().connectedPixelCount(25, true).gte(25)
    
  Map.addLayer(blanket_mask, {}, "blank_mask")
   
    man_geo = man_geo.where({
      test: blanket_mask.eq(1),
      value: ee.Image(0)
    });
  }
 
  // import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****

  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  // the "MID MASK" CLEAN
  man_geo = man_geo.where({
  test: midmask.eq(1),
 value: ee.Image(0)
  });
  
  
  //************************************* START Import AND APPLY Lagoons mask Chris SCS************************************START
  // import the lagoon mask from asset ****only use ee.FC if  lagoons mask created in map viewer****
  var lagoons_mask = ee.FeatureCollection(region_params.lagoons_mask).geometry();
  Map.addLayer(lagoons_mask)
  
  var lagoonsmask = ee.Image().byte().paint(ee.Feature(lagoons_mask.dissolve(),{zone: 1}), "zone").clip(lagoons_mask.dissolve());

  
  // RC within Lagoon ORF
man_geo = man_geo.where({
test: lagoonsmask.eq(1)
             .and(man_geo.eq(15)),
  value: ee.Image(14)
});
// Reef slope, sheltered slope (within lagoon mask) -> Back Reef Slope
 man_geo = man_geo.where({
  test: lagoonsmask.eq(1)
                    .and(man_geo.eq(21).or(man_geo.eq(22))),
    value: ee.Image(24)
 });    
  //************************************* END IMPORT AND APPLY Lagoons mask Chris SCS************************************END
  
  //*********************START CREATING and APPLYING REEF OUTINE BUFFER FROM  reef (lagoon) mask Chris SCS**************START
  // in map viewer manual digitised reef top areas with lagoon in it. Tried to use CNN layer but to many artefacts and manual took 3 hr
  // creatimg a buffer around lagoon_mask

  var lagoon_buffered = lagoons_mask.buffer(1000); // buffer 1000 m wide around reef mask
  var reef_band_mask = lagoon_buffered.difference(lagoons_mask);//substract buffered lagoon mask - lagoon mask resulting in band around reef of 1000 m
  var reefbandmask = ee.Image().byte().paint(ee.Feature(reef_band_mask.dissolve(),{zone: 1}), "zone").clip(reef_band_mask.dissolve()); // paint it as image

  // BRS, DL and SL should not be present on outside of reef on within reefbandmask  -> Reef Slope
  man_geo = man_geo.where({
   test: reefbandmask.eq(1)
                      .and(man_geo.eq(24).or(man_geo.eq(12)).or(man_geo.eq(11))),
    value: ee.Image(22)
 });    
  // IRF on within reefbandmask  -> ORF as RC would get artefacts
   man_geo = man_geo.where({
  test: reefbandmask.eq(1)
                    .and(man_geo.eq(13)),
    value: ee.Image(14)
  });   
  //********************* END CREATING and APPLYING REEF OUTINE BUFFER FROM  Lagoons mask Chris SCS*****************END
  //************************************* clean up small groups of  pixesl in deep water Chris RSAG ************************************
   var man_geo = man_geo.where({
   test:man_geo.eq(22)// Reef Slope pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are RS and neighbouring each other, with groups smaller then 25
   value: ee.Image(0) // change those selected no class
  })
   var man_geo = man_geo.where({
    test:man_geo.eq(12)// Deep Lagoon pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are Deep Lagoon and neighbouring each other, with groups smaller then 25
    value: ee.Image(0) // change those selected no class
  })
     var man_geo = man_geo.where({
    test:man_geo.eq(23)// Plateau pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are Plateau and neighbouring each other, with groups smaller then 25
    value: ee.Image(0) // change those selected no class
  })
  
 //************************************* END flean up small groups of pixesl in deep water Chris RSAG ************************************


  
  /*
  // the "REEF MASK" CLEAN
  
  // Define a kernel for reef mask Morphological Operations
  var kernel_rm = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create reef mask to clean areas inside the reef - Perform an dilation of deepwater
  var reef_mask = man_geo.eq(2)
            .focal_max({kernel: kernel_rm, iterations: 2});
  var global_reef_mask = ee.Image(region_params.global_reef_mask);
  

  // Reef crest, slope, sheltered slope (within reef mask) -> Inner reef flat
  man_geo = man_geo.where({
    test: reef_mask.eq(0)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22))),
    value: ee.Image(13)
  });
  
  // the "DEEP WATER" CLEAN
  
  // Define a kernel for deep water Morphological Operations
  var kernel_dw = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
  var deepwater = man_geo.eq(2)
            .focal_max({kernel: kernel_dw, iterations: 2})
            .focal_min({kernel: kernel_dw, iterations: 2});
    
  
    // Deep lagoon (outside reef mask and global mask) -> deepwater 
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(12)),
                    //.and(global_reef_mask.eq(2)),
    value: ee.Image(2)
  });
  
 
  // Reef classes in deepwater -> deepwater
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(24))),
    value: ee.Image(2)
  });
  
  */
  
  
  
  
/*
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })
 
*/ 
  
  
/*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone").clip(not_reef_crest);
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone").clip(not_deep_water);
*/

/*

var srl_RS = ee.Image().byte().paint(ee.Feature(srl_rs, {zone: 1}), "zone").clip(srl_rs);

man_geo = man_geo.where({
  test: srl_RS.eq(1)
        .and(man_geo.eq(21)),
  value: ee.Image (22)
});

*/
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.pixels).mosaic();
  Map.addLayer(lowtide_image, imageVisParam2, sensor_params.sname + ' low tide', false);
 // var notreef_mask = ee.FeatureCollection(region_params.notreef_mask).geometry();
  //Map.addLayer(notreef_mask, {}, "noReefmask", false);
  //var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  //Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false); I removed this asset by mistake
  var geo_raw = ee.ImageCollection(region_params.geo_map).mosaic();
  Map.addLayer(geo_raw, map_palettes.geo, 'Geo raw', false);
  var geo_clean1 = ee.ImageCollection(region_params.geo_map_clean1).mosaic();
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.ImageCollection(region_params.geo_map_clean2).mosaic();
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3', true);
  var unepClipped= wcmc.filterBounds(region_extent)
  Map.addLayer(unepClipped, {color:'#FFFF33'}, 'UNEP_layer', false)
  
 // Map.addLayer(waves, {}, 'waves', false);
 // Map.addLayer(wavespng, {}, 'wavespng', false);
  
  //Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
 // Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(1)), {palette: ['F8FF23'], opacity: 0.4}, 'global_reef_mask - land', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(3)), {palette: ['0000ff'], opacity: 0.4}, 'global_reef_mask - reef', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(2)), {palette: ['FF0000'], opacity: 0.4}, 'global_reef_mask - water', false);

  // display distance to land mask for assessing cut-off distances
  var distToLand = ee.Image(region_params.distToLand);
    
  //Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
 // Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
  
  // display distance to water mask
  var distToWater = ee.Image(region_params.distToWater);
    
  //Map.addLayer(distToWater.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'distToWater ' + vars.dist_to_land_ORF + 'm', false);
  
 /* 
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name+"culo",
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
*/  

   //this bit is to get west and east for geo 3 
var pixsegs = ee.ImageCollection(region_params.pixels).mosaic().regexpRename('(^.*$)','$1_p')
                  .addBands(
              ee.ImageCollection(region_params.segments).mosaic().regexpRename('(^.*$)','$1_s')  
                           )
                  .select(vars.input_bands)
                  
 // var export_geom = pixsegs.select(1).gt(0).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extentFull, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})  
  var export_geom = pixsegs.select(1).gt(0).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extentFull, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})   
  var latlong = ee.Image.pixelLonLat().select('longitude').clip(export_geom)
  var export_stack_east = man_geo.set(vars).updateMask(latlong.lte(0))
  var export_stack_west = man_geo.set(vars).updateMask(latlong.gt(0))
  
  var export_geom_east = ee.FeatureCollection(region_params.extent_east).geometry()
  var export_geom_west = ee.FeatureCollection(region_params.extent_west).geometry()
  
  Map.addLayer(export_geom_east, {}, "export footprint east", true)
  Map.addLayer(export_geom_west, {}, "export footprint west", true)
  
  Map.addLayer(export_stack_east, display_pal, output_name, false); 
  Map.addLayer(export_stack_west, display_pal, output_name, false);  
 
 
 
  Export.image.toAsset({
    image: export_stack_east,
    description: 'eastern_micronesia_geo_clean3_east',
    assetId: vars.asset_output + 'in_out/' + 'eastern_micronesia_geo_clean3_east',
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    region: export_geom_east,
    maxPixels: 1e13,
    pyramidingPolicy:{'.default': 'mode'},
  })
  
  Export.image.toAsset({
    image: export_stack_west,
    description: 'eastern_micronesia_geo_clean3_west',
    assetId: vars.asset_output + 'in_out/' + 'eastern_micronesia_geo_clean3_west',
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    region: export_geom_west,
    maxPixels: 1e13,
    pyramidingPolicy:{'.default': 'mode'},
  })
   
} 


if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.ImageCollection(region_params.pixels).mosaic().select('depth').unmask(9999, false);
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.ImageCollection(region_params.geo_map_clean3).mosaic();
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.ImageCollection(region_params.benthic_map_clean1).mosaic();
  
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });
    
  // Seagrass on Back reef slope -> Sand 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(24)),
    value: ee.Image(11)
  });  
  
     
  

/*
///////////////////////////////////////
  // code added by Mitch to regain missing data for western Australua and to cleAN A ;LITTLE BIT benthic 2 > I used man_benthic10 in a first draft to chris but after that I
  //am using benthic 2_RB

  var ben_mask = man_benthic.gt(0),
  
  man_benthic2 = man_benthic.focal_mode(1, 'plus')
                   .updateMask(ben_mask)
               .selfMask()                  
                    
                    
  
 //This is the final benthic2 after focal_mode 
  var man_benthic10 = man_benthic.focal_mode(4, 'diamond')
                    .updateMask(ben_mask)
                    .selfMask()                  
///////////////////////////////////////////////  
  
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
 
*/

var Sg_Coral = ee.Image().byte().paint(ee.Feature(sg_coral, {zone: 1}), "zone");

    man_benthic = man_benthic.where({
    test: Sg_Coral.eq(1)
                  .and(man_benthic.eq(14)),
    value: ee.Image(15)
  });

//turn everything in geo RC into benthic coral_algae
 
  man_benthic = man_benthic.where({
       test:  man_benthic
              .and(geo_map.eq(15)),
       value: ee.Image(15)
  })
  
  //turn everything in geo RS and SRS into benthic coral_algae
 
  man_benthic = man_benthic.where({
       test:  man_benthic
              .and(geo_map.eq(22).or(geo_map.eq(21))),
       value: ee.Image(15)
  })
  
  
  //turn everything in geo ORF into rock
 
  man_benthic = man_benthic.where({
       test:  man_benthic
              .and(geo_map.eq(14)),
       value: ee.Image(13)
  })
  
  
  
   

  // Add the manual layer to the map

  var dove_image = ee.ImageCollection(region_params.pixels).mosaic();
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  var benthic_clean1 = ee.ImageCollection(region_params.benthic_map_clean1).mosaic();
  var geo_clean1 = ee.ImageCollection(region_params.geo_map_clean1).mosaic();
  var geo_clean2 = ee.ImageCollection(region_params.geo_map_clean2).mosaic();
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
   Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  // Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  //Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', false);
  Map.addLayer(benthic_clean1.updateMask(geo_map.gt(0)), map_palettes.benthic, 'Benthic clean stage 1', false);
  //Map.addLayer(man_benthic.updateMask(man_benthic.gt(0)), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  Map.addLayer(man_benthic.updateMask(man_benthic.gt(0)), map_palettes.benthic, 'Benthic clean stage 2 ', true);
  //Map.addLayer(man_benthic10.updateMask(man_benthic10.gt(0)), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL10_radius', true);
  // Export 
  
  /* this block does not work with the dateline for east micro as I am exporting east and west
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  */
  
 // Just being lazy here and copy paste the next block of code to export west/east for east product
  
  var pixsegs = ee.ImageCollection(region_params.pixels).mosaic().regexpRename('(^.*$)','$1_p')
                  .addBands(
              ee.ImageCollection(region_params.segments).mosaic().regexpRename('(^.*$)','$1_s')  
                           )
                  .select(vars.input_bands)
  
  var export_geom = pixsegs.select(1).gt(0).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extentFull, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})   
  var latlong = ee.Image.pixelLonLat().select('longitude').clip(export_geom)
  var export_stack_east = man_benthic.set(vars).updateMask(latlong.lte(0))
  var export_stack_west = man_benthic.set(vars).updateMask(latlong.gt(0))
  
  var export_geom_east = ee.FeatureCollection(region_params.extent_east).geometry()
  var export_geom_west = ee.FeatureCollection(region_params.extent_west).geometry()
  
  Map.addLayer(export_geom_east, {}, "export footprint east", false)
  Map.addLayer(export_geom_west, {}, "export footprint west", false)
  
  //Map.addLayer(export_stack_east, display_pal, output_name, false); 
  //Map.addLayer(export_stack_west, display_pal, output_name, false);  
 
 
 
  Export.image.toAsset({
    image: export_stack_east,
    description: 'eastern_micronesia_benthic_clean2_east',
    assetId: vars.asset_output + 'in_out/' + 'eastern_micronesia_benthic_clean2_east',
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    region: export_geom_east,
    maxPixels: 1e13,
    pyramidingPolicy:{'.default': 'mode'},
  })
  
  Export.image.toAsset({
    image: export_stack_west,
    description: 'eastern_micronesia_benthic_clean2_west',
    assetId: vars.asset_output + 'in_out/' + 'eastern_micronesia_benthic_clean2_west',
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    region: export_geom_west,
    maxPixels: 1e13,
    pyramidingPolicy:{'.default': 'mode'},
  })
     
}


// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.ImageCollection(region_params.geo_map_clean1).mosaic();
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.ImageCollection(region_params.pixels).mosaic();
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.ImageCollection(region_params.geo_map_clean1).mosaic(), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.ImageCollection(region_params.geo_map_clean3).mosaic();
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    // shallow lagoon > 5m == deep lagoon//this rule is making mini deep laggoons witin BRS 
    //so I will generate another clean up1 with shallow lagoons instead (comenting this up)
    
    // = geo_map.where({
     // test: geo_map.eq(11)
                    //.and(depth.gt(vars.shallowlag_depth_cutoff)),
      //value: ee.Image(12)
    //});
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    geo_map = geo_map.where({
      test: depth.gt(vars.geo_depth_cutoff),
      value: ee.Image(2)
    });
    
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

    // // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    // clean_map = clean_map.where({
    //   test: distToLand.lte(vars.dist_to_land_RC)
    //                 .and(clean_map.eq(15)),
    //   value: ee.Image(16)
    // });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
    
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        // reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
   
   /* 
   this bit does no work for dateline regions
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
*/

   //this bit is to get west and east from each geo and benthic products
var pixsegs = ee.ImageCollection(region_params.pixels).mosaic().regexpRename('(^.*$)','$1_p')
                  .addBands(
              ee.ImageCollection(region_params.segments).mosaic().regexpRename('(^.*$)','$1_s')  
                           )
                  .select(vars.input_bands)
                  
 // var export_geom = pixsegs.select(1).gt(0).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extentFull, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})  
  var export_geom = pixsegs.select(1).gt(0).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extentFull, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})   
  var latlong = ee.Image.pixelLonLat().select('longitude').clip(export_geom)
  var export_stack_east = clean_map.set(vars).updateMask(latlong.lte(0))
  var export_stack_west = clean_map.set(vars).updateMask(latlong.gt(0))
  
  var export_geom_east = ee.FeatureCollection(region_params.extent_east).geometry()
  var export_geom_west = ee.FeatureCollection(region_params.extent_west).geometry()
  
  Map.addLayer(export_geom_east, {}, "export footprint east", true)
  Map.addLayer(export_geom_west, {}, "export footprint west", true)
  
  Map.addLayer(export_stack_east, display_pal, output_name, false); 
  Map.addLayer(export_stack_west, display_pal, output_name, false);  
 
 
 
  Export.image.toAsset({
    image: export_stack_east,
    description: output_name + '_east',
    assetId: vars.asset_output + 'in_out/' + output_name + '_eastculo',
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    region: export_geom_east,
    maxPixels: 1e13,
    pyramidingPolicy:{'.default': 'mode'},
  })
  
  Export.image.toAsset({
    image: export_stack_west,
    description: output_name + '_west',
    assetId: vars.asset_output + 'in_out/' + output_name + '_west',
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    region: export_geom_west,
    maxPixels: 1e13,
    pyramidingPolicy:{'.default': 'mode'},
  })
   
    
  }
 
  
  
  
  
} else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } }
 
 /*   
    else {
      Map.addLayer(export_geom_east, display_pal, output_name, false);
    }
  }

*/
    

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
