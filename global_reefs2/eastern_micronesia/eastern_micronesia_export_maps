
///////////////////////////////
// Global coral atlas project - East_Micro
// Contact: mitchell.lyons@gmail.com
// Region coordinator: RB
// Description:
// - export geomorphic and benthic to Vulcan bucket
///////////////////////////////

// so we can visualise maps before export
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.eastern_micronesia;          //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ############################################


// will need to import depth mosaic from pixels now
var pixel = ee.ImageCollection(region_params.pixels).mosaic()
var depth = pixel.select('depth'); //.multiply(100).uint16()

// finalise layers (include 'mapped area' as zeros)
var geo = ee.ImageCollection(region_params.geo_map_clean3).mosaic()
var benthic = ee.ImageCollection(region_params.benthic_map_clean2).mosaic()
var geo = geo.where(geo.lte(2), 0).selfMask();
var benthic = benthic.updateMask(geo.gt(0)).selfMask();

// make reef/non-reef layer 
var reef_top = geo.eq([11,13,14,15,16,26]).reduce(ee.Reducer.sum());
var reef_all = geo.eq([11,12,13,14,15,16,21,22,23,24,26]).reduce(ee.Reducer.sum());
var reef_layer = reef_top.addBands(reef_all).reduce(ee.Reducer.sum());

// check before export 
//Map.addLayer(lowtide_sr, {"opacity":1,"bands":["b3","b2","b1"],"min":1,"max":1514,"gamma":1}, 'lowtide_sr', false);
Map.addLayer(reef_layer.selfMask(), {min:0, max:2}, "reef layer", false);
Map.addLayer(geo, map_palettes.geo, "geomorphic map", false);
Map.addLayer(benthic, map_palettes.benthic, "benthic map", false);
Map.addLayer(depth, {min: -3, max: 1200, palette:['#d0d1e6','#a6bddb','#74a9cf','#3690c0','#0570b0','#045a8d','#023858']}, "depth layer", false);
//Map.addLayer(waves, {}, "waves", false);
// combine into single stack
var export_stack = depth.updateMask(geo.gt(2)).rename('depth')
                    .addBands(reef_layer.rename('reef'))
                    .addBands(geo.rename('geomorphic'))
                    .addBands(benthic.rename('benthic'))
                    .toInt16();

//Map.addLayer(export_stack, {}, "export raster stack", false);

   //this bit is to get west and east for geo 3 
var input_bands = ['b1_p', 'b2_p', 'b3_p', 'depth_stdDev_p', 'b1_savg_p', 'b2_savg_p']
var region_extentFull = ee.FeatureCollection(region_params.extent_mask).geometry()
var pixsegs = ee.ImageCollection(region_params.pixels).mosaic().regexpRename('(^.*$)','$1_p')
                  .addBands(
              ee.ImageCollection(region_params.segments).mosaic().regexpRename('(^.*$)','$1_s')  
                           )
                  .select(input_bands)
                  
 // var export_geom = pixsegs.select(1).gt(0).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extentFull, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})  
  var export_geom = pixsegs.select(1).gt(0).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extentFull, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})   
  var latlong = ee.Image.pixelLonLat().select('longitude').clip(export_geom)
  var export_stack_east = export_stack.updateMask(latlong.lte(0))
  var export_stack_west = export_stack.updateMask(latlong.gt(0))
  
  var export_geom_east = ee.FeatureCollection(region_params.extent_east).geometry()
 // var export_geom_west = ee.FeatureCollection(region_params.extent_west).geometry()
  
  Map.addLayer(export_geom_east, {}, "export footprint east", true)
 // Map.addLayer(export_geom_west, {}, "export footprint west", true)
  
  Map.addLayer(export_stack_east, {}, 'export stack east', false); 
  //Map.addLayer(export_stack_west, display_pal, output_name, false);  
  
  
  var export_geom_west = ee.FeatureCollection(region_params.extent_west).geometry()
 // var export_geom_west = ee.FeatureCollection(region_params.extent_west).geometry()
  
  Map.addLayer(export_geom_west, {}, "export footprint west", true)
 // Map.addLayer(export_geom_west, {}, "export footprint west", true)
  
  Map.addLayer(export_stack_west, {}, 'export stack west', false); 
  //Map.addLayer(export_stack_west, display_pal, output_name, false);  
  
 
 
 
  Export.image.toCloudStorage({
    image: export_stack_east,
    description: 'Eastern_micronesia_east_stack',
    bucket: 'coral-atlas-data-pipeline',
    fileNamePrefix: 'coral-gee-export-bucket/eastern_micronesia_V2/eastern_micronesia_east_stack_',
    region: export_geom_east, 
    scale: 5,
    crs: 'EPSG:4326',
    maxPixels: 1e13, 
    skipEmptyTiles: true
});

Export.image.toCloudStorage({
    image: export_stack_west,
    description: 'Eastern_micronesia_west_stack',
    bucket: 'coral-atlas-data-pipeline',
    fileNamePrefix: 'coral-gee-export-bucket/eastern_micronesia_V2/eastern_micronesia_west_stack_',
    region: export_geom_west, 
    scale: 5,
    crs: 'EPSG:4326',
    maxPixels: 1e13, 
    skipEmptyTiles: true
});









  
  /*
  
  Export.image.toAsset({
    image: export_stack_west,
    description: 'eastern_micronesia_geo_clean3_west',
    assetId: vars.asset_output + 'in_out/' + 'eastern_micronesia_geo_clean3_west',
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    region: export_geom_west,
    maxPixels: 1e13,
    pyramidingPolicy:{'.default': 'mode'},
  })
   
} 

*/








/*
// run the export
var reef_boundary= ee.FeatureCollection(region_params.extent_mask);
Map.addLayer(reef_boundary, {}, "Reef Boundary", false)
Export.image.toCloudStorage({
  image: export_stack,
  description: 'Eastern_micronesia_stack',
  bucket: 'coral-atlas-data-pipeline',
  fileNamePrefix: 'coral-gee-export-bucket/eastern_micronesia/eastern_micronesia_stack_',
  region: reef_boundary, 
  scale: 5,
  crs: 'EPSG:4326',
  maxPixels: 1e13, 
  skipEmptyTiles: true
});
*/

