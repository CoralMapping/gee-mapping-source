/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    GCRMN_ext = ee.Image("projects/coral_atlas/global_datasets/GCRMN_reefextent_final"),
    ben2 = ee.Image("projects/coral_atlas/west_africa/in_out/west_africa_benthic_clean2"),
    turbid = /* color: #bf04c2 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -12.004542065833663,
                7.2386454046780715
              ],
              [
                -12.049174023841475,
                7.169160434689969
              ],
              [
                -11.927637768958663,
                6.798397346068198
              ],
              [
                -11.584317887051531,
                6.483635636994012
              ],
              [
                -11.171037467837074,
                6.148664960992965
              ],
              [
                -10.928293059058548,
                6.070708861238566
              ],
              [
                -10.682581166941947,
                6.192016200748143
              ],
              [
                -10.748609504335471,
                6.25390742204954
              ],
              [
                -10.7831605407129,
                6.265746520568969
              ],
              [
                -10.820673884647304,
                6.305807345057194
              ],
              [
                -10.682824290783945,
                6.368162943764421
              ],
              [
                -11.261747463217713,
                6.752616484033617
              ],
              [
                -11.35391185835334,
                6.871507195380987
              ],
              [
                -11.581568433021163,
                7.014484414295037
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -10.280120658178548,
                5.484895881626343
              ],
              [
                -9.968383597631673,
                5.672828897292428
              ],
              [
                -9.886672782201986,
                5.735687467828532
              ],
              [
                -9.945037650366048,
                5.786925746680998
              ],
              [
                -9.991729544897298,
                5.890071354617971
              ],
              [
                -10.169246752641032,
                6.040329785660042
              ],
              [
                -10.25648520097428,
                6.118201435428889
              ],
              [
                -10.313476778122718,
                6.157115880558004
              ],
              [
                -10.53388998613053,
                6.239714265932214
              ],
              [
                -10.67396566972428,
                6.105229323228759
              ],
              [
                -10.79206869706803,
                5.948856713860427
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -9.429071333698168,
                5.363491000255981
              ],
              [
                -9.558160689166918,
                5.319736528078053
              ],
              [
                -9.212091353229418,
                4.873814948269345
              ],
              [
                -8.964898970416918,
                5.022945708733785
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -8.819330122760668,
                4.916231696334848
              ],
              [
                -9.267022993854418,
                4.56587264807464
              ],
              [
                -8.346918013385668,
                4.156448436532946
              ],
              [
                -8.054407027057543,
                4.398843638995902
              ],
              [
                -8.182676034797426,
                4.6051075217201465
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -7.211078303927221,
                4.912579078043592
              ],
              [
                -7.816699641817846,
                4.427630840244708
              ],
              [
                -7.991107600802221,
                3.9633340165688176
              ],
              [
                -6.966632503145971,
                4.003063255383687
              ],
              [
                -6.983111995333471,
                4.1140208572632275
              ],
              [
                -5.965503352755346,
                4.237288939326628
              ],
              [
                -4.479024138409198,
                4.790417010374577
              ],
              [
                -2.5549782435429758,
                4.555617247560185
              ],
              [
                -2.926807243371752,
                5.020650204112357
              ],
              [
                -3.5441335131594642,
                5.152052868206349
              ],
              [
                -3.707683655847398,
                5.119495140918611
              ],
              [
                -3.8425097401941644,
                5.213134482732104
              ],
              [
                -4.002347646943272,
                5.219944277378121
              ],
              [
                -4.228721058553946,
                5.184380413991505
              ],
              [
                -4.555220764140593,
                5.1460840411781925
              ],
              [
                -4.587514128643573,
                5.293830851320007
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                2.045914915977187,
                5.635712790814957
              ],
              [
                2.548539427695937,
                6.031903782494604
              ],
              [
                2.7188518188978783,
                6.410380115645767
              ],
              [
                2.405717162070937,
                6.390276021244051
              ],
              [
                1.8653271474224997,
                6.372533853181454
              ],
              [
                1.4066479482037497,
                6.234670081721795
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                1.1010906972271872,
                6.018246732229861
              ],
              [
                1.0530255116803122,
                6.051023074823699
              ],
              [
                0.9012768544537497,
                5.842040286972588
              ],
              [
                -0.23512146097593778,
                5.78875757668388
              ],
              [
                -2.026478696329339,
                4.842584718951058
              ],
              [
                -1.2774493418353128,
                4.33331240808317
              ],
              [
                1.2603924550396872,
                5.365053427480254
              ],
              [
                1.4471600331646872,
                5.990931602859498
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -24.717205810948197,
                16.71893379559426
              ],
              [
                -24.707592773838822,
                16.722715068934097
              ],
              [
                -24.71291427652437,
                16.730277390675994
              ],
              [
                -24.725788879795854,
                16.727318257021917
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -24.431132119297242,
                16.661382396879613
              ],
              [
                -24.428299706577516,
                16.65176157637565
              ],
              [
                -24.412335198520875,
                16.660477895879826
              ],
              [
                -24.404267113804078,
                16.66064235092491
              ],
              [
                -24.398773949741578,
                16.661382396879613
              ],
              [
                -24.39396743118689,
                16.667384886131522
              ],
              [
                -24.391392510532594,
                16.668042681727506
              ],
              [
                -24.38495520889685,
                16.67092051087336
              ],
              [
                -24.371393960117555,
                16.673962740332584
              ],
              [
                -24.36100844681189,
                16.671907185187784
              ],
              [
                -24.350622933506227,
                16.678484883898147
              ],
              [
                -24.346159737705445,
                16.68251361264211
              ],
              [
                -24.34358481705115,
                16.686871121632045
              ],
              [
                -24.32710532486365,
                16.67725158262032
              ],
              [
                -24.314144890903687,
                16.669604937205772
              ],
              [
                -24.30710677444861,
                16.66236912036925
              ],
              [
                -24.301527779697633,
                16.658668881060954
              ],
              [
                -24.297150414585328,
                16.654475190068414
              ],
              [
                -24.293459694980836,
                16.646580934404202
              ],
              [
                -24.28788070022986,
                16.64633423367351
              ],
              [
                -24.275692742466187,
                16.637123845836555
              ],
              [
                -24.264448922275758,
                16.64066002921839
              ],
              [
                -24.261015694736695,
                16.641153444969778
              ],
              [
                -24.25638083755896,
                16.63975543037572
              ],
              [
                -24.24994353592322,
                16.642304743450506
              ],
              [
                -24.237485537785286,
                16.645543314427847
              ],
              [
                -24.228730807560677,
                16.65138183729197
              ],
              [
                -24.222293505924934,
                16.64875041239019
              ],
              [
                -24.220233569401497,
                16.651957456671177
              ],
              [
                -24.220061908024544,
                16.65442437727594
              ],
              [
                -24.216800341862434,
                16.65376653488793
              ],
              [
                -24.206758151310677,
                16.65023059334474
              ],
              [
                -24.209333071964974,
                16.643651923802366
              ],
              [
                -24.203324923771614,
                16.642418398121013
              ],
              [
                -24.19946254279017,
                16.644309800919658
              ],
              [
                -24.194570193547005,
                16.644309800919658
              ],
              [
                -24.186759600895638,
                16.639046720756948
              ],
              [
                -24.17869151617884,
                16.63394797406381
              ],
              [
                -24.174056659001106,
                16.631069589451844
              ],
              [
                -24.16796268011927,
                16.627862195718198
              ],
              [
                -24.167791018742317,
                16.625230447990074
              ],
              [
                -24.165301928776497,
                16.621693980141778
              ],
              [
                -24.158864627140755,
                16.618321938482058
              ],
              [
                -24.147191653507942,
                16.61544331946876
              ],
              [
                -24.140411029118294,
                16.6152788256501
              ],
              [
                -24.134917865055794,
                16.62037806849325
              ],
              [
                -24.12951053168177,
                16.623667830697862
              ],
              [
                -24.112256229363734,
                16.618897657105194
              ],
              [
                -24.10384482189303,
                16.616430279421248
              ],
              [
                -24.09208601757174,
                16.618239692823526
              ],
              [
                -24.0512764386974,
                16.608483749599163
              ],
              [
                -24.035345924105965,
                16.597818980778904
              ],
              [
                -24.035315824839923,
                16.59156968380158
              ],
              [
                -24.0284493697618,
                16.58778582028194
              ],
              [
                -23.92509594570814,
                16.65381585359611
              ],
              [
                -24.081479460112437,
                16.73142561722339
              ],
              [
                -24.335194975249156,
                16.739151980836873
              ],
              [
                -24.445573240630015,
                16.70594283728713
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -22.881939919694034,
                16.715301058077703
              ],
              [
                -22.88151076625165,
                16.705847366843084
              ],
              [
                -22.87206939051923,
                16.707080483559483
              ],
              [
                -22.871125252945987,
                16.715629873692478
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -22.69827077512472,
                16.216874329606824
              ],
              [
                -22.69071767453878,
                16.19643419786525
              ],
              [
                -22.691404320046594,
                16.178959502602464
              ],
              [
                -22.682821251198938,
                16.164780783309126
              ],
              [
                -22.656728721902063,
                16.144005474325137
              ],
              [
                -22.662221885964563,
                16.13543090141549
              ],
              [
                -22.66805837278097,
                16.12124906233367
              ],
              [
                -22.660161949441125,
                16.103108021891327
              ],
              [
                -22.580618229540466,
                16.165955553782823
              ],
              [
                -22.636579838427185,
                16.250682472585332
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -22.88514551225531,
                16.225301187086068
              ],
              [
                -22.872785893114685,
                16.21211481191504
              ],
              [
                -22.843603459032654,
                16.20716969368695
              ],
              [
                -22.80927118364203,
                16.221675021919125
              ],
              [
                -22.776655522020935,
                16.245738323179925
              ],
              [
                -22.803434696825622,
                16.281662976057973
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -23.003591862352966,
                16.096366594911416
              ],
              [
                -23.003591862352966,
                16.0518300486681
              ],
              [
                -22.96925958696234,
                16.060738155736622
              ],
              [
                -22.966856327684997,
                16.07822328030477
              ],
              [
                -22.967199650438904,
                16.09009909174707
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -22.705567720811224,
                16.027503589147358
              ],
              [
                -22.711318376939154,
                16.020903929009826
              ],
              [
                -22.718270662705756,
                16.01199404158039
              ],
              [
                -22.711318376939154,
                16.007373943394327
              ],
              [
                -22.678016069810248,
                16.03303063649207
              ],
              [
                -22.68293002023112,
                16.038248497605338
              ],
              [
                -22.691105440709016,
                16.03010256580123
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -23.8522458006686,
                15.413298411225258
              ],
              [
                -23.76092194812954,
                15.340140144466373
              ],
              [
                -23.743069164926414,
                15.344775366467708
              ],
              [
                -23.730366223031883,
                15.337822494887682
              ],
              [
                -23.71972321766079,
                15.33285601634984
              ],
              [
                -23.715603344613914,
                15.339146869224395
              ],
              [
                -23.706333630258445,
                15.336498112154558
              ],
              [
                -23.70049714344204,
                15.333187118591773
              ],
              [
                -23.69397401111782,
                15.33285601634984
              ],
              [
                -23.689167492563133,
                15.327889419771987
              ],
              [
                -23.68298768299282,
                15.318618123789676
              ],
              [
                -23.679554455453758,
                15.309677556312941
              ],
              [
                -23.682301037485008,
                15.308021853750596
              ],
              [
                -23.6819577147311,
                15.302392367085368
              ],
              [
                -23.686837099749834,
                15.302444848131517
              ],
              [
                -23.687008761126787,
                15.30012678079936
              ],
              [
                -23.686493776995928,
                15.298967737511717
              ],
              [
                -23.687266253192217,
                15.297477529574723
              ],
              [
                -23.68743791456917,
                15.29300684215866
              ],
              [
                -23.689583681781084,
                15.287873713050377
              ],
              [
                -23.68821039076546,
                15.282078093620877
              ],
              [
                -23.68702795639394,
                15.277620145322008
              ],
              [
                -23.685397173312886,
                15.270665042764824
              ],
              [
                -23.68007567062734,
                15.26321289137384
              ],
              [
                -23.678359056857808,
                15.259983543622177
              ],
              [
                -23.672694231418355,
                15.257168174296371
              ],
              [
                -23.667887712863667,
                15.254187153880576
              ],
              [
                -23.66479780807851,
                15.254849606517473
              ],
              [
                -23.663682009128316,
                15.25476680005209
              ],
              [
                -23.65630056991933,
                15.24905307512885
              ],
              [
                -23.65355398788808,
                15.25012958590525
              ],
              [
                -23.640507723239644,
                15.247314084534674
              ],
              [
                -23.637246157077534,
                15.242759517179858
              ],
              [
                -23.636902834323628,
                15.240772038686428
              ],
              [
                -23.63535788193105,
                15.239364230055191
              ],
              [
                -23.63312628403066,
                15.23895016689957
              ],
              [
                -23.632267977145894,
                15.23721109274437
              ],
              [
                -23.6326112998998,
                15.234395418389862
              ],
              [
                -23.631238008884175,
                15.233650086517345
              ],
              [
                -23.63037970199941,
                15.232076599449073
              ],
              [
                -23.629263903049214,
                15.232159414851292
              ],
              [
                -23.624285723117573,
                15.232490676134203
              ],
              [
                -23.621453310397847,
                15.231579706351328
              ],
              [
                -23.619050051120503,
                15.22884677334089
              ],
              [
                -23.615187670139058,
                15.228929590014173
              ],
              [
                -23.61439851706549,
                15.227778698610706
              ],
              [
                -23.61259607260748,
                15.223803439803024
              ],
              [
                -23.611480273657286,
                15.223306527174039
              ],
              [
                -23.61139444296881,
                15.220904766268287
              ],
              [
                -23.60907701437994,
                15.218254515547175
              ],
              [
                -23.607703723364317,
                15.217095020369657
              ],
              [
                -23.60590127890631,
                15.215769875208315
              ],
              [
                -23.604442157202207,
                15.214444721710946
              ],
              [
                -23.60186723654791,
                15.213699319205622
              ],
              [
                -23.601523913794004,
                15.21196003643745
              ],
              [
                -23.599978961401426,
                15.210634858977654
              ],
              [
                -23.60160974448248,
                15.209475321864225
              ],
              [
                -23.60160974448248,
                15.207239053700656
              ],
              [
                -23.598777331762754,
                15.204505804835952
              ],
              [
                -23.592940844946348,
                15.198376572500745
              ],
              [
                -23.59216836875006,
                15.197051309653856
              ],
              [
                -23.591481723242246,
                15.195560378998035
              ],
              [
                -23.591739215307676,
                15.1924956551139
              ],
              [
                -23.588305987768614,
                15.193075471155227
              ],
              [
                -23.585559405737364,
                15.186863073515301
              ],
              [
                -23.583241977148496,
                15.18429522907848
              ],
              [
                -23.583327807836973,
                15.182638538672107
              ],
              [
                -23.584529437475645,
                15.182555703810543
              ],
              [
                -23.584271945410215,
                15.181147506191857
              ],
              [
                -23.579207934790098,
                15.180070642852636
              ],
              [
                -23.572598971777403,
                15.178745265050543
              ],
              [
                -23.57310722044022,
                15.173216723001289
              ],
              [
                -23.57139060667069,
                15.171394267247228
              ],
              [
                -23.56735656431229,
                15.169406115770235
              ],
              [
                -23.56890151670487,
                15.167252263896204
              ],
              [
                -23.56864402463944,
                15.164601339151373
              ],
              [
                -23.567442395000768,
                15.161204793241076
              ],
              [
                -23.56263587644608,
                15.159050857807717
              ],
              [
                -23.554310299663854,
                15.159713609508557
              ],
              [
                -23.553537823467565,
                15.155488531833226
              ],
              [
                -23.547358013897252,
                15.156896900436253
              ],
              [
                -23.544611431866002,
                15.157808192770592
              ],
              [
                -23.53594253232987,
                15.153583077033575
              ],
              [
                -23.527616955547643,
                15.151511911046958
              ],
              [
                -23.523497082500768,
                15.14181858480635
              ],
              [
                -23.521093823223424,
                15.13419617042828
              ],
              [
                -23.519806362896276,
                15.131461976690698
              ],
              [
                -23.515772320537877,
                15.13030200505142
              ],
              [
                -23.51096580198319,
                15.131296266845318
              ],
              [
                -23.507532574444127,
                15.128976315402655
              ],
              [
                -23.504271008282018,
                15.129970583416725
              ],
              [
                -23.4503020289462,
                15.132989417911629
              ],
              [
                -23.404631156534702,
                15.483493411828078
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -24.24689092676143,
                15.16658226079404
              ],
              [
                -24.382160091800493,
                15.17983642772589
              ],
              [
                -24.55949744950247,
                15.074776201009257
              ],
              [
                -24.494437787637235,
                14.9748860011469
              ],
              [
                -24.485486803885255,
                14.982620788585532
              ],
              [
                -24.481023608084474,
                14.985937275419902
              ],
              [
                -24.478534518118654,
                14.987429677730985
              ],
              [
                -24.478277026053224,
                14.989751171751625
              ],
              [
                -24.47664624297217,
                14.992072640586839
              ],
              [
                -24.473813830252443,
                14.994974441208463
              ],
              [
                -24.47441464507178,
                14.996798410022766
              ],
              [
                -24.471582232352052,
                14.99746166755332
              ],
              [
                -24.46917897307471,
                15.001441169538596
              ],
              [
                -24.467462359305177,
                15.002850558731417
              ],
              [
                -24.468063174124513,
                15.00517188538253
              ],
              [
                -24.46565991484717,
                15.007493186824718
              ],
              [
                -24.461939145320507,
                15.012218615423679
              ],
              [
                -24.456274319881054,
                15.011223797034543
              ],
              [
                -24.451553632014843,
                15.012550220524016
              ],
              [
                -24.448807049983593,
                15.014208238305075
              ],
              [
                -24.448034573787304,
                15.015783343277457
              ],
              [
                -24.445202161067577,
                15.017855832123713
              ],
              [
                -24.44262724041328,
                15.017772932955987
              ],
              [
                -24.442026425593944,
                15.01536884309501
              ],
              [
                -24.44116811870918,
                15.018270327479614
              ],
              [
                -24.439279843562694,
                15.018353226454268
              ],
              [
                -24.438593198054882,
                15.020259893989115
              ],
              [
                -24.43636160015449,
                15.021420465892316
              ],
              [
                -24.434730817073437,
                15.024736350853507
              ],
              [
                -24.431499029920406,
                15.023354173963186
              ],
              [
                -24.42592003516943,
                15.028991096685898
              ],
              [
                -24.426263357923336,
                15.029654254277064
              ],
              [
                -24.425233389661617,
                15.03050939549945
              ],
              [
                -24.4216285007456,
                15.028188344215472
              ],
              [
                -24.419740225599117,
                15.027525182068947
              ],
              [
                -24.41742279701025,
                15.02876860940323
              ],
              [
                -24.41493370704443,
                15.029017294000704
              ],
              [
                -24.41141464881689,
                15.030343606959285
              ],
              [
                -24.4077239292124,
                15.030675183910821
              ],
              [
                -24.40291741065771,
                15.032664634799255
              ],
              [
                -24.397767569349117,
                15.033079101399359
              ],
              [
                -24.397080923841305,
                15.036311913243784
              ],
              [
                -24.3981967227915,
                15.037721072303857
              ],
              [
                -24.388841177747555,
                15.042611610922762
              ],
              [
                -24.385579611585445,
                15.045015393870123
              ],
              [
                -24.379056479261227,
                15.049408444386927
              ],
              [
                -24.374421622083492,
                15.051977922525365
              ],
              [
                -24.374672634136054,
                15.054021349988023
              ],
              [
                -24.371582729350898,
                15.057668263026892
              ],
              [
                -24.36402962876496,
                15.052032098377941
              ],
              [
                -24.353386623393867,
                15.052695184311782
              ],
              [
                -24.34308694077668,
                15.049048186138625
              ],
              [
                -24.338623744975898,
                15.053026726504793
              ],
              [
                -24.333130580913398,
                15.047390439062207
              ],
              [
                -24.315964443218085,
                15.0394330736266
              ],
              [
                -24.296051723491523,
                15.019538361206447
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -24.766230003594107,
                14.845274855479959
              ],
              [
                -24.747347252129263,
                14.840960592596112
              ],
              [
                -24.75215377068395,
                14.869665413828715
              ],
              [
                -24.740309135674185,
                14.869665413828715
              ],
              [
                -24.736017601250357,
                14.874310922064707
              ],
              [
                -24.736017601250357,
                14.882274417713925
              ],
              [
                -24.734129326103872,
                14.888080947872705
              ],
              [
                -24.728807823418325,
                14.893057849212047
              ],
              [
                -24.724859611748403,
                14.888578643179303
              ],
              [
                -24.7219413683402,
                14.889408132802751
              ],
              [
                -24.71799315667028,
                14.890901206078725
              ],
              [
                -24.715074913262075,
                14.889242235133493
              ],
              [
                -24.713529960869497,
                14.889242235133493
              ],
              [
                -24.712843315361685,
                14.891564790880523
              ],
              [
                -24.711126701592153,
                14.895048577558123
              ],
              [
                -24.70820845818395,
                14.894716790777988
              ],
              [
                -24.704775230644888,
                14.893887321591905
              ],
              [
                -24.69825209832067,
                14.895380363827217
              ],
              [
                -24.689325706719107,
                14.902347757409666
              ],
              [
                -24.679197685478872,
                14.90317719401
              ],
              [
                -24.678339378594107,
                14.895380363827217
              ],
              [
                -24.669927971123403,
                14.891896582515022
              ],
              [
                -24.6725028917777,
                14.876965453286724
              ],
              [
                -24.66803969597692,
                14.863028800013945
              ],
              [
                -24.664606468437857,
                14.858548970350594
              ],
              [
                -24.66649474358434,
                14.850916453943421
              ],
              [
                -24.66374816155309,
                14.844113331634373
              ],
              [
                -24.620489494560903,
                14.84494299216092
              ],
              [
                -24.636625663994497,
                14.916613621612726
              ],
              [
                -24.691385643242544,
                14.947630315611065
              ],
              [
                -24.781679527519888,
                14.947132756941906
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -13.517136681359114,
                29.210948783067423
              ],
              [
                -13.503403771202864,
                29.21424501204268
              ],
              [
                -13.50151549605638,
                29.215143965177987
              ],
              [
                -13.502888787072004,
                29.22158623182124
              ],
              [
                -13.513016808312239,
                29.22158623182124
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -13.554151790200693,
                29.146305993577588
              ],
              [
                -13.548658626138193,
                29.12831336797836
              ],
              [
                -13.537672298013193,
                29.131912145064486
              ],
              [
                -13.533209102212412,
                29.14030880168549
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -13.543322976863168,
                28.96285902247676
              ],
              [
                -13.542121347224496,
                28.959629836814308
              ],
              [
                -13.540619310176156,
                28.959629836814308
              ],
              [
                -13.539932664668344,
                28.959817582924472
              ],
              [
                -13.536327775752328,
                28.96559999638606
              ],
              [
                -13.532894548213266,
                28.966839042962857
              ],
              [
                -13.530319627558969,
                28.967777704737426
              ],
              [
                -13.527830537593148,
                28.973897570809182
              ],
              [
                -13.532851632869027,
                28.975924931293097
              ],
              [
                -13.540233072078012,
                28.970781365209852
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -15.424052239641998,
                28.151778135408794
              ],
              [
                -15.431433678850983,
                28.141636938412592
              ],
              [
                -15.434351922259186,
                28.122562833004686
              ],
              [
                -15.41649913905606,
                28.108027902897817
              ],
              [
                -15.410147668108795,
                28.116506851548078
              ],
              [
                -15.400877953753326,
                28.122108646260923
              ],
              [
                -15.390749932513092,
                28.163885769306255
              ],
              [
                -15.41478252528653,
                28.16494512211207
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -15.409804345354889,
                28.10878497913705
              ],
              [
                -15.407057763323639,
                28.095611090265802
              ],
              [
                -15.40053463099942,
                28.088342045466682
              ],
              [
                -15.409804345354889,
                28.08637326112483
              ],
              [
                -15.41203594325528,
                28.081981227499355
              ],
              [
                -15.411177636370514,
                28.076680258030756
              ],
              [
                -15.413237572893951,
                28.07319662135255
              ],
              [
                -15.413840044478153,
                28.06047030838832
              ],
              [
                -15.411951769331669,
                28.049714487274414
              ],
              [
                -15.408003557661747,
                28.04319987527396
              ],
              [
                -15.39221071098206,
                28.036230318617857
              ],
              [
                -15.363371599653934,
                28.027745031567314
              ],
              [
                -15.332987535933231,
                28.10181717085005
              ],
              [
                -15.371394693354139,
                28.114542623921096
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -16.914145263752822,
                15.478809904303287
              ],
              [
                -17.004782470784072,
                15.598550156325778
              ],
              [
                -17.16433293477898,
                15.269537340009698
              ],
              [
                -17.669713310424132,
                14.931071765373805
              ],
              [
                -17.65604244955613,
                14.607964626972283
              ],
              [
                -17.55167233236863,
                14.652478204143478
              ],
              [
                -17.550985686860816,
                14.69166924265701
              ],
              [
                -17.583258025728004,
                14.726868760645067
              ],
              [
                -17.53793942221238,
                14.781981110679249
              ],
              [
                -17.454855315767066,
                14.785964594527606
              ],
              [
                -17.325079314790504,
                14.834424454253607
              ],
              [
                -17.23985540661235,
                14.880780771442021
              ],
              [
                -17.16295110973735,
                14.914622579534118
              ],
              [
                -17.141665098995162,
                14.929219363776175
              ],
              [
                -17.1382318714561,
                14.947132243862383
              ],
              [
                -17.1111205528336,
                14.98114315801526
              ],
              [
                -17.08296808701329,
                15.009663461739175
              ],
              [
                -17.063055367286726,
                15.031548555763365
              ],
              [
                -17.0397094200211,
                15.05608371912405
              ],
              [
                -17.012930245216413,
                15.069344793261271
              ],
              [
                -16.988897652442976,
                15.101167998473223
              ],
              [
                -16.955252022560163,
                15.149556645439477
              ],
              [
                -16.927446716154726,
                15.195612721754074
              ],
              [
                -16.911993355567976,
                15.224437793400034
              ],
              [
                -16.88281985201868,
                15.26517889492768
              ],
              [
                -16.848821968849226,
                15.303266146820336
              ],
              [
                -16.81723627548985,
                15.386699125540181
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -9.62510052165065,
                5.3389822622928325
              ],
              [
                -9.517297176924087,
                5.364961041017739
              ],
              [
                -9.5289701505569,
                5.3909387135974685
              ],
              [
                -9.54819622477565,
                5.402559944445775
              ],
              [
                -9.568108944502212,
                5.412813786560267
              ],
              [
                -9.5893949552444,
                5.423067454799253
              ],
              [
                -9.605187801924087,
                5.417598853396101
              ],
              [
                -9.61411419352565,
                5.429903136867019
              ],
              [
                -9.629907040205337,
                5.431953826375526
              ],
              [
                -9.632653622236587,
                5.446308457368342
              ],
              [
                -9.639520077314712,
                5.479801261388458
              ],
              [
                -9.668359188642837,
                5.494838236624653
              ],
              [
                -9.708184628095962,
                5.528328315587617
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    rubbletoRock = /* color: #d6be97 */ee.Geometry.MultiPolygon(
        [[[[-14.129375415609555, 28.201957288052867],
           [-14.183105426595883, 28.187735740495754],
           [-14.208782482683661, 28.145399770344547],
           [-14.10218076759577, 28.174760165504843],
           [-13.929803821524906, 28.217018849699066],
           [-13.876417133292485, 28.30105440272144],
           [-13.83421104977072, 28.41069736316125],
           [-13.86442345211447, 28.41416999432654]]],
         [[[-14.239951271044493, 28.220048854315802],
           [-14.22003855131793, 28.203106685047935],
           [-14.163733619677306, 28.288092962699334],
           [-14.095069068896056, 28.445787799749475],
           [-13.99035562895465, 28.616208219251657],
           [-13.912127388467407, 28.74509061199049],
           [-13.950922859658814, 28.768567095434705],
           [-14.067652595986939, 28.74418756490922]]],
         [[[-13.888961087219764, 28.529530170461506],
           [-13.822013150208045, 28.483671918986946],
           [-13.789054165833045, 28.636856928354305],
           [-13.851195584290076, 28.64107540406474]]],
         [[[-13.563820272040696, 29.203840086872155],
           [-13.427177815986008, 29.268551119680335],
           [-13.502708821845383, 29.31406397777349],
           [-13.559357076239914, 29.26196205254338]]],
         [[[-13.563963729042534, 29.192781803952087],
           [-13.798733134470197, 29.080404615912702],
           [-13.767682407955386, 28.927499712174377],
           [-13.787251804928042, 28.834006096302108],
           [-13.773862217525698, 28.838216620372922],
           [-13.713780735592104, 28.877005572856753],
           [-13.605634068111636, 28.909168371492093],
           [-13.444615696529604, 28.961449206392846],
           [-13.43335762555632, 29.036220910046858],
           [-13.429581075263352, 29.09923767988339],
           [-13.37396278913054, 29.180761915442233],
           [-13.44812050397429, 29.25537256081154],
           [-13.52948799665007, 29.196647447706138]]],
         [[[-15.669414047854934, 27.992591932961854],
           [-15.878154282229934, 27.743717240912737],
           [-15.677653793948684, 27.607505721198248],
           [-15.297252182620559, 27.79232301487449],
           [-15.324718002933059, 28.157382929848907],
           [-15.490886215823684, 28.087135336861962]]],
         [[[-16.5572466894565, 28.07501903228368],
           [-16.48377562012056, 28.034419455160787],
           [-16.31898069824556, 28.327964974354284],
           [-16.44257688965181, 28.274158266369827]]],
         [[[-16.669169907229936, 28.028358502115523],
           [-16.72478819336275, 27.973188149548868],
           [-16.50849485840181, 27.999261177020607],
           [-16.57990599121431, 28.057447962932567]]],
         [[[-16.47544176428369, 28.497050237078184],
           [-16.423943351197753, 28.458422200496116],
           [-16.367638419557128, 28.531441433687082],
           [-16.432183097291503, 28.59114684184298]]],
         [[[-17.419513447035353, 28.114471218919896],
           [-17.30072377418379, 27.981150652093284],
           [-17.18536732887129, 28.00843420995875],
           [-17.299350483168165, 28.1495918157542],
           [-17.371448261488478, 28.177437894838853]]],
         [[[-18.113163251048256, 28.803854832544015],
           [-17.917469281321694, 28.561092230293227],
           [-17.887256878977944, 28.57074116606303],
           [-17.89412333405607, 28.652118815358705],
           [-17.918155926829506, 28.871823586166578]]],
         [[[-17.771900433665444, 28.61836981334693],
           [-17.791126507884194, 28.561092230293227],
           [-17.73550822175138, 28.557473651309856],
           [-17.71010233796232, 28.642477351003926]]],
         [[[-18.204678087447505, 27.80421038830212],
           [-18.179272203658442, 27.612720643840273],
           [-17.952679186080317, 27.582903171462448],
           [-17.882641344283442, 27.72157668736474],
           [-17.921780138228755, 27.78052037600138],
           [-17.982891588424067, 27.74163327537779],
           [-18.124340563033442, 27.737986897561928],
           [-18.122280626510005, 27.790847426341287]]],
         [[[-22.789922733850624, 16.238593788457933],
           [-22.767950077600624, 15.94500900393222],
           [-22.559896488733436, 16.07437171705586],
           [-22.691045780725624, 16.282099615162732]]],
         [[[-23.10712635835372, 15.338796648807822],
           [-23.17304432710372, 15.15396529834967],
           [-23.287027481400592, 15.154628065985712],
           [-23.192957046830283, 15.083037180936007],
           [-23.02747547944747, 15.117509883069735],
           [-23.006189468705283, 15.339458833937602]]],
         [[[-23.896768692338092, 15.290451469636194],
           [-23.590524795853717, 14.868783900881338],
           [-23.25544178804122, 14.852855619965382],
           [-23.362558487259967, 15.339458833937602],
           [-23.75329106404782, 15.411781509082395]]],
         [[[-24.437845352494342, 14.633723159184468],
           [-24.061563614213092, 14.774524511972764],
           [-24.336221817338092, 15.114195443428288],
           [-24.568307998978717, 14.994841207217606]]],
         [[[-24.757822159134967, 14.778508132603305],
           [-24.598863724076374, 14.80041673953162],
           [-24.6386891635295, 14.941441748234634],
           [-24.7924977572795, 14.8817247635873]]],
         [[[-24.63594258149825, 14.99649936236074],
           [-24.67611134370528, 14.962338773127444],
           [-24.643495682084186, 14.950066163890744],
           [-24.603326919877155, 14.98555530091676]]],
         [[[-23.0092184164558, 16.684612392645136],
           [-22.95772000336986, 16.71618118322494],
           [-22.909654817822986, 16.666852656012455],
           [-22.96870633149486, 16.655669753919145],
           [-22.95497342133861, 16.566183060781416],
           [-22.8279440023933, 16.569473750454208],
           [-22.868456087354236, 16.897600105315398],
           [-23.055223665479236, 16.862775887160034]]],
         [[[-24.491756359774985, 16.65631331191137],
           [-23.91909400625936, 16.572091977583973],
           [-23.941753308017173, 16.708275200904396],
           [-24.49862281485311, 16.70367155333483]]],
         [[[-24.80898658438436, 16.829245467150866],
           [-25.054119030673423, 16.85881885561075],
           [-25.151622692782798, 16.842389765881514],
           [-25.02596656485311, 16.725373491011133],
           [-24.749935070712485, 16.628682259497424],
           [-24.633891979892173, 16.628024328761885],
           [-24.659984509189048, 16.758907990232398],
           [-24.730022350985923, 16.744442851976057],
           [-24.791133801181235, 16.818729371380098]]],
         [[[-25.05470279807694, 17.259862004986864],
           [-25.396142350721178, 17.148166838325416],
           [-25.321984635877428, 16.871735404309703],
           [-25.168176042127428, 16.905244027382327],
           [-25.24302040247899, 16.986691112132753],
           [-24.918237077283678, 17.123888774469055]]],
         [[[-17.601824465171493, 14.769927123255412],
           [-17.489214601890243, 14.734070494788229],
           [-16.916552248374618, 14.935852742326958],
           [-16.733904543296493, 15.342819854095826],
           [-16.986590090171493, 15.32692708739747]]],
         [[[-10.687015474645154, 6.261071276526651],
           [-10.688388765660779, 6.169601624290733],
           [-10.574405611363904, 6.1627748949270345],
           [-10.541446626988904, 6.2678967305253135]]],
         [[[-9.879846005049087, 5.734011096092452],
           [-9.934091000166275, 5.714880900410167],
           [-9.772729305830337, 5.562499912525229],
           [-9.677972225752212, 5.550198365637818]]],
         [[[-8.087469942937247, 4.556388743154351],
           [-8.08266342438256, 4.502313156612381],
           [-7.865683443913809, 4.423588360139201],
           [-7.823798067937246, 4.421534557148681],
           [-7.786032565007559, 4.483830703103983]]],
         [[[-4.544648595653218, 5.258156525177314],
           [-4.580354162059468, 5.096769401408123],
           [-3.673982091746968, 5.059836091860314],
           [-3.634156652293843, 5.329263072945626]]],
         [[[-3.505067296825093, 5.274566453376649],
           [-3.549012609325093, 5.072147430024039],
           [-2.954377599559468, 4.938078115891925],
           [-2.830781408153218, 5.104976515718133]]],
         [[[-2.203187414012593, 4.895662756068213],
           [-2.248506017528218, 4.683546073629932],
           [-1.9230360468250929, 4.642483708905589],
           [-1.8063063104969679, 4.872401576641248]]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - Red Sea and Gulf of Aden
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Chris Roelfsema
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants 
// 2. Data loads & vis
// 3. OBIA clean up rules 
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.west_africa;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(1), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1250, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF
  wave_height: 0.6, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1250, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 800, //depth in centimetres
  turbid1_depth_cutoff: 50,//depth in centimeters to be combined with depth5m_mask Code introduced CR
  turbid2_depth_cutoff: 800,//depth in centimeters to be combined with depth8m_mask Code introduced CR
  
  //############
  // Clean-up stage selection
  cleanup_stage: 2, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  // should the global extent + depth cleanup be applied?
  global_extent_clean: true,
  global_depth_thresh: 500, // this is the depth limit for ADDING to the global extent (i.e. 5 = everything <5m will be added to the global extent layer)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3_review_1b';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2b';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
//var region_extent = ee.Image().byte().paint(ee.Feature(regionextent.dissolve(),{zone: 1}), "zone").clip(regionextent.dissolve());
  
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  //var depth = ee.Image(region_params.segments).select('depth');// replace pixel with segments
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean3_review_1);
  
  /*
    // Mask out harbours
  var harbours = ee.Image().byte().paint(ee.Feature(HarbourMask.dissolve(),{zone: 1}), "zone").clip(HarbourMask.dissolve());
  
  man_geo = man_geo.where({
    test: harbours.eq(1),
    value: ee.Image(0)
  });
  */
  
  man_geo = man_geo.updateMask(man_geo.gt(2)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.Image(region_params.image);
  Map.addLayer(lowtide_image, {bands: ['b3','b2','b1'], min:0, max:2000, gamma:1.5}, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);

var GCRMNext=ee.Image([param_module.global_extent_mask.gcrmn])
Map.addLayer(GCRMNext, {}, "GCRMNextmask");// CR added GCRMN_ext
 Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(1)), {palette: ['F8FF23'], opacity: 0.4}, 'global_reef_mask - land', false);
  // Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(3)), {palette: ['0000ff'], opacity: 0.4}, 'global_reef_mask - reef', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(2)), {palette: ['FF0000'], opacity: 0.4}, 'global_reef_mask - water', false);

  
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
 // var man_benthic = ee.Image(region_params.benthic_map_clean2_review_1);
  var man_benthic = ee.Image(ben2)
  var benthic = man_benthic.updateMask(man_benthic.gt(2));
  
var Turbid = ee.Image().byte().paint(ee.Feature(turbid.dissolve(),{zone: 1}), "zone").clip(turbid.dissolve());
var toRK  = ee.Image().byte().paint(ee.Feature(rubbletoRock.dissolve(),{zone: 1}), "zone").clip(rubbletoRock.dissolve());
  
  /*
  // extra depth cutoff refinement
  man_benthic = man_benthic.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
  */
    // Phantom reefs 
  man_benthic = man_benthic.where({
    test: Turbid.eq(1),
    value: ee.Image(0)
  });
  
  // RB to RK on RS
   man_benthic = man_benthic.where({
    test: toRK.eq(1)
              .and(man_benthic.eq(12)),//RB
    value: ee.Image(13)//RK
  }); 
  
  
  /*
    // Mask out harbours
  var harbours = ee.Image().byte().paint(ee.Feature(HarbourMask.dissolve(),{zone: 1}), "zone").clip(HarbourMask.dissolve());
  
  man_benthic = man_benthic.where({
    test: harbours.eq(1),
    value: ee.Image(0)
  });
  
  
  // C/A to SD in areas deeper then 5 m
  var Oman = ee.Image().byte().paint(ee.Feature(review.dissolve(),{zone: 1}), "zone").clip(review.dissolve());
  man_benthic = man_benthic.where({
    test: Oman.eq(1)
              .and(depth.gt(vars.turbid1_depth_cutoff))
              .and(man_benthic.eq(15)),// C/A 
    value: ee.Image(11) // SD
   });
   
   // SG to SD in Oman
  man_benthic = man_benthic.where({
    test: Oman.eq(1)
              .and(man_benthic.eq(14)),// SG
    value: ee.Image(11) // SD
   }); 
   */
  /*
    // Cleanup phantom reefs
  var crap = ee.Image().byte().paint(ee.Feature(garbage, {zone: 1}), "zone").clip(garbage);
  
  man_benthic = man_benthic.where({
    test:  crap.eq(1),
    value: ee.Image(0)
  });
  
  // extra depth cutoff refinement
  man_benthic = man_benthic.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
  */
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  /*
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(15)), //(geo_map.eq(14).or
    value: ee.Image(13)
  });
     // Coral/Algae and Seagrass on Deep Lagoon -> Sand
  man_benthic = man_benthic.where({
    test: man_benthic.eq(15)
                     .and(geo_map.eq(12)),
    value: ee.Image(11)
  });
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(12)),
    value: ee.Image(11)
  });
  man_benthic = man_benthic.where({
    test: man_benthic.eq(13)
                     .and((geo_map.eq(12)).or(geo_map.eq(11))),
    value: ee.Image(11)
  });
  // Seagrass on Reef Crest or Outer Reef Flat or reef slope or sheltered slope change to coral/algae or rock -> coral algae
  // Seagrass in generaly does not grow on hard substrate areas.
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(15)),
    value: ee.Image(15)
  });  
   // Seagrass on reef slope or sheltered slope change to rock -> rock
  // Seagrass in generaly does not grow on hard substrate areas.
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
    value: ee.Image(13)
  }); 
  // Sand on Reef crest ->  ROCK
  // Sand in generally cannot stay in high energy zone so has to be hard substrate posisble Rock
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(15)),
    value: ee.Image(13)
  });  
  // Sand on Reef slope or sheltered slope -> Rubble CR ADDED
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and((geo_map.eq(21)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });  
  /*
  
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
  
  
  
  
  // final smooth for missing data due to depth
  man_benthic = man_benthic.focal_mode(2)
                           .selfMask()
  */
  
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(GCRMN_ext, {}, "GCRMN_ext");// CR added GCRMN_ext
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
 
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    // shallow lagoon > 5m == deep lagoon
    geo_map = geo_map.where({
      test: geo_map.eq(11)
                    .and(depth.gt(vars.shallowlag_depth_cutoff)),
      value: ee.Image(12)
    });
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    geo_map = geo_map.where({
      test: depth.gt(vars.geo_depth_cutoff),
      value: ee.Image(2)
    });
   
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

   // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    clean_map = clean_map.where({
    test: distToLand.lte(vars.dist_to_land_RC)
                     .and(clean_map.eq(15)),
       value: ee.Image(14)
     });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
   // TRF
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        /*// reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();*/
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
