/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    geometry = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPoint(),
    GCRMN_ext = ee.Image("projects/coral_atlas/global_datasets/GCRMN_reefextent_final"),
    DL_BRS_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                41.868436333202276,
                16.26200389772498
              ],
              [
                42.052457329296026,
                16.185524891774566
              ],
              [
                42.184293266796026,
                16.027198500068216
              ],
              [
                42.376554008983526,
                15.95855127095861
              ],
              [
                42.522875005168956,
                16.134823239824076
              ],
              [
                42.63609209349317,
                16.331853535978833
              ],
              [
                42.382047173046026,
                16.628160238499756
              ],
              [
                42.302396294139776,
                16.72550933158957
              ],
              [
                42.203519341014776,
                16.9148027809237
              ],
              [
                42.005765434764776,
                17.14327870422006
              ],
              [
                41.843717094921026,
                17.21675163667523
              ],
              [
                41.525113579296026,
                17.140654132537104
              ],
              [
                41.316373344921026,
                17.004125425756694
              ],
              [
                41.283414360546026,
                16.780739436693196
              ],
              [
                41.538846489452276,
                16.488628204047952
              ],
              [
                41.832730766796026,
                16.264640574626306
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                35.15200278567732,
                28.00115485094333
              ],
              [
                35.155092690462475,
                27.985239206456058
              ],
              [
                35.18839499759138,
                27.970079265351078
              ],
              [
                35.20281455325544,
                27.945363995294592
              ],
              [
                35.229765389437084,
                27.936264925296182
              ],
              [
                35.23611686038435,
                27.93762983465353
              ],
              [
                35.27336737918318,
                27.926558405968997
              ],
              [
                35.28332373904646,
                27.93944968697414
              ],
              [
                35.2663292627281,
                27.965076017233557
              ],
              [
                35.22169730472029,
                27.986906669884174
              ],
              [
                35.1923432092613,
                28.000700150858453
              ],
              [
                35.16968390750349,
                28.004943943696823
              ],
              [
                35.15577933597029,
                28.004034573588775
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    BRS_Deep_Mask = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[40.44841911611584, 15.511714038986296],
           [40.53356315908459, 15.470688597022786],
           [40.62969353017834, 15.466717961090994],
           [40.60360100088147, 15.56199216830302],
           [40.59261467275647, 15.646643337984687],
           [40.62420036611584, 15.69027792620937],
           [40.63244011220959, 15.711430732229724],
           [40.64205314931897, 15.733903181794108],
           [40.68462517080334, 15.745799355994619],
           [40.71071770010022, 15.777519081449206],
           [40.77800895986584, 15.818483049910105],
           [40.81508781728772, 15.880573881696861],
           [40.73543693838147, 15.979615335232616],
           [40.64891960439709, 16.065411634622592],
           [40.46627189931897, 16.148532756870985],
           [40.38112785635022, 16.178869875021284],
           [40.25066520986584, 16.139298797229056],
           [40.26714470205334, 16.062772299033117],
           [40.33580925283459, 16.000335093525187],
           [40.34679558095959, 15.947524529727035],
           [40.32756950674084, 15.86564067486166],
           [40.32894279775647, 15.810152053149167],
           [40.36602165517834, 15.774472755750384],
           [40.41683342275647, 15.748039598604317],
           [40.46077873525647, 15.674008478101946],
           [40.46352531728772, 15.652851792730923],
           [40.43056633291272, 15.590691378809197],
           [40.41958000478772, 15.541743339835675]]],
         [[[36.989143078260916, 21.604396687447046],
           [36.976440136366385, 21.604077483370617],
           [36.96828622096111, 21.591707783113783],
           [36.97781342738201, 21.569200198607245],
           [36.98982972376873, 21.555709935323396],
           [37.0130040096574, 21.556987173800437],
           [37.02459115260174, 21.570716776928787],
           [37.03574914210369, 21.584365267576658],
           [37.03892487757732, 21.593303932872857],
           [37.03017014735271, 21.60256125439041],
           [37.009656612806815, 21.602481452425003],
           [36.995151226454276, 21.605753296914987]]],
         [[[38.8203666065709, 21.987186346487956],
           [38.77367471203965, 21.778831739348323],
           [38.81006692395371, 21.723346790140702],
           [38.92954324231309, 21.70676092276774],
           [38.997521147586525, 21.770542247539225],
           [38.906883940555275, 21.92923444954882],
           [38.846459135867775, 22.0081960271092]]],
         [[[38.67450171557765, 23.032739423169286],
           [38.61819678393702, 22.981861305664996],
           [38.60000067797999, 22.931280211645756],
           [38.61819678393702, 22.861384003428462],
           [38.72565680590968, 22.823416237814378],
           [38.770975409425304, 22.824682000714766],
           [38.81286078540187, 22.865496541614043],
           [38.76067572680812, 23.024524380347962],
           [38.718790350831554, 23.04126989917521],
           [38.690294562257336, 23.042217696502526]]]]),
    DW_SL_BRS_to_RS = 
    /* color: #085fd6 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                43.42605742535747,
                12.7643096358263
              ],
              [
                43.56338652691997,
                12.855369212580358
              ],
              [
                43.37661894879497,
                13.854797899792418
              ],
              [
                43.10196074566997,
                14.552399179261817
              ],
              [
                42.89871367535747,
                14.552399179261817
              ],
              [
                42.83279570660747,
                14.679968603229183
              ],
              [
                42.99759062848247,
                14.711849362605953
              ],
              [
                42.99759062848247,
                14.802152860051127
              ],
              [
                42.78885039410747,
                14.791530866409419
              ],
              [
                42.76138457379497,
                14.94549870775323
              ],
              [
                42.99209746441997,
                15.035704474100038
              ],
              [
                42.87674101910747,
                15.221301926784259
              ],
              [
                42.71743926129497,
                15.231902576073052
              ],
              [
                42.60757598004497,
                15.131174894386277
              ],
              [
                42.71194609723247,
                14.600246390575206
              ],
              [
                42.98660430035747,
                13.77478398468794
              ],
              [
                43.29971465191997,
                12.812521746298835
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                41.58393348316916,
                17.890771668956223
              ],
              [
                42.18406165699729,
                17.276795264717546
              ],
              [
                42.42164100270041,
                17.31613095284905
              ],
              [
                42.35434974293479,
                17.47207943305904
              ],
              [
                41.67319739918479,
                17.984842337594266
              ],
              [
                41.56058753590354,
                17.92474739897366
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                39.25105248787724,
                16.477690116578714
              ],
              [
                39.28881786223642,
                16.481969950600348
              ],
              [
                39.29225106882125,
                16.609004833417266
              ],
              [
                39.14157298387291,
                17.013519465259023
              ],
              [
                39.083957371679496,
                17.190476805089297
              ],
              [
                38.984743931624855,
                17.45789756495348
              ],
              [
                38.87877927450557,
                17.682214143055095
              ],
              [
                38.68767912604894,
                17.98287271462049
              ],
              [
                38.61420832768302,
                17.945315496913093
              ],
              [
                38.621074756547685,
                17.93616992147385
              ],
              [
                38.63686754339835,
                17.92016402723837
              ],
              [
                38.64613722227912,
                17.904810076410364
              ],
              [
                38.65369029366213,
                17.887167725958776
              ],
              [
                38.655406900176786,
                17.873771437079764
              ],
              [
                38.661243364527216,
                17.860700913160578
              ],
              [
                38.67051304355094,
                17.84436140694654
              ],
              [
                38.67016972102993,
                17.828020401058907
              ],
              [
                38.69935204448547,
                17.777680687684335
              ],
              [
                38.728534369597156,
                17.747273858195655
              ],
              [
                38.73265422727748,
                17.742696038506224
              ],
              [
                38.731967584097305,
                17.738772100096654
              ],
              [
                38.79204884228343,
                17.654386654735102
              ],
              [
                38.8026918083719,
                17.642935964619458
              ],
              [
                38.81299145281576,
                17.625267758072866
              ],
              [
                38.79342212700608,
                17.61905075579197
              ],
              [
                38.861870097740784,
                17.482962732212414
              ],
              [
                38.97247477660111,
                17.19752058022705
              ],
              [
                39.023973009494206,
                17.005886150506544
              ],
              [
                39.04354233909103,
                16.934957845986812
              ],
              [
                39.08769045367005,
                16.824243175289123
              ],
              [
                39.12888904484413,
                16.724643256002032
              ],
              [
                39.13472551222631,
                16.706558472677184
              ],
              [
                39.15944466352502,
                16.668081512716356
              ],
              [
                39.15892958497869,
                16.657555648223376
              ],
              [
                39.160817747439474,
                16.64670081436623
              ],
              [
                39.16871435147226,
                16.625649221106904
              ],
              [
                39.170430722985394,
                16.61051583306178
              ],
              [
                39.16940099586178,
                16.599000892763616
              ],
              [
                39.17935706383188,
                16.587484523130886
              ],
              [
                39.18553711188764,
                16.5624768132255
              ],
              [
                39.18794036398665,
                16.542072960184722
              ],
              [
                39.18416339713707,
                16.524135616365587
              ],
              [
                39.16734106974252,
                16.52594580625369
              ],
              [
                39.170087642891026,
                16.515742217899618
              ],
              [
                39.16940100026994,
                16.503892213118682
              ],
              [
                39.167684393429326,
                16.48019002532349
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                42.55832726612275,
                11.499809813779601
              ],
              [
                42.55937869205659,
                11.496003916050249
              ],
              [
                42.561288424875194,
                11.494237625601896
              ],
              [
                42.563541480447704,
                11.494447898854968
              ],
              [
                42.56433541431611,
                11.496845002847795
              ],
              [
                42.560773440744335,
                11.502459192885375
              ],
              [
                42.55882079258149,
                11.502669460000638
              ],
              [
                42.557983943368846,
                11.502017631432171
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                43.189266875092834,
                11.53826183870035
              ],
              [
                43.19285164691226,
                11.539270990722116
              ],
              [
                43.23164711237159,
                11.549362311305526
              ],
              [
                43.27284583675241,
                11.570552902081745
              ],
              [
                43.277652354585385,
                11.562480485083249
              ],
              [
                43.26242777025311,
                11.542843598511094
              ],
              [
                43.267577610779604,
                11.525351339130063
              ],
              [
                43.27410074213927,
                11.52602413847787
              ],
              [
                43.281997164305814,
                11.52064169853332
              ],
              [
                43.28062387348021,
                11.506175880637699
              ],
              [
                43.28611703672257,
                11.495746573893289
              ],
              [
                43.29607339511456,
                11.493055077198795
              ],
              [
                43.310836271347526,
                11.479597208252173
              ],
              [
                43.32594247029023,
                11.46983985178623
              ],
              [
                43.34242196005027,
                11.458736242930833
              ],
              [
                43.35821480440713,
                11.45705383989142
              ],
              [
                43.378814166612585,
                11.4553714268445
              ],
              [
                43.3918604293422,
                11.45604439327263
              ],
              [
                43.398040237994216,
                11.470849249140926
              ],
              [
                43.45549657464606,
                11.517277621274939
              ],
              [
                43.460732108940974,
                11.527117402586311
              ],
              [
                43.4666545624768,
                11.531070082326824
              ],
              [
                43.47562377849197,
                11.533719711294557
              ],
              [
                43.48699632806553,
                11.533593823314545
              ],
              [
                43.49244675662357,
                11.532668876023148
              ],
              [
                43.501673655799344,
                11.530566373776322
              ],
              [
                43.509570150481615,
                11.527790714382277
              ],
              [
                43.51523488445791,
                11.524720836984923
              ],
              [
                43.516436354442796,
                11.52215552033308
              ],
              [
                43.51995547245828,
                11.515679598637247
              ],
              [
                43.52141453366895,
                11.508530832073442
              ],
              [
                43.516865331975445,
                11.502222941655209
              ],
              [
                43.511028874451625,
                11.49915304309731
              ],
              [
                43.508239428542446,
                11.496293329098513
              ],
              [
                43.504935043991146,
                11.494947538358337
              ],
              [
                43.4736926780014,
                11.46311044406384
              ],
              [
                43.465384362138906,
                11.42872076156558
              ],
              [
                43.46641433026406,
                11.419298176829516
              ],
              [
                43.461264489722225,
                11.411221426480745
              ],
              [
                43.45190800181631,
                11.392291032346524
              ],
              [
                43.45422570845507,
                11.38311924398647
              ],
              [
                43.463667748703394,
                11.374200049314185
              ],
              [
                43.472937461699615,
                11.377902403865486
              ],
              [
                43.48186385201003,
                11.370834230726297
              ],
              [
                43.48667036987607,
                11.363765882221653
              ],
              [
                43.48735701530519,
                11.35198491196143
              ],
              [
                43.49147688781942,
                11.315918987456234
              ],
              [
                43.50898634580254,
                11.27955863560533
              ],
              [
                43.51344954100686,
                11.256662718455718
              ],
              [
                43.51756941353853,
                11.220631633288502
              ],
              [
                43.51241957300744,
                11.20379313556193
              ],
              [
                43.549605273980106,
                11.087169644499843
              ],
              [
                43.61140336112088,
                11.021800872784462
              ],
              [
                43.64092911383792,
                11.0076469546322
              ],
              [
                43.81739698402638,
                11.074366601337083
              ],
              [
                43.64651423020351,
                11.476460044848425
              ],
              [
                43.24405848406431,
                11.76813441010009
              ],
              [
                43.153764613400874,
                11.754017579666945
              ],
              [
                43.16612423062976,
                11.735194013129219
              ],
              [
                43.17565143550114,
                11.738135280350056
              ],
              [
                43.19290340140257,
                11.737547029183897
              ],
              [
                43.19942653280439,
                11.741748793641237
              ],
              [
                43.20620715621458,
                11.74342948141446
              ],
              [
                43.209211218776005,
                11.744605978202108
              ],
              [
                43.212816118142584,
                11.746286627465263
              ],
              [
                43.22414576731141,
                11.745950494173872
              ],
              [
                43.23238551216139,
                11.745614360478594
              ],
              [
                43.24199854781418,
                11.741244585283022
              ],
              [
                43.24302851591064,
                11.734185571366284
              ],
              [
                43.23650538455361,
                11.723428631402495
              ],
              [
                43.23032557589383,
                11.710654220873899
              ],
              [
                43.20594966402476,
                11.706283892266569
              ],
              [
                43.19187077550587,
                11.711835059885805
              ],
              [
                43.1743603145601,
                11.706246744056228
              ],
              [
                43.16620613860428,
                11.704124678691294
              ],
              [
                43.161141981159574,
                11.701918504653332
              ],
              [
                43.143719159443215,
                11.701875399016945
              ],
              [
                43.10295285324648,
                11.677706965533366
              ],
              [
                43.09883298073744,
                11.653498322356286
              ],
              [
                43.125612151448905,
                11.624579678236396
              ],
              [
                43.137285123332575,
                11.622225702827928
              ],
              [
                43.14621151359918,
                11.621216850125181
              ],
              [
                43.1544512584572,
                11.618862846312904
              ],
              [
                43.159944421668165,
                11.606083621680645
              ],
              [
                43.15239132217733,
                11.594312765300712
              ],
              [
                43.16475093942214,
                11.571442254859466
              ],
              [
                43.18981349666979,
                11.5411695878117
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                45.688530201420434,
                13.360691537237447
              ],
              [
                45.69591164062942,
                13.32762024290661
              ],
              [
                45.888000721439965,
                13.3835715476988
              ],
              [
                45.876413716177616,
                13.41096650283405
              ],
              [
                45.755649799809106,
                13.384573542293834
              ],
              [
                45.691276783451684,
                13.36419883304856
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    RC_CA_ORF = 
    /* color: #21b437 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                42.56805534764444,
                11.491043357443662
              ],
              [
                42.56929989262735,
                11.489424229787529
              ],
              [
                42.57101650639688,
                11.488099482060377
              ],
              [
                42.573119358264556,
                11.488099482060377
              ],
              [
                42.57425661488687,
                11.489340119005805
              ],
              [
                42.575372413837066,
                11.490980274722096
              ],
              [
                42.57558699055826,
                11.492115761549929
              ],
              [
                42.574921802722564,
                11.4931671341631
              ],
              [
                42.570673183642974,
                11.49381898321331
              ],
              [
                42.569879249774566,
                11.493209188986043
              ],
              [
                42.5684630434147,
                11.492578365982968
              ],
              [
                42.56803388997232,
                11.491926514062984
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                43.28488389727548,
                11.956446733107994
              ],
              [
                43.28506628748849,
                11.955753991083581
              ],
              [
                43.28662196871713,
                11.954704378576356
              ],
              [
                43.30011884448007,
                11.95682459164647
              ],
              [
                43.30305854556039,
                11.95785320388315
              ],
              [
                43.302908341855556,
                11.961306373500774
              ],
              [
                43.30080548998788,
                11.961043976141362
              ],
              [
                43.300666015119106,
                11.960582156170481
              ],
              [
                43.3003226923652,
                11.960613643920814
              ],
              [
                43.30031196352914,
                11.960487692897473
              ],
              [
                43.300193946332485,
                11.960319758108447
              ],
              [
                43.30009738680795,
                11.960309262180674
              ],
              [
                43.2998720812507,
                11.960298766252492
              ],
              [
                43.29959313151315,
                11.96017281508253
              ],
              [
                43.29924936480705,
                11.96005953136691
              ],
              [
                43.29909916110221,
                11.959314318765752
              ],
              [
                43.29884166903678,
                11.958988943605856
              ],
              [
                43.29809065051261,
                11.9589154717414
              ],
              [
                43.29741473384086,
                11.958716048008698
              ],
              [
                43.296813919021524,
                11.958841999856974
              ],
              [
                43.2963418502349,
                11.959030927519452
              ],
              [
                43.29564447589103,
                11.958695056028269
              ],
              [
                43.294818355514444,
                11.958401168131404
              ],
              [
                43.2944321174163,
                11.95818075199923
              ],
              [
                43.294314100219644,
                11.957960335687465
              ],
              [
                43.29400296397392,
                11.958002319760697
              ],
              [
                43.29344506449882,
                11.958075791873172
              ],
              [
                43.29311247058097,
                11.95788686354363
              ],
              [
                43.29287643618766,
                11.957834383428683
              ],
              [
                43.29273696131889,
                11.957981327724902
              ],
              [
                43.29218979067985,
                11.95788686354363
              ],
              [
                43.29183573908988,
                11.95787636752147
              ],
              [
                43.29149241633598,
                11.95803380781135
              ],
              [
                43.291299297286905,
                11.95789735956541
              ],
              [
                43.29109544940177,
                11.95771892713995
              ],
              [
                43.290795041992105,
                11.957624462867079
              ],
              [
                43.29074139781181,
                11.957257101492313
              ],
              [
                43.2904517192382,
                11.957215117303448
              ],
              [
                43.290022565795816,
                11.957257101492313
              ],
              [
                43.28975434489433,
                11.957047180482787
              ],
              [
                43.289325191451944,
                11.95697370809097
              ],
              [
                43.28898186869804,
                11.95697370809097
              ],
              [
                43.28819866366569,
                11.956952715975355
              ],
              [
                43.28745837397758,
                11.956690314392777
              ],
              [
                43.28712578005973,
                11.956637834045713
              ],
              [
                43.286836101486124,
                11.95672180259611
              ],
              [
                43.286524965240396,
                11.956795275056347
              ],
              [
                43.285580827667154,
                11.956963212033365
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    BRS_RS = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPoint(),
    SL_BRS = 
    /* color: #fab98f */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[53.243341128659324, 12.119063828293786],
           [53.28247992260464, 12.118392484909823],
           [53.299989383053855, 12.11335735569867],
           [53.32093207104214, 12.110000550127678],
           [53.322992007565574, 12.145244901895776],
           [53.239564578366355, 12.145916177646857]]],
         [[[52.973354181828455, 12.192376584581547],
           [52.974384150090174, 12.143377564103892],
           [53.097980341496424, 12.14975466012667],
           [53.10175689178939, 12.202779322246117],
           [53.015582880558924, 12.196739072662913]]],
         [[[52.05858781378324, 12.223855798787813],
           [52.08811357061918, 12.229895429640072],
           [52.22921922247465, 12.188957455185976],
           [52.3867255578031, 12.170662970269136],
           [52.40011514520545, 12.209254879486503],
           [52.21849740838904, 12.233413908900788],
           [52.12030710077185, 12.263609589522423],
           [52.05438913202185, 12.264616052687092]]],
         [[[53.417659859688236, 12.400996280134642],
           [53.52065668586011, 12.362097125958392],
           [54.541011910469486, 12.502911301261905],
           [54.582210640938236, 12.68920433886302],
           [53.91067133429761, 12.776273135696169],
           [53.587947945625736, 12.765558590781799],
           [53.332515816719486, 12.728054110869353],
           [53.252864937813236, 12.591383862121042],
           [53.310543160469486, 12.430502111192919]]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - Red Sea and Gulf of Aden
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Chris Roelfsema
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

//*********************************************************
//*** PLEASE READ *********************** Mask that need to be created before running this script
//*********************************************************
//******* BIG MASK to be created in viewer, then exported to and include in reef_param
//******* Useally bigger mask and covering more different areas
//******* They Include
//******* Mid_mask= masking out areas that should not be classified include to turbid or no reef areas
//******* Lagoons_mask to much RC and should be ORF, or RS replaced BRS
//******* Coastline Mask+ areas that should have not DL nor BRS but RS
//******* Banks_0_3m_mask = areas that are not turbid enough to be deleted but show shallow reef up to 3 m
//******* DW_0_5m_mask = areas that are not turbid enough to be deleted but show shallow reef up to 5 m
//******* SG_to_AC mask = Seagrass areas that are not seagrass but AC based on existing data
//*********************************************************
//******* SMALLER MASK to be created in clean up script and are just smaller corrections after review
//******* Useally small mask and covering a view different areas
//******* They Include
//******* DL_BRS_mask area identified to require clean up
//******* BRS_Deep_Mask area identified to require clean up
//******* DW_SL_BRS_to_RS area identified to require clean up
//*********************************************************
//*** THANK YOU FO READING *********************** Mask that need to be created before running this script
//*********************************************************


// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.red_sea;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(1), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1250, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF
  wave_height: 0.6, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1250, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres cut off for lagoon deep and shallow
  benthic_depth_cutoff: 800, //depth in centimetres
  turbid1_depth_cutoff: 300,//depth in centimeters to be combined with depth5m_mask Code introduced CR
  turbid2_depth_cutoff: 500,//depth in centimeters to be combined with depth8m_mask Code introduced CR
  
  //############
  // Clean-up stage selection
  cleanup_stage: 2, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  // should the global extent + depth cleanup be applied?
  global_extent_clean: true,
  global_depth_thresh: 500, // this is the depth limit for ADDING to the global extent (i.e. 5 = everything <5m will be added to the global extent layer)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth').unmask(9999,false);// replace pixel with segments and add value to nodata;// replace pixel with segments
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);
  
  
   // the "GLOBAL MASK" clean
  // currently uses GCRMN extent + bathymetry threhold < vars.global_depth_thresh
  if (vars.global_extent_clean) {
    var blanket_mask = ee.Image([param_module.global_extent_mask.gcrmn]).unmask(0, false)
              .eq(1) // extent according to global extent layer
              .add(depth.lt(vars.global_depth_thresh)) // combine with areas less than depth thrshold
              .eq(0) // get leftovers
              .selfMask().connectedPixelCount(25, true).gte(25)
    
    man_geo = man_geo.where({
      test: blanket_mask.eq(1),
      value: ee.Image(0)
    });
  }
  // import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  // the "MID MASK" CLEAN
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });

  //************************************* clean up small groups of  pixesl in deep water Chris RSAG ************************************
   var man_geo = man_geo.where({
   test:man_geo.eq(22)// Reef Slope pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are RS and neighbouring each other, with groups smaller then 25
   value: ee.Image(0) // change those selected no class
  })
   var man_geo = man_geo.where({
    test:man_geo.eq(12)// Deep Lagoon pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are Deep Lagoon and neighbouring each other, with groups smaller then 25
    value: ee.Image(0) // change those selected no class
  })
     var man_geo = man_geo.where({
    test:man_geo.eq(23)// Plateau pixels
    .connectedPixelCount(25,false).lt(25),//selects group of pixel that are Plateau and neighbouring each other, with groups smaller then 25
    value: ee.Image(0) // change those selected no class
  })
  
 //************************************* END flean up small groups of pixesl in deep water Chris RSAG ************************************



 //************************************* START Import AND APPLY Lagoons mask Chris Red Sea ************************************START
  // import the lagoon mask from asset ****only use ee.FC if  lagoons mask created in map viewer****
  var lagoons_mask = ee.FeatureCollection(region_params.Lagoons_mask).geometry();
  var lagoonsmask = ee.Image().byte().paint(ee.Feature(lagoons_mask.dissolve(),{zone: 1}), "zone").clip(lagoons_mask.dissolve());

  // RC within Lagoon ORF
man_geo = man_geo.where({
test: lagoonsmask.eq(1)
             .and(man_geo.eq(15)),
  value: ee.Image(14)
});
// Reef slope, sheltered slope (within lagoon mask) -> Back Reef Slope
 man_geo = man_geo.where({
  test: lagoonsmask.eq(1)
                    .and(man_geo.eq(21).or(man_geo.eq(22))),
    value: ee.Image(24)
 });    

 
 //************************************* START Import AND APPLY coast mask Chris Red Sea ************************************START
  // import the coast mask from asset ****only use ee.FC if  coast mask created in map viewer****
  var Coast_mask = ee.FeatureCollection(region_params.Coast_mask).geometry();
  var Coastmask = ee.Image().byte().paint(ee.Feature(Coast_mask.dissolve(),{zone: 1}), "zone").clip(Coast_mask.dissolve());

  
  //***** clean-up areas that are  coast mask 
  man_geo = man_geo.where({
    test: (Coastmask.eq(1))
                     .and(man_geo.eq(21).or(man_geo.eq(22)).or(man_geo.eq(11))),//
    value: ee.Image(24)
  });
    //Deep Lagoon within Coast Deep Water
   man_geo = man_geo.where({
   test: Coastmask.eq(1)
             .and(man_geo.eq(12)),//
   value: ee.Image(2)
   }); 
    //shallow Lagoon within Back Reef Slope
    man_geo = man_geo.where({
    test: Coastmask.eq(1)
             .and(man_geo.eq(11)),//
    value: ee.Image(24)
    }); 
  //************************************* END IMPORT AND APPLY Lagoons mask Chris Red Sea ************************************END
  
   //************************************* START Import AND APPLY 0-3 m mask Chris Red Sea ************************************START
  // import the coast mask from asset ****only use ee.FC if  coast mask created in map viewer****
  var Banks0_3mMask = ee.FeatureCollection(region_params.Banks0_3mMask).geometry();
  var Banks_0_3mMask = ee.Image().byte().paint(ee.Feature(Banks0_3mMask.dissolve(),{zone: 1}), "zone").clip(Banks0_3mMask.dissolve());

  
  //Mask out areas deeper then 3 m due to turbied water within 0-3 m mask
man_geo = man_geo.where({
test: Banks_0_3mMask.eq(1)
             .and(depth.gt(vars.turbid1_depth_cutoff)),
  value: ee.Image(0)
});

  //************************************* END IMPORT AND APPLY 0-3_mask Chris Red Sea ************************************END
  
  
  //************************************* START Import AND APPLY 0-5 m mask Chris Red Sea ************************************START
  // import the coast mask from asset ****only use ee.FC if  coast mask created in map viewer****
  var DW0_5mMask = ee.FeatureCollection(region_params.DW0_5mMask).geometry();
  var DW_0_5mMask = ee.Image().byte().paint(ee.Feature(DW0_5mMask.dissolve(),{zone: 1}), "zone").clip(Banks0_3mMask.dissolve());

  
   //Mask out areas deeper then 3 m due to turbied water within 0-5 m mask
     man_geo = man_geo.where({
        test: DW_0_5mMask.eq(1)
                    .and(depth.gt(vars.turbid1_depth_cutoff)),
     value: ee.Image(0)
  });

  //************************************* END IMPORT AND APPLY 0-5 m mask Chris Red Sea ************************************END
    
  //*************************************************************************************************************** 
  //START*********************SMALL MASK, geometry created in cleanup script ***CHRIS******************************
  //***************************************************************************************************************
  var DL_BRS_mask = ee.Image().byte().paint(ee.Feature(DL_BRS_mask, {zone: 1}), "zone");
  var BRS_Deep_Mask = ee.Image().byte().paint(ee.Feature(BRS_Deep_Mask, {zone: 1}), "zone");
  var DW_SL_BRS_to_RS = ee.Image().byte().paint(ee.Feature(DW_SL_BRS_to_RS, {zone: 1}), "zone");
  var SL_BRS_mask = ee.Image().byte().paint(ee.Feature(SL_BRS, {zone: 1}), "zone");// Gulf of Aden islands SL changed BRS
  //*************Deep Lagoon with mask should be Back Reef slope (DUE TO SHALLOW BANK SOUTHERN RED SEA WITH NO EDGE)
  man_geo = man_geo.where({
  test: DL_BRS_mask.eq(1)
             .and(man_geo.eq(12)),//,
  value: ee.Image(24)
  });
  //*************Shallow Lagoon+SL with mask for Gulf Aden islands should be Back Reef slope (DUE TO SHALLOW BANK SOUTHERN RED SEA WITH NO EDGE)
  man_geo = man_geo.where({
  test: SL_BRS_mask.eq(1)
             .and(man_geo.eq(11))
             .or(man_geo.eq(21)),//,
  value: ee.Image(24)
  });
  //*************Back Reef slope = Deep Lagoon, + Plateau to no data (DUE TO ARTEFACT IN IMAGE SOUTHER RED SEA)
  //*** Areas that are partly turbid and have image aretefacts and were labelled as DL or PL
  man_geo = man_geo.where({
  test: BRS_Deep_Mask.eq(1)
             .and((man_geo.eq(24)).or(man_geo.eq(12)).or(man_geo.eq(23))),//,
  value: ee.Image(0)
  });
   //***** clean-up areas that are  DW_SL_BRS_to_RS (DUE TO Micture of classes triggered by variable bottoms RED SEA)
  //*** Areas that are partly turbid and have image aretefacts and were labelled as DL or PL
  man_geo = man_geo.where({
    test: (DW_SL_BRS_to_RS.eq(1))
                     .and(man_geo.eq(21).or(man_geo.eq(24)).or(man_geo.eq(12)).or(man_geo.eq(11))),//
    value: ee.Image(22)
  });

  //*************************************************************************************************************** 
  //END**************************SMALL MASK, geometry created in cleanup script ***CHRIS***************************
 


  /*
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not) NO WAVES WERE USED FOR RED SEA DUE TO ENCLOSED NATURE OF RED SEA NO OCEAN SWELL
  
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })*/
  
  
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  
  
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.pixels).mosaic();
  Map.addLayer(lowtide_image, {"opacity":1,"bands":["b1","b2","b3"],"min":86,"max":1906,"gamma":1}, "low tide", false);
  //Map.addLayer(lowtide_image, {bands: ['b3','b2','b1'], min:0, max:2000, gamma:1.5}, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  //  Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);
  Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", false, 0.4);// CR added
  Map.addLayer(lagoons_mask, {color: 'blue'}, "lagoons mask import", true, 0.4);// CR added*/
  //Map.addLayer(ORFtoRS_mask, {}, "ORF_IRF_RCToRS");// CR added*/
  var GCRMNext=ee.Image([param_module.global_extent_mask.gcrmn])
  Map.addLayer(GCRMNext, {}, "GCRMNextmask");// CR added GCRMN_ext
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 
// CR************************************BENTHIC 2**********************************
// CR************************************BENTHIC 2**********************************
// CR************************************BENTHIC 2**********************************
if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // extra depth cutoff refinement
  man_benthic = man_benthic.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(15)), //(geo_map.eq(14).or
    value: ee.Image(13)
  });
     // Coral/Algae and Seagrass on Deep Lagoon -> Sand as deeper water signal is dark
  man_benthic = man_benthic.where({
    test: man_benthic.eq(15)
                     .and(geo_map.eq(12)),
    value: ee.Image(11)
  });
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(12)),
    value: ee.Image(11)
  });
  man_benthic = man_benthic.where({
    test: man_benthic.eq(13)
                     .and((geo_map.eq(12)).or(geo_map.eq(11))),
    value: ee.Image(11)
  });
  // Seagrass on Reef Crest or Outer Reef Flat or reef slope or sheltered slope change to coral/algae or rock -> coral algae
  // Seagrass in generaly does not grow on hard substrate areas.
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(15)),
    value: ee.Image(15)
  });  
   // Seagrass on reef slope or sheltered slope change to rock -> rock
  // Seagrass in generaly does not grow on hard substrate areas.
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
    value: ee.Image(13)
  }); 
  // Sand on Reef crest ->  ROCK
  // Sand in generally cannot stay in high energy zone so has to be hard substrate posisble Rock
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(15)),
    value: ee.Image(13)
  }); 
  // CR Sand bright on ORF, -> Coral/Algae as its bright wave on the RC/ORF area and assinged to sand but should be C/A
    var image = ee.Image(region_params.image); 
    var image = ee.ImageCollection(region_params.pixels).mosaic(); 
    man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(14))
                     .and(image.select('b1').gt(1500)),
    value: ee.Image(15)
  });
  // Sand on Reef slope or sheltered slope -> Rubble CR ADDED unless bright than sand
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and((geo_map.eq(21)).or(geo_map.eq(22))),
                     //.and(image.select('b1').lt(1500)), //IF INCLUDED REMOVE , above
    value: ee.Image(12)
  });  
    // Seagrass to coral within mask areas
  var SG_to_AC_mask = ee.FeatureCollection(region_params.SG_to_AC_mask).geometry();
  var SG_to_ACMmask = ee.Image().byte().paint(ee.Feature(SG_to_AC_mask.dissolve(),{zone: 1}), "zone").clip(SG_to_AC_mask.dissolve());
   man_benthic = man_benthic.where({ 
    test: SG_to_ACMmask.eq(1)
                     .and(man_benthic.eq(14)),
    value: ee.Image(15)
  }); 
  
  //*************************************************************************************************************** 
  //START*********************SMALL MASK, geometry created in cleanup script ***CHRIS******************************
  //***************************************************************************************************************
  var RC_CA_ORF_mask = ee.Image().byte().paint(ee.Feature(RC_CA_ORF, {zone: 1}), "zone");
  
 
  //*************within ORF and mask where RC change to CA (based new feedback)
  man_benthic = man_benthic.where({
  test: RC_CA_ORF_mask.eq(1)
             .and(man_benthic.eq(13))
             .and(geo_map.eq(14)),//,
  value: ee.Image(15)
  });
  //*************within ORF and mask where RC change to CA (based new feedback)
 
  /* 
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
  
  */
  
  
  // final smooth for missing data due to depth
  man_benthic = man_benthic.focal_mode(2)
                           .selfMask()
  
  
  // Add the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.pixels).mosaic();
  Map.addLayer(lowtide_image, {"opacity":1,"bands":["b1","b2","b3"],"min":86,"max":1906,"gamma":1}, "low tide", false);
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(GCRMN_ext, {}, "GCRMN_ext");// CR added GCRMN_ext
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
 
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  // var low_tide_image = ee.Image(region_params.image);
    var lowtide_image = ee.ImageCollection(region_params.pixels).mosaic();
  Map.addLayer(lowtide_image, {"opacity":1,"bands":["b1","b2","b3"],"min":86,"max":1906,"gamma":1}, "low tide", false);
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  //Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
 
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    // shallow lagoon > 5m == deep lagoon
    geo_map = geo_map.where({
      test: geo_map.eq(11)
                    .and(depth.gt(vars.shallowlag_depth_cutoff)),
      value: ee.Image(12)
    });
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    geo_map = geo_map.where({
      test: depth.gt(vars.geo_depth_cutoff),
      value: ee.Image(2)
    });
   
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

   // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    clean_map = clean_map.where({
    test: distToLand.lte(vars.dist_to_land_RC)
                     .and(clean_map.eq(15)),
       value: ee.Image(14)
     });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
   // TRF
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        /*// reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();*/
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
