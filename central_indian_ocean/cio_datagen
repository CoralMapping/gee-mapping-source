/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var map_centre = /* color: #d63000 */ee.Geometry.Point([72.97105799921674, -0.5016153345839773]),
    notReef_mask = /* color: #d63000 */ee.Geometry.MultiPolygon(
        [[[[71.60342946217652, 12.65909936158879],
           [71.68308034108277, 12.474125345239695],
           [72.21866383717652, 12.433896045657525],
           [72.04562916920777, 12.675177750692391],
           [71.88907399342652, 12.675177750692391]]],
         [[[72.71755096164087, 7.914742843027254],
           [72.47310516085962, 7.264063722961609],
           [73.53654615747737, 7.143550264651811],
           [73.13365813937524, 7.720187402744904],
           [73.11443206515649, 7.948746666513787]]],
         [[[72.61774093367676, 4.713846678989372],
           [72.70425826766113, 4.445541267884463],
           [72.86905318953613, 4.50167465686995],
           [72.7797892735205, 4.745324820875827]]],
         [[[72.88046310200002, 2.000226206221777],
           [73.06860397114065, 2.089433271265267],
           [72.84887740864065, 2.1649122234602767]]],
         [[[72.96822759144477, 4.536532520872901],
           [73.05886479847602, 4.294181595870132],
           [73.21541997425727, 4.343479687246037],
           [73.1289026402729, 4.607716403032213],
           [73.05062505238227, 4.6036098332757875]]]]),
    region_extent = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[70.16383984620248, 13.135866931352913],
          [70.14682558742047, 12.617194359154508],
          [70.2690563075083, 11.807120477151644],
          [70.75799813787245, 10.497269313191726],
          [71.1883486767209, 9.918038419941574],
          [71.47614859713114, 8.090218465993845],
          [71.59908832513908, 5.52591426513123],
          [71.49717465104942, 4.724023756667231],
          [71.63786599252497, 1.9241941877135522],
          [71.79169706752515, -0.00897274020001368],
          [71.76991375572192, -1.3710512046844305],
          [71.49502445725186, -2.765513665803016],
          [71.35011857751672, -3.4180227969815036],
          [70.78266724738901, -4.467873920373559],
          [70.37679876655831, -5.156730459644507],
          [70.0414366086369, -5.673827050931439],
          [69.63155494916931, -6.620623477840547],
          [69.61632242222679, -7.654629654247595],
          [69.88596916257875, -8.325549044857805],
          [70.33702213279423, -8.649621844082038],
          [71.15440380682881, -8.861512281458042],
          [72.50302938219875, -8.730914493557336],
          [73.42866829614745, -8.55743897796769],
          [74.30064119056354, -7.7866094054231425],
          [74.78510906713221, -6.8540012175349405],
          [74.87181187774016, -5.590383988857091],
          [74.71281221914346, -4.718369474096369],
          [74.42252946027796, -3.890078116525247],
          [74.39495159818864, -2.819413619339805],
          [74.80701657465998, 0.26047582105125183],
          [74.97178689803962, 2.752606230303411],
          [74.95623341371372, 3.7796590463055497],
          [73.98795167784473, 8.437740216584354],
          [73.80616705637192, 9.279013186527788],
          [73.88180364769623, 9.530197153338912],
          [74.05559477809774, 9.730752468582905],
          [74.36104571392184, 9.786128362399857],
          [72.93930746651232, 14.377460777937939],
          [72.04231647306855, 14.34492727644073],
          [71.49518330115245, 14.31657896080115],
          [70.94844908898446, 14.180519984144992],
          [70.70783078637048, 14.098023158448601],
          [70.48943631098639, 13.930058399473841]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Coral atlas mapping project - Central Indian Ocean
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Eva Kovacs (kovacsevam2@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script generates the data as an asset (for quick load)
// - Corresponding '_classification' script performs the machine learning classificaiton
///////////////////////////////
///////////////////////////////
// Coral atlas mapping project - Central Indian Ocean
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Eva Kovacs (kovacsevam2@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script generates the data as an asset (for quick load)
// - Corresponding '_classification' script performs the machine learning classificaiton
///////////////////////////////
var region_extent = region_extent;
// load analysis params module
var param_module = require('users/mitchest/global_reefs:Modules/reef_params')

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.cio         //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################


// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. Segmentation and metrics calculation
// 4. Export data to asset

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  // OBIA settings
  pixel_based: false, // if true the metrics and output will simply be pixels (i.e. no segmentation)
  scale_factor: 20, // segment size (0 - Inf) - need to play around [~8-15 for SLIC; ~ 20 for SNIC]
  compactness: 10, // trades off color-similarity and proximity - small = more sensitive to 'colour' (a bit black box) [~800-1000 for SLIC; ~10 for SNIC]
  reduce_max: 1500, // the max size of object to be able to reduce
  segment_all_bands: true, // segement on all input bands or those chosen below
  segment_bands: (sensor_params.sname == 'dove') ? ['b1','b2','b3'] : ['B2','B3','B4'], // only handles Landsat/Sentinel-2/Dove
  
  // analysis parameters
  depth_limit: 2500, // depth limit for analysis in cm 
  min_depth: 0, // the minimum valid depth (also allows use of bathy/topo layers)
  all_bands: (sensor_params.sname == 'dove') ? ['b1','b2','b3','b4'] : ['B1','B2','B3','B4','B5'], // only handles Landsat/Sentinel-2/Dove
  red_band: (sensor_params.sname == 'dove') ? 'b3' : 'B4', // only handles Landsat/Sentinel-2/Dove
  green_band: (sensor_params.sname == 'dove') ? 'b2' : 'B3', // only handles Landsat/Sentinel-2/Dove
  blue_band: (sensor_params.sname == 'dove') ? 'b1' : 'B2', // only handles Landsat/Sentinel-2/Dove
  nir_band: (sensor_params.sname == 'dove') ? 'b4' : 'B5', // doesn't handle the Landsat-8/Sentinel-2 difference
  use_glcm: true, // use glcm metrics
  small_object: 400, // the smallest size a group of image pixels should be to not be considered noise
  
  // export options
  do_export: true, // export the results?
  export_scale: sensor_params.pixel, // pixel size to export at
  segments_output_name: region_params.sname + '_'+ 'segmentation',
  pixels_output_name: region_params.sname + '_' + 'pixels',
  asset_output: region_params.asset // asset path
}

var output_name = (vars.pixel_based) ? vars.pixels_output_name : vars.segments_output_name // export file path/name



// 2. Data loads & vis

Map.centerObject(map_centre, 6)

// load input data
var reflec = ee.Image(region_params.image).select(vars.all_bands)

// import depth data (NB depth is 16bit s integer in centimeters)
var depth = ee.Image(region_params.depth_composite).rename('depth')

// define a mask based on min/max depth
var depth_mask = depth.lt(vars.depth_limit).and(depth.gt(vars.min_depth)).and(reflec.select(0).gt(0))//.updateMask(waves)

// "NOT REEF" CLEAN
// var notReef_mask = ee.FeatureCollection(region_params.notreef_mask).geometry()
var not_reef_img = ee.Image().byte().paint(ee.Feature(notReef_mask, {zone: 1}), "zone");

// remove
depth_mask = depth_mask.where({
  test: not_reef_img.eq(1),
  value: ee.Image(0)
});

// clip and load other variables
var depth = depth.updateMask(depth_mask).int16().rename('depth'); // mask out depth below set limit

// add layers to the map
Map.addLayer(reflec, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname, false); // image data
Map.addLayer(depth, {bands: ['depth'], min: vars.min_depth, max: vars.depth_limit, palette:['#9ecae1','#6baed6','#4292c6','#2171b5','#08519c','#08306b']}, "Depth covariate (cm)", false); // water depth



// 3. Segmentation and metrics calculation

// calculate slope
var slope = ee.Terrain.slope(depth) // slope in degress

if (vars.use_glcm) {
  // glcm texture (mixed usefulness - will vary with image quality and type)
  var depth_glcm = depth.int16().glcmTexture().select(['depth_ent']).focal_max(5).rename('depth_maxent').multiply(100).int16() // maximum neighbourhood glcm entropy on depth
  var blue_glcm = reflec.select(vars.blue_band).int16().glcmTexture().select([vars.blue_band+'_savg']).focal_median(5).int16()
  var green_glcm = reflec.select(vars.green_band).int16().glcmTexture().select([vars.green_band+'_savg']).focal_median(5).int16()
}

// local variance in depth and red reflectance (5 pixels)
var depth_var = depth.reduceNeighborhood({reducer: ee.Reducer.stdDev(), kernel: ee.Kernel.circle(5)}).rename('depth_stdDev').multiply(10).int16()
var red_var = reflec.select(vars.red_band).reduceNeighborhood({reducer: ee.Reducer.stdDev(), kernel: ee.Kernel.circle(5)}).rename('red_stdDev').multiply(10).int16()

// segmentation functions

// ***SNIC segmentation***
  var run_snic = function(bands) {
    return(
    ee.Algorithms.Image.Segmentation.SNIC({
    image: bands,
    seeds: ee.Algorithms.Image.Segmentation.seedGrid(vars.scale_factor, "hex"),
    //size: 1000,
    neighborhoodSize: vars.scale_factor*2,
    compactness: vars.compactness,
    connectivity: 4
    })
    )
  }
  
  

// calculate pixel or object data
if (vars.pixel_based) {
  // pixel-based data generation
  // combine data to move forward with
  var all_data = reflec.addBands(depth).addBands(slope)//.addBands(waves)
                  .addBands(depth_var).addBands(red_var)
                  .updateMask(depth_mask) // make sure all layers are clipped down
  if (vars.use_glcm) { // add glcm if using
    all_data = all_data.addBands(depth_glcm).addBands(blue_glcm).addBands(green_glcm).updateMask(depth_mask)
  }
  
} else {
  //// OBIA data generation
  
  if (vars.segment_all_bands) { 
    // do the segmentation on all input bands (internal GEE mean calcs seem to be faster)
    var segmented_data_mean = run_snic(reflec
                                       .addBands(depth)
                                       .addBands(slope)//.addBands(waves)
                                       .updateMask(depth_mask)
                                       )
                                       .regexpRename('_mean', '')
    Map.addLayer(segmented_data_mean.randomVisualizer().reproject(ee.Projection('EPSG:4326').atScale(sensor_params.pixel)), {}, "SNIC clusters", false)
    // remove the cluster band - index starts at 0
    segmented_data_mean = segmented_data_mean.select(ee.List.sequence(1, segmented_data_mean.bandNames().length().subtract(1)))
    segmented_data_mean = segmented_data_mean.cast(ee.Dictionary.fromLists(segmented_data_mean.bandNames(), ee.List.repeat('int16', segmented_data_mean.bandNames().length())))
    
  } else {
    // segment on the bands specified by var segment_on
    var segment_on = reflec.select(vars.segment_bands)//.addBands(depth.multiply(100)) // which data to segment on (transform depth so it's on a similar scale - may help numerically)
                         .updateMask(depth_mask)
    var segmented_data = run_snic(segment_on)
    Map.addLayer(segmented_data.randomVisualizer().reproject(ee.Projection('EPSG:4326').atScale(sensor_params.pixel)), {}, "SNIC clusters", false)
    // Calculate object statistics
    var segmented_data_mean = reflec.addBands(depth).addBands(slope)//.addBands(waves)
                              //.addBands(depth_glcm).addBands(blue_glcm).addBands(green_glcm)
                              //.addBands(depth_var).addBands(red_var)
                              .addBands(segmented_data.select('clusters'))
                              .reduceConnectedComponents(ee.Reducer.mean(), 'clusters', vars.reduce_max) // need to be mindful that really big objects may make this fall over
    segmented_data_mean = segmented_data_mean.cast(ee.Dictionary.fromLists(segmented_data_mean.bandNames(), ee.List.repeat('int16', segmented_data_mean.bandNames().length())))
    
  
  }
  
  // combine data to move forward with
  var all_data = segmented_data_mean
                 //.addBands(segmented_data_sd)
                 //.addBands(depth_var).addBands(red_var)
                 .updateMask(depth_mask)
  //Map.addLayer(all_data.reproject(ee.Projection('EPSG:4326').atScale(sensor_params.pixel)), {bands: ['b3','b2','b1'], min: 95, max: 3000}, "Segmented image/predictor data (OBIA)", false) 
}




// Add any extra indices needed

all_data = all_data
              .addBands(all_data.select(vars.red_band).divide(all_data.select(vars.blue_band)).multiply(1000).int16().rename('rb'))
              .addBands(all_data.select(vars.green_band).divide(all_data.select(vars.blue_band)).multiply(1000).int16().rename('gb'))
              .addBands(all_data.select(vars.red_band).divide(all_data.select(vars.green_band)).multiply(1000).int16().rename('rg'))

// clean up noise
all_data = all_data.updateMask(depth_mask.selfMask().connectedPixelCount(vars.small_object, false).gte(vars.small_object))
Map.addLayer(all_data, {}, "Model predictor data", false)
// add noreefmask to viewer - check for slivers between polys
Map.addLayer(not_reef_img, {}, "noReef_mask", false);



// 4. Export data to asset

// export if specified in input params
if (vars.do_export) {
  var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry()
  Map.addLayer(region_extent, {}, "region extent (export geometry)", false);
  
  Export.image.toAsset({
    image: all_data,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    scale: vars.export_scale,
    region: region_extent,
    maxPixels: 1e13
    //pyramidingPolicy:{'.default': 'mean'},
  });
}