/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var notReef_mask = /* color: #d63000 */ee.Geometry.MultiPoint(),
    artifact_layer = /* color: #98ff00 */ee.Geometry.MultiPoint(),
    center_map = /* color: #d63000 */ee.Geometry.Point([73.36350406430057, 3.4513743887798998]),
    cio_region_outline = ee.FeatureCollection("projects/coral_atlas/central_indian_ocean/in_out/cio"),
    region_extent = /* color: #d63000 */ee.Geometry.Polygon(
        [[[70.16383984620248, 13.135866931352913],
          [70.14682558742047, 12.617194359154508],
          [70.2690563075083, 11.807120477151644],
          [70.75799813787245, 10.497269313191726],
          [71.1883486767209, 9.918038419941574],
          [71.47614859713114, 8.090218465993845],
          [71.59908832513908, 5.52591426513123],
          [71.49717465104942, 4.724023756667231],
          [71.63786599252497, 1.9241941877135522],
          [71.79169706752515, -0.00897274020001368],
          [71.76991375572192, -1.3710512046844305],
          [71.49502445725186, -2.765513665803016],
          [71.35011857751672, -3.4180227969815036],
          [70.78266724738901, -4.467873920373559],
          [70.37679876655831, -5.156730459644507],
          [70.0414366086369, -5.673827050931439],
          [69.63155494916931, -6.620623477840547],
          [69.61632242222679, -7.654629654247595],
          [69.88596916257875, -8.325549044857805],
          [70.33702213279423, -8.649621844082038],
          [71.15440380682881, -8.861512281458042],
          [72.50302938219875, -8.730914493557336],
          [73.42866829614745, -8.55743897796769],
          [74.30064119056354, -7.7866094054231425],
          [74.78510906713221, -6.8540012175349405],
          [74.87181187774016, -5.590383988857091],
          [74.71281221914346, -4.718369474096369],
          [74.42252946027796, -3.890078116525247],
          [74.39495159818864, -2.819413619339805],
          [74.80701657465998, 0.26047582105125183],
          [74.97178689803962, 2.752606230303411],
          [74.95623341371372, 3.7796590463055497],
          [73.98795167784473, 8.437740216584354],
          [73.80616705637192, 9.279013186527788],
          [73.88180364769623, 9.530197153338912],
          [74.05559477809774, 9.730752468582905],
          [74.36104571392184, 9.786128362399857],
          [72.93930746651232, 14.377460777937939],
          [72.04231647306855, 14.34492727644073],
          [71.49518330115245, 14.31657896080115],
          [70.94844908898446, 14.180519984144992],
          [70.70783078637048, 14.098023158448601],
          [70.48943631098639, 13.930058399473841]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Viewing script for looking at reefs and classifications for each region. 
// From this region Timor Sea onwards the map_viewer script is going to be used from the very beginning
// in the workflow 

//Viewer for cio

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove ;      //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.cio;       //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################


/*
// Choose which layers will be shown in the map viewer
var vars = {
  raw: true, // set to true if you want to view the raw classifications for benthic and geo
  geo_cleanup_stage: 3, // set to 0, 1, 2 or 3 - this controls the display of the geo clean stages (0 = cleanup not ready)
  benthic_cleanup_stage: 0, // set to 0, 1 or 2 - this controls the display of the benthic clean stages (0 = cleanup not ready)
};

*/
// choose where to centre the map (link this dynamically to map app?)
Map.centerObject(center_map, 6);

// Add low-tide base map to viewer
// var low_tide_image = ee.Image(region_params.pixels);
// Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + " from stack", false); // image data

//print (region_params.image[0])
var low_tide_image_dove = ee.Image(region_params.image);
Map.addLayer(low_tide_image_dove, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + ' low tide', false); // image data

Map.addLayer(cio_region_outline, {color:'#00FFFF'}, "region outline", false)
/*

// Load the raw classifications
if (vars.raw) {
// geo raw (test if more than one map exists for the region)
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0, false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }

  // benthic raw (test if more than one map exists for the region)
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
    var benthic_map_raw = ee.Image(region_params.benthic_map[0]).unmask(0, false)
                     .add(ee.Image(region_params.benthic_map[1]).unmask(0, false))
                     .selfMask();
  } else {
      var benthic_map_raw = ee.Image(region_params.benthic_map);
  }

  // Add the raw region classification to the viewer
  Map.addLayer(geo_map_raw, map_palettes.geo, 'Geomorphic RAW', false);
  Map.addLayer(benthic_map_raw.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW', false);
  Map.addLayer(benthic_subreg2_no_b4p.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW (no band4 outer reefs)', false); // test without band b4p
}

// Add geo clean stage 1 to the viewer
if (vars.geo_cleanup_stage == 1||vars.geo_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'Geomorphic - stage 1 clean', false);
  //Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean1_10m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_10m_4m), map_palettes.geo, 'timor_geo_clean1_10m_4m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_15m), map_palettes.geo, 'timor_geo_clean1_15m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean1_15m_4m), map_palettes.geo, 'timor_geo_clean1_15m_4m', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.geo_cleanup_stage == 2||vars.geo_cleanup_stage == 3) {
  Map.addLayer(ee.Image(region_params.geo_map_clean2), map_palettes.geo, 'Geomorphic - stage 2 clean', false);
  //Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean2_10m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_10m_4m), map_palettes.geo, 'timor_geo_clean2_10m_4m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_15m), map_palettes.geo, 'timor_geo_clean2_15m_5m', false);
  //Map.addLayer(ee.Image(timor_geo_clean2_15m_4m), map_palettes.geo, 'timor_geo_clean2_15m_4m', false);
}

// Add geo clean stage 3 to the viewer
if (vars.geo_cleanup_stage == 3) {
  var geo_map_clean3 = ee.Image(region_params.geo_map_clean3)
  Map.addLayer(geo_map_clean3.updateMask(geo_map_clean3.gt(2)), map_palettes.geo, 'Geomorphic - stage 3 clean', true);
}

// Add benthic clean stage 1 to the viewer
if (vars.benthic_cleanup_stage == 1||vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean1), map_palettes.benthic, 'Benthic - stage 1 clean', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean2), map_palettes.benthic, 'Benthic - stage 2 clean', false);
}

// Geo Training Data - Needs more work + add flag to show
var geo_train = ee.FeatureCollection(region_params.geo_train_library);

var geo_buff = function(feature) {
  return feature.buffer(20);   // substitute in your value of Z here
};

var geo_train_buff = geo_train.map(geo_buff)

// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// Paint the interior of the polygons with different colors.
var geo_fill = empty.paint({
  featureCollection: geo_train_buff,
  color: 'class_num',
});

Map.addLayer(geo_fill, map_palettes.geo, 'Geo Training Data', false);


////////// UI SET UP //////////

//Generate title
var title = ui.Label({
  value: 'Coral Atlas map classes',
  style: {fontWeight: 'bold', fontSize: '14px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
pkg_vis.add_lgds([title, geo_legend, benthic_legend]);//, mask_legend])
// generate the legend

*/