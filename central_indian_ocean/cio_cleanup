/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    test_area = 
    /* color: #98ff00 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[120.29526303750056, -4.745741910602106],
          [120.29526303750056, -5.259104744078933],
          [120.65060208779353, -5.259104744078933],
          [120.65060208779353, -4.745741910602106]]], null, false),
    sg_on_orf = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[123.83947602878932, -5.700206722814475],
           [123.60876313816432, -5.514332908680738],
           [123.38079682957057, -5.385827151288308],
           [123.24346772800807, -5.44051381148037],
           [123.40826264988307, -5.842305025420264],
           [123.75707856785182, -6.074503075469306],
           [123.99877778660182, -5.8313756556505325],
           [123.95757905613307, -5.801318792070571],
           [123.90539399753932, -5.7876560512526956],
           [123.84222261082057, -5.73573463093947]]],
         [[[120.89678926447554, -6.5350831023623845],
           [120.90365571955367, -6.71378307027377],
           [120.93386812189742, -6.8365161368000305],
           [120.95633576699693, -7.022408234722875],
           [121.08570018842265, -7.152132342755677],
           [121.6243259023389, -7.385306475679],
           [121.84130588280765, -7.254545004889939],
           [121.4265719960889, -6.67656977733306],
           [121.38399997460452, -6.45555604818173],
           [121.2507907460889, -6.384592753271515],
           [121.09972873437015, -6.368215207549017],
           [120.99398532616702, -6.406428665856303]]]]),
    notReef_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[71.60342946217652, 12.65909936158879],
           [71.68308034108277, 12.474125345239695],
           [72.21866383717652, 12.433896045657525],
           [72.04562916920777, 12.675177750692391],
           [71.88907399342652, 12.675177750692391]]],
         [[[72.71755096164087, 7.914742843027254],
           [72.47310516085962, 7.264063722961609],
           [73.53654615747737, 7.143550264651811],
           [73.13365813937524, 7.720187402744904],
           [73.11443206515649, 7.948746666513787]]],
         [[[72.61774093367676, 4.713846678989372],
           [72.70425826766113, 4.445541267884463],
           [72.86905318953613, 4.50167465686995],
           [72.7797892735205, 4.745324820875827]]],
         [[[72.88046310200002, 2.000226206221777],
           [73.06860397114065, 2.089433271265267],
           [72.84887740864065, 2.1649122234602767]]],
         [[[72.96822759144477, 4.536532520872901],
           [73.05886479847602, 4.294181595870132],
           [73.21541997425727, 4.343479687246037],
           [73.1289026402729, 4.607716403032213],
           [73.05062505238227, 4.6036098332757875]]]]),
    artifact_layer = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPoint(),
    center_map = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Point([73.36350406430057, 3.4513743887798998]),
    region_extent = /* color: #d63000 */ee.Geometry.Polygon(
        [[[70.16383984620248, 13.135866931352913],
          [70.14682558742047, 12.617194359154508],
          [70.2690563075083, 11.807120477151644],
          [70.75799813787245, 10.497269313191726],
          [71.1883486767209, 9.918038419941574],
          [71.47614859713114, 8.090218465993845],
          [71.59908832513908, 5.52591426513123],
          [71.49717465104942, 4.724023756667231],
          [71.63786599252497, 1.9241941877135522],
          [71.79169706752515, -0.00897274020001368],
          [71.76991375572192, -1.3710512046844305],
          [71.49502445725186, -2.765513665803016],
          [71.35011857751672, -3.4180227969815036],
          [70.78266724738901, -4.467873920373559],
          [70.37679876655831, -5.156730459644507],
          [70.0414366086369, -5.673827050931439],
          [69.63155494916931, -6.620623477840547],
          [69.61632242222679, -7.654629654247595],
          [69.88596916257875, -8.325549044857805],
          [70.33702213279423, -8.649621844082038],
          [71.15440380682881, -8.861512281458042],
          [72.50302938219875, -8.730914493557336],
          [73.42866829614745, -8.55743897796769],
          [74.30064119056354, -7.7866094054231425],
          [74.78510906713221, -6.8540012175349405],
          [74.87181187774016, -5.590383988857091],
          [74.71281221914346, -4.718369474096369],
          [74.42252946027796, -3.890078116525247],
          [74.39495159818864, -2.819413619339805],
          [74.80701657465998, 0.26047582105125183],
          [74.97178689803962, 2.752606230303411],
          [74.95623341371372, 3.7796590463055497],
          [73.98795167784473, 8.437740216584354],
          [73.80616705637192, 9.279013186527788],
          [73.88180364769623, 9.530197153338912],
          [74.05559477809774, 9.730752468582905],
          [74.36104571392184, 9.786128362399857],
          [72.93930746651232, 14.377460777937939],
          [72.04231647306855, 14.34492727644073],
          [71.49518330115245, 14.31657896080115],
          [70.94844908898446, 14.180519984144992],
          [70.70783078637048, 14.098023158448601],
          [70.48943631098639, 13.930058399473841]]]),
    mid_mask = /* color: #25d610 */ee.Geometry.MultiPolygon(
        [[[[72.4610278099535, -5.562233749561943],
           [72.41845578846913, -5.63808761806013],
           [72.45072812733632, -5.657220366789967],
           [72.51733274159413, -5.650387314784492],
           [72.57226438221913, -5.63740429392719],
           [72.61140317616444, -5.686601569370111],
           [72.61620969471913, -5.712565104599872],
           [72.6196429222582, -5.7408150998525755],
           [72.56059140858632, -5.774290997216448],
           [72.48574704823476, -5.790003492188808],
           [72.35185117421132, -5.762677133849532],
           [72.32163877186757, -5.809131157116495],
           [72.45965451893788, -5.887684373332356],
           [72.51115293202382, -6.0311006197836265],
           [72.6196429222582, -6.040660364522768],
           [72.60453672108632, -5.889050418406293],
           [72.61758298573476, -5.874023737994912],
           [72.697233864641, -5.792052915868868],
           [72.68487424550038, -5.667024561906921],
           [72.62856931385976, -5.531034052292801],
           [72.48094052968007, -5.553587425032556]]],
         [[[71.78100203075167, -5.265004840441034],
           [71.74804304637667, -5.294405329632169],
           [71.76383589305635, -5.340896270048868],
           [71.7665824750876, -5.373711283082955],
           [71.76040266551729, -5.3860164577893785],
           [71.76383589305635, -5.43660177444672],
           [71.7995414594626, -5.441386652544458],
           [71.82632063426729, -5.419512613874888],
           [71.79610823192354, -5.423614056571237],
           [71.79610823192354, -5.413360397610425],
           [71.80709456004854, -5.403790159017131],
           [71.92245100536104, -5.3853328435036465],
           [71.94442366161104, -5.2793633930522885],
           [71.84760664500948, -5.289619298546896],
           [71.80846785106417, -5.271842287856811]]],
         [[[72.19239869176108, -4.976010111362473],
           [72.23634400426108, -5.060827757725262],
           [72.26518311558921, -5.076558846254171],
           [72.3307577615853, -5.077584773495865],
           [72.36989655553062, -4.9164944187053585],
           [72.3468939310189, -4.901443628438987],
           [72.26140656529624, -4.900759493544874],
           [72.32251801549155, -4.861420562169714],
           [72.40903534947593, -4.723887409659959],
           [72.31136449486583, -4.764262339979951],
           [72.27616944371421, -4.816263479725225],
           [72.14776673375327, -4.872367278902863],
           [72.16973939000327, -4.95104153565564]]],
         [[[72.66961731969077, -4.991101947052824],
           [72.7259222513314, -5.030775174492281],
           [72.73965516148765, -4.855647795717727],
           [72.66137757359702, -4.861121223246245]]],
         [[[72.9814733886298, 7.064232667357043],
           [73.02267194397342, 6.9954031236316],
           [73.04052465403512, 6.951783102917324],
           [73.11948853674745, 6.990632394835707],
           [73.1902127136412, 6.992677017770929],
           [73.24102426413668, 6.969504262986051],
           [73.25201057484631, 6.848169398911692],
           [73.1792035902626, 6.739046879093235],
           [73.10161786042725, 6.653801069633128],
           [73.07656688618184, 6.601632539115404],
           [73.13116154932719, 6.477159114928767],
           [73.30399287776989, 6.274815427201493],
           [73.37188674031422, 6.431565596526007],
           [73.27222750366143, 6.644264300262742],
           [73.3474538954149, 6.8331708265003845],
           [73.41131159783818, 6.992677079427074],
           [73.3220480383754, 7.109947071935619],
           [73.05219755142848, 7.153552140234996],
           [72.8599376713748, 7.246199154593067],
           [72.6573781550491, 7.148783031935427],
           [72.69102361570256, 6.970246595436578],
           [72.79127341682093, 6.845503186410212],
           [72.73908857187415, 6.703678759709614],
           [72.69445868940883, 6.5381141083943985],
           [72.50203547620735, 6.4934939374148275],
           [72.45946358867266, 6.335872557814679],
           [72.4828094030121, 6.163867040476306],
           [72.5981653812223, 6.02868060568022],
           [72.73755389831189, 6.099691843622509],
           [72.85290990302204, 6.184346800379574],
           [72.8680160449802, 6.262162792835661],
           [72.90612553601419, 6.3412548747224164],
           [72.89067945719697, 6.388953791568019],
           [72.84913610201185, 6.4448378900567125],
           [72.81033805247608, 6.405191519699388],
           [72.72656763645033, 6.402462090448499],
           [72.64760370591908, 6.296002860548297],
           [72.60709176500106, 6.194982885622728],
           [72.58374590552518, 6.178599440009616],
           [72.53362098431332, 6.212731061371572],
           [72.54117406385754, 6.2550511828273745],
           [72.60503187172326, 6.419520825659378],
           [72.70322178918056, 6.469329001765814],
           [72.82956405062811, 6.476151652773823],
           [72.87419582709872, 6.51026355650411],
           [72.85908968752065, 6.517767864529792],
           [72.85565647397527, 6.539597939986592],
           [72.85016333247951, 6.565519915616548],
           [72.83643047919266, 6.599625720524212],
           [72.86320954312748, 6.620088076385116],
           [72.89616838753058, 6.740798622716085],
           [72.9353070131648, 6.798074499265656],
           [72.93187379600568, 6.8839754940131215],
           [72.90303480781014, 6.92623853977908],
           [72.82475756103644, 6.993033685563839],
           [72.7636463821612, 7.052323417760152],
           [72.79935179246075, 7.104110533317157],
           [72.84879004878768, 7.10479190303995],
           [72.90715465662379, 7.11364963022863],
           [72.9607127670418, 7.117737756638231]]],
         [[[73.03501025240526, 8.380884273019994],
           [73.10230151217088, 8.349634628890383],
           [73.08994189303026, 8.302076025576719],
           [73.05972949068651, 8.242279897296612],
           [72.96634570162401, 8.235484309449424],
           [72.83725634615526, 8.2218927838777],
           [72.92102709810838, 8.102267354130591],
           [73.16547289888963, 8.107705649124126],
           [73.26297656099901, 8.28848679363447],
           [73.24512377779588, 8.503141269298094],
           [73.10779467623338, 8.539810789972956],
           [73.04462328951463, 8.497708448923209]]],
         [[[72.3019705579088, 10.219349309906503],
           [72.41320713017443, 10.030082651297162],
           [72.54504306767443, 10.232864070245974]]],
         [[[72.12893588994005, 9.87453074950338],
           [72.3019705579088, 9.923233218130521],
           [72.13442905400255, 10.059831933302098]]],
         [[[72.39398105595568, 10.973921429023482],
           [72.18386753056505, 10.759483706782845],
           [72.2360525891588, 10.68662093802307],
           [72.39398105595568, 10.72170520211932],
           [72.4997244641588, 10.570544171130882],
           [72.63293369267443, 10.601592277125762],
           [72.62881381962755, 10.632637234297222],
           [72.67962558720568, 10.704163577688568],
           [72.8348074719713, 10.979314095484108],
           [72.55053623173693, 11.182814823425264],
           [72.4557791516588, 11.026495721714456]]],
         [[[71.94537890571331, 10.996459785849844],
           [71.98176941214254, 11.015336088604537],
           [72.09712585745504, 11.063859708469515],
           [71.96117004690817, 11.11237529415959]]],
         [[[71.95705017386129, 11.27942257319617],
           [71.98726257620504, 11.233628889427926],
           [72.13832458792379, 11.256526641893506],
           [72.30037292776754, 11.182439110793444],
           [72.27840027151754, 11.387143576725533],
           [71.99824890433004, 11.384451047042944]]],
         [[[72.64644226370504, 11.337327658472587],
           [72.90874084768942, 11.294236615470934],
           [72.99113830862692, 11.428874524587675],
           [72.97465881643942, 11.515009281135061],
           [72.99937805472067, 11.60246289878074],
           [72.88814148245504, 11.597081926837859],
           [72.83183354899933, 11.714418409565544],
           [72.75075681027974, 11.79677555536155]]]]),
    chagos_extent = 
    /* color: #12d6cd */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[69.78325931094987, -4.155237145551639],
          [69.78325931094987, -8.260972289180684],
          [73.91411868594987, -8.260972289180684],
          [73.91411868594987, -4.155237145551639]]], null, false),
    maldives_extent = 
    /* color: #f331ff */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[69.95904056094987, 13.298212886857753],
          [69.95904056094987, -2.312553106145913],
          [76.02349368594987, -2.312553106145913],
          [76.02349368594987, 13.298212886857753]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - Central Indian Ocean
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Eva Kovacs (kovacsevam2@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.cio;          //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF - not used for Indo
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1500, //depth in centimetres
  chagos_depth_cutoff: 1000, //depth cut off for southern chagos region only
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 1000, //depth in centimetres
  
  //############
  // Clean-up stage selection
  cleanup_stage: 1, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1_twodepths';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2_twodepths';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);
 // var man_geo = ee.Image(region_params.geo_map_clean2).clip(indo_west); // use this when testing for a small area
  /*
  // import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  //var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  //Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", true, 0.4);
 var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  // the "MID MASK" CLEAN
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });
  */
  // the "REEF MASK" CLEAN
  
  // Define a kernel for reef mask Morphological Operations
  var kernel_rm = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create reef mask to clean areas inside the reef - Perform an dilation of deepwater
  var reef_mask = man_geo.eq(2)
            .focal_max({kernel: kernel_rm, iterations: 2});
  
  // Reef crest, slope, sheltered slope (within reef mask) -> Inner reef flat
  man_geo = man_geo.where({
    test: reef_mask.eq(0)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22))),
    value: ee.Image(13)
  });
  
  // the "DEEP WATER" CLEAN
  
  // Define a kernel for deep water Morphological Operations
   var kernel_dw = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

   // Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
   var deepwater = man_geo.eq(2)
             .focal_max({kernel: kernel_dw, iterations: 2})
             .focal_min({kernel: kernel_dw, iterations: 2});
    
  
   // Deep lagoon (outside reef mask and global mask) -> deepwater 
   man_geo = man_geo.where({
     test: deepwater.eq(1)
                     .and(man_geo.eq(12)),
     value: ee.Image(2)
   });
  
  
   // Reef classes in deepwater -> deepwater
   man_geo = man_geo.where({
     test: deepwater.eq(1)
                     .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(24))),
     value: ee.Image(2)
   });
  
  
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })
  
  
  
  
  /*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone").clip(not_reef_crest);
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone").clip(not_deep_water);
  
  
  // Reef crest -> Inner reef flat (inside the reef)
  man_geo = man_geo.where({
    test: notreefcrest.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(13)
  });
  
  // Deep water -> Deep lagoon (inside the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(2)),
    value: ee.Image(12)
  });
  
  ##############
  */
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.image);
  Map.addLayer(lowtide_image, region_params.visParams, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(1)), {palette: ['F8FF23'], opacity: 0.4}, 'global_reef_mask - land', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(3)), {palette: ['0000ff'], opacity: 0.4}, 'global_reef_mask - reef', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(2)), {palette: ['FF0000'], opacity: 0.4}, 'global_reef_mask - water', false);

  // display distance to land mask for assessing cut-off distances
  var distToLand = ee.Image(region_params.distToLand);
    
  //Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
  Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
  
  // display distance to water mask
  var distToWater = ee.Image(region_params.distToWater);
    
  Map.addLayer(distToWater.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'distToWater ' + vars.dist_to_land_ORF + 'm', false);
  
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // extra depth cutoff refinement
  man_benthic = man_benthic.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });
    
  // Seagrass on RC or ORF -> Coral/Algae
  
  // except for these two areas
  var sg_orf = ee.Image().byte().paint(ee.Feature(sg_on_orf, {zone: 1}), "zone").unmask(geo_map.eq(42));
 /* 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(14).or(geo_map.eq(15)))
                     .and(sg_orf.eq(0)),
    value: ee.Image(15)
  });  
  */
    
  /*
  
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
  
  */
  
  
  // final smooth for missing data due to depth
  man_benthic = man_benthic.focal_mode(2)
                           .selfMask()
  
  
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    var chagos = ee.Image().byte().paint(ee.Feature(chagos_extent, {zone: 1}), "zone").clip(chagos_extent);
    var maldives = ee.Image().byte().paint(ee.Feature(maldives_extent, {zone: 1}), "zone").clip(maldives_extent);
    
    // shallow lagoon > 5m == deep lagoon
    geo_map = geo_map.where({
      test: geo_map.eq(11)
                    .and(depth.gt(vars.shallowlag_depth_cutoff)),
      value: ee.Image(12)
    });
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    //shallower for chagos
    geo_map = geo_map.where({
      test: chagos.eq(1)
                    .and(depth.gt(vars.chagos_depth_cutoff)),
      value: ee.Image(2)
    });
    
    // deeper for maldives and lakedives
    geo_map = geo_map.where({
      test: maldives.eq(1)
      .and(depth.gt(vars.geo_depth_cutoff)),
      value: ee.Image(2)
    });
    
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

    // // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    // clean_map = clean_map.where({
    //   test: distToLand.lte(vars.dist_to_land_RC)
    //                 .and(clean_map.eq(15)),
    //   value: ee.Image(16)
    // });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
    
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // the "LAND MASK" CLEAN  ****to be moved to datagen for next region****
      var global_reef_mask = ee.Image(region_params.global_reef_mask);
  
      clean_map = clean_map.where({
        test: global_reef_mask.eq(1),
        value: ee.Image(0)
      });
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        /*// reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();*/
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
