/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    imageVisParam2 = {"opacity":1,"bands":["b3","b2","b1"],"min":44.94,"max":2202.06,"gamma":1},
    waves = ee.Image("projects/coral_atlas/coral_sea/in_out/cosea_waves"),
    wavespng = ee.Image("projects/coral_atlas/png_solomons/in_out/pns_waves"),
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    midMask = /* color: #15d623 */ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                114.1836661868681,
                -28.06032233118577
              ],
              [
                113.98592109753788,
                -28.149958979225445
              ],
              [
                113.93099201841366,
                -28.29757442089106
              ],
              [
                113.89803477459687,
                -28.59942534714115
              ],
              [
                113.88910645970527,
                -28.739193431038426
              ],
              [
                113.97727390196623,
                -28.817412918752858
              ],
              [
                114.04359722536742,
                -28.912432857086305
              ],
              [
                114.00447247489087,
                -28.955689713174205
              ],
              [
                113.98866817328616,
                -29.00855374403404
              ],
              [
                113.93924354728621,
                -29.00858646548108
              ],
              [
                113.88708352892287,
                -28.985779691464067
              ],
              [
                113.74972660573967,
                -29.0661835563608
              ],
              [
                114.36493259739895,
                -30.021905267375896
              ],
              [
                114.88401168509729,
                -30.031416884215687
              ],
              [
                114.99974312829477,
                -30.026070516607547
              ],
              [
                115.00760720732957,
                -29.928526985624377
              ],
              [
                115.00120255843638,
                -29.867675270621586
              ],
              [
                114.97825897857251,
                -29.75975361075793
              ],
              [
                114.93240702685796,
                -29.76077813970033
              ],
              [
                114.89909283248286,
                -29.82535815480512
              ],
              [
                114.84828401828509,
                -29.80793695001803
              ],
              [
                114.84144409526559,
                -29.772500592397247
              ],
              [
                114.86654842118445,
                -29.752539798010364
              ],
              [
                114.89488672415692,
                -29.767893620567243
              ],
              [
                114.96853273611804,
                -29.762985915759927
              ],
              [
                115.00284250400888,
                -29.695903064880497
              ],
              [
                115.00025273751571,
                -29.66532559945509
              ],
              [
                114.99936306124128,
                -29.645476019369674
              ],
              [
                115.0172722702817,
                -29.49854766913029
              ],
              [
                114.86752847021478,
                -29.06256786138556
              ],
              [
                114.29627107023296,
                -28.091824773631906
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                113.50234545982664,
                -28.396491874993792
              ],
              [
                113.50234545982664,
                -28.595632967130076
              ],
              [
                113.61083545006102,
                -28.713732555400057
              ],
              [
                113.69460620201414,
                -28.699278530764694
              ],
              [
                113.70833911217039,
                -28.67879857836598
              ],
              [
                113.73992480552977,
                -28.657109557537577
              ],
              [
                113.73168505943602,
                -28.57754476767505
              ],
              [
                113.67812670982664,
                -28.53412039829782
              ],
              [
                113.63555468834227,
                -28.43876530955035
              ],
              [
                113.61770190513914,
                -28.417026793914967
              ],
              [
                113.59435595787352,
                -28.420650189889194
              ],
              [
                113.58336962974852,
                -28.36145253546554
              ],
              [
                113.55590380943602,
                -28.337280731161993
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                113.5806230477173,
                -28.70228995056192
              ],
              [
                113.56002368248292,
                -28.75286884112655
              ],
              [
                113.57238330162352,
                -28.884620025231996
              ],
              [
                113.74129809654539,
                -28.907463979857145
              ],
              [
                113.75640429771727,
                -28.828089708010445
              ],
              [
                113.7124589852173,
                -28.781760072103076
              ],
              [
                113.68429875402951,
                -28.724869930834945
              ],
              [
                113.66302050865477,
                -28.716141365354744
              ],
              [
                113.62731618784753,
                -28.70108881986832
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                113.05165387368004,
                -26.015688107377912
              ],
              [
                112.97474957680504,
                -25.865026492915984
              ],
              [
                112.89784527993004,
                -25.706748568512428
              ],
              [
                112.88411236977379,
                -25.64733995719617
              ],
              [
                112.87312604164879,
                -25.580469901665214
              ],
              [
                112.94179059243004,
                -25.459017705866607
              ],
              [
                113.05714703774254,
                -25.48629317966306
              ],
              [
                113.02418805336754,
                -25.255496922762518
              ],
              [
                113.08461285805504,
                -24.967006504908632
              ],
              [
                113.10933209633629,
                -24.687820712205422
              ],
              [
                113.11207867836754,
                -24.64538938075783
              ],
              [
                112.68635846352379,
                -24.67284659608503
              ],
              [
                112.63417340493004,
                -25.620101118087888
              ],
              [
                113.05989361977376,
                -26.245013416791
              ],
              [
                113.15327740883626,
                -26.17601663135097
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                113.16289044594566,
                -24.732732264771016
              ],
              [
                113.14778424477379,
                -24.80879537857701
              ],
              [
                113.13130475258629,
                -24.864877617980873
              ],
              [
                113.13679791664879,
                -24.937123878316612
              ],
              [
                113.1210050699691,
                -24.978833040738607
              ],
              [
                113.11757184243004,
                -24.996259547107453
              ],
              [
                113.10795880532066,
                -25.0839768797355
              ],
              [
                113.07911969399254,
                -25.243076048594684
              ],
              [
                113.07225323891441,
                -25.27660949366275
              ],
              [
                113.07431166158666,
                -25.317570503752627
              ],
              [
                113.03139642039015,
                -25.361012710144717
              ],
              [
                113.04426952243102,
                -25.4422736735502
              ],
              [
                113.04135419106282,
                -25.436386768222327
              ],
              [
                113.03517438149254,
                -25.439177113685474
              ],
              [
                112.96650983071129,
                -25.491251692027685
              ],
              [
                113.07796605718215,
                -25.903525204798587
              ],
              [
                113.2180417407759,
                -26.14539847570156
              ],
              [
                113.21306311443627,
                -26.1629614612458
              ],
              [
                113.21812670478928,
                -26.167891978339977
              ],
              [
                113.22271883724854,
                -26.170049295806194
              ],
              [
                113.21866370618392,
                -26.174979556370392
              ],
              [
                113.22216161382278,
                -26.195931265470545
              ],
              [
                113.57372411382278,
                -26.616591966350505
              ],
              [
                113.68770726811965,
                -26.712316784494284
              ],
              [
                114.0420163501509,
                -26.635006820843106
              ],
              [
                114.2727292407759,
                -26.394152613214064
              ],
              [
                114.30431493413528,
                -25.85286631221671
              ],
              [
                113.97884496343215,
                -25.419531642296313
              ],
              [
                113.76049169194778,
                -24.988092075520207
              ],
              [
                113.64376195561965,
                -24.609109417692817
              ],
              [
                113.47210057866653,
                -24.479192404774693
              ],
              [
                113.35674413335403,
                -24.535423006236403
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                113.43075222637924,
                -24.49991439427579
              ],
              [
                113.43058056500229,
                -24.49116659257073
              ],
              [
                113.42628903057846,
                -24.48835466993762
              ],
              [
                113.42182583477768,
                -24.48616757554278
              ],
              [
                113.4202808823851,
                -24.486323797831982
              ],
              [
                113.41839260723862,
                -24.48616757554278
              ],
              [
                113.41701931622299,
                -24.48507401408658
              ],
              [
                113.41890759136948,
                -24.48366799253293
              ],
              [
                113.41701931622299,
                -24.482105727934115
              ],
              [
                113.4144443955687,
                -24.47898114054617
              ],
              [
                113.41598934796127,
                -24.474606587868674
              ],
              [
                113.41204113629135,
                -24.470700608786753
              ],
              [
                113.41272778179916,
                -24.452106487238
              ],
              [
                113.40809292462143,
                -24.436791620577086
              ],
              [
                113.40774960186752,
                -24.429446075447533
              ],
              [
                113.40757794049057,
                -24.424913504394784
              ],
              [
                113.40809292462143,
                -24.420068162156465
              ],
              [
                113.4063763108519,
                -24.41694203616576
              ],
              [
                113.40448803570541,
                -24.414597390855928
              ],
              [
                113.40551800396713,
                -24.41100218345742
              ],
              [
                113.40448803570541,
                -24.408657427817317
              ],
              [
                113.40500301983627,
                -24.4059999854499
              ],
              [
                113.40362972882065,
                -24.40318616198398
              ],
              [
                113.40483135845932,
                -24.400684932936308
              ],
              [
                113.4063763108519,
                -24.398808978643995
              ],
              [
                113.40740627911362,
                -24.395525991592883
              ],
              [
                113.40710480061233,
                -24.392708032859524
              ],
              [
                113.40607483235061,
                -24.389737571477816
              ],
              [
                113.4050448640889,
                -24.386454348712206
              ],
              [
                113.40452987995803,
                -24.38317104065453
              ],
              [
                113.40521652546585,
                -24.381451178587724
              ],
              [
                113.40521652546585,
                -24.380200355115175
              ],
              [
                113.4050448640889,
                -24.37863680837134
              ],
              [
                113.40641815510452,
                -24.377698671043724
              ],
              [
                113.40744810808478,
                -24.376799626274117
              ],
              [
                113.40658980597551,
                -24.373867881121424
              ],
              [
                113.40727646198928,
                -24.37363332885784
              ],
              [
                113.40847809162796,
                -24.3720697009091
              ],
              [
                113.40899307575881,
                -24.36956785598075
              ],
              [
                113.41019470539749,
                -24.36628410941345
              ],
              [
                113.41070968952835,
                -24.361749271641845
              ],
              [
                113.41191131916702,
                -24.358308941464074
              ],
              [
                113.41036636677444,
                -24.349394923676446
              ],
              [
                113.40950805988967,
                -24.34376469429997
              ],
              [
                113.40916473713577,
                -24.33954185798837
              ],
              [
                113.40916473713577,
                -24.33344195698695
              ],
              [
                113.40967972126663,
                -24.33093934853551
              ],
              [
                113.40779144612014,
                -24.326246824468758
              ],
              [
                113.40985138264358,
                -24.32264910501926
              ],
              [
                113.408306430251,
                -24.315922659976387
              ],
              [
                113.40864975300491,
                -24.30763143443458
              ],
              [
                113.41051730864795,
                -24.304642830447026
              ],
              [
                113.40931567900928,
                -24.301513851530533
              ],
              [
                113.410345647271,
                -24.298541250089276
              ],
              [
                113.40365085356984,
                -24.29353460606044
              ],
              [
                113.40038928740773,
                -24.286963086080203
              ],
              [
                113.40038928740773,
                -24.284146616249544
              ],
              [
                113.39918765776906,
                -24.27866996831764
              ],
              [
                113.39695605986867,
                -24.27147172905988
              ],
              [
                113.39575443023,
                -24.263490595791783
              ],
              [
                113.39558276885305,
                -24.260986607564323
              ],
              [
                113.39386615508351,
                -24.255665468823025
              ],
              [
                113.3931795095757,
                -24.25284830521843
              ],
              [
                113.39403781646047,
                -24.250500621209184
              ],
              [
                113.39918765776905,
                -24.246587718228845
              ],
              [
                113.39815768950733,
                -24.24189207577825
              ],
              [
                113.3938661550835,
                -24.235004820055643
              ],
              [
                113.39317950957569,
                -24.23062182690695
              ],
              [
                113.39180621856006,
                -24.228273732786473
              ],
              [
                113.39180621856006,
                -24.227334483012672
              ],
              [
                113.39163455718311,
                -24.22592559536084
              ],
              [
                113.39403781646045,
                -24.22780410876566
              ],
              [
                113.39541110747608,
                -24.228117191638667
              ],
              [
                113.39747104399952,
                -24.228117191638667
              ],
              [
                113.399359319146,
                -24.227177940710067
              ],
              [
                113.4022775625542,
                -24.228430273741814
              ],
              [
                113.40468082183155,
                -24.228586814504677
              ],
              [
                113.40605411284717,
                -24.228586814504677
              ],
              [
                113.40811404937061,
                -24.229212975631455
              ],
              [
                113.40965900176319,
                -24.22889989545301
              ],
              [
                113.41120395415577,
                -24.229056435638462
              ],
              [
                113.41377887481006,
                -24.22686485552752
              ],
              [
                113.41635379546436,
                -24.223890507898677
              ],
              [
                113.41686877959522,
                -24.22107264079883
              ],
              [
                113.41944370024952,
                -24.21856781770379
              ],
              [
                113.421331975396,
                -24.216845723252895
              ],
              [
                113.42373523467334,
                -24.214967048209946
              ],
              [
                113.42562350981983,
                -24.213714582790168
              ],
              [
                113.42785510772022,
                -24.211992422734298
              ],
              [
                113.4294000601128,
                -24.21089649057934
              ],
              [
                113.43111667388233,
                -24.209800548998526
              ],
              [
                113.432318303521,
                -24.208391467402095
              ],
              [
                113.43386325591358,
                -24.2069823702254
              ],
              [
                113.43575153106006,
                -24.204477270110274
              ],
              [
                113.4378114675835,
                -24.20353784487341
              ],
              [
                113.43901309722217,
                -24.199780074692733
              ],
              [
                113.44124469512256,
                -24.19899719196308
              ],
              [
                113.44416293853077,
                -24.19743141208193
              ],
              [
                113.44793948882374,
                -24.19508270620731
              ],
              [
                113.44999942534717,
                -24.18928904675979
              ],
              [
                113.4517160391167,
                -24.184747886464663
              ],
              [
                113.45291766875538,
                -24.17848395184973
              ],
              [
                113.45446262114795,
                -24.169713926847493
              ],
              [
                113.45745456273664,
                -24.1567143887473
              ],
              [
                113.45110309178938,
                -24.1220947112061
              ],
              [
                113.46251492082399,
                -24.010496156202013
              ],
              [
                113.4577084022693,
                -24.00877126018026
              ],
              [
                113.45753674089235,
                -24.00406688074608
              ],
              [
                113.45959667741579,
                -23.99748046056028
              ],
              [
                113.46131329118532,
                -23.994500778784605
              ],
              [
                113.46062664567751,
                -23.98948221146373
              ],
              [
                113.46062664567751,
                -23.984777126933423
              ],
              [
                113.46114162980837,
                -23.977876025330403
              ],
              [
                113.4654331642322,
                -23.971915685503628
              ],
              [
                113.46646313249391,
                -23.968778553797403
              ],
              [
                113.4654331642322,
                -23.965013894947642
              ],
              [
                113.46440319597048,
                -23.959994178777603
              ],
              [
                113.46371655046266,
                -23.956072389529112
              ],
              [
                113.46440319597048,
                -23.953719258727585
              ],
              [
                113.46491818010134,
                -23.948699102855294
              ],
              [
                113.46371655046266,
                -23.945561406220307
              ],
              [
                113.46457485734743,
                -23.9414822865125
              ],
              [
                113.46337322770876,
                -23.93630475657455
              ],
              [
                113.46217159807009,
                -23.924536870719614
              ],
              [
                113.4657764869861,
                -23.91622025134583
              ],
              [
                113.4683514076404,
                -23.910570921518445
              ],
              [
                113.46886639177126,
                -23.90350891193601
              ],
              [
                113.46783642350954,
                -23.896603462857744
              ],
              [
                113.47058300554079,
                -23.891267181443773
              ],
              [
                113.47607616960329,
                -23.882477532144915
              ],
              [
                113.48405929642053,
                -23.875883307130206
              ],
              [
                113.48371597366662,
                -23.86944732169806
              ],
              [
                113.48680587845178,
                -23.867092612945168
              ],
              [
                113.49264236526818,
                -23.86410992039102
              ],
              [
                113.50204384764822,
                -23.857640458799615
              ],
              [
                113.5087386413494,
                -23.849633544585046
              ],
              [
                113.51251519164236,
                -23.8422541856166
              ],
              [
                113.51320183715018,
                -23.829692608687495
              ],
              [
                113.51440346678885,
                -23.818386149341343
              ],
              [
                113.51612008055838,
                -23.809748607053557
              ],
              [
                113.51612008055838,
                -23.80268109959309
              ],
              [
                113.51577675780447,
                -23.79545613892475
              ],
              [
                113.5171500488201,
                -23.78901616143415
              ],
              [
                113.51920998534354,
                -23.783518367197548
              ],
              [
                113.51835167845877,
                -23.777391979744905
              ],
              [
                113.52229989012869,
                -23.77267917760803
              ],
              [
                113.52659142455252,
                -23.764509916079252
              ],
              [
                113.53431618651541,
                -23.754297617920194
              ],
              [
                113.5475341125408,
                -23.74581294557535
              ],
              [
                113.55646050414236,
                -23.737799136345174
              ],
              [
                113.56452858885916,
                -23.72051277174128
              ],
              [
                113.57585823973807,
                -23.70133794136689
              ],
              [
                113.58100808104666,
                -23.69127788714512
              ],
              [
                113.5856429382244,
                -23.671941544333787
              ],
              [
                113.59010545931471,
                -23.65559050184579
              ],
              [
                113.59680025301589,
                -23.643168162632527
              ],
              [
                113.60538332186354,
                -23.624925628986446
              ],
              [
                113.61224977694167,
                -23.609354560383785
              ],
              [
                113.61705629549635,
                -23.59975934448608
              ],
              [
                113.62392275057448,
                -23.59362433031709
              ],
              [
                113.63147585116042,
                -23.580094823662318
              ],
              [
                113.63902895174635,
                -23.577577552262074
              ],
              [
                113.65705339632643,
                -23.562315561222366
              ],
              [
                113.67353288851393,
                -23.55964059665347
              ],
              [
                113.70180909799603,
                -23.549412288810842
              ],
              [
                113.71125047372846,
                -23.536350369540692
              ],
              [
                113.71159379648236,
                -23.519509595842766
              ],
              [
                113.72944657968549,
                -23.518565189585157
              ],
              [
                113.73511140512494,
                -23.525490678139235
              ],
              [
                113.74815766977338,
                -23.5190373935608
              ],
              [
                113.7524492041972,
                -23.50392602641646
              ],
              [
                113.7524492041972,
                -23.49022985259466
              ],
              [
                113.75588243173627,
                -23.48424716919088
              ],
              [
                113.76549546884564,
                -23.47596792288033
              ],
              [
                113.77133195566205,
                -23.46966967288093
              ],
              [
                113.77184693979291,
                -23.457859643928995
              ],
              [
                113.771503617039,
                -23.435653929821296
              ],
              [
                113.76644089809076,
                -23.407535904013045
              ],
              [
                113.31193014340488,
                -23.285717679191002
              ],
              [
                113.00705953793613,
                -23.993882502655083
              ],
              [
                112.74613424496738,
                -24.330449090254863
              ],
              [
                112.71729513363925,
                -24.69780155229369
              ],
              [
                113.18009420590488,
                -24.753933959997397
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                113.76038251924649,
                -23.413195539362984
              ],
              [
                113.76604918323062,
                -23.38041343449532
              ],
              [
                113.76896754932689,
                -23.360236218238047
              ],
              [
                113.76930926952434,
                -23.307276770547517
              ],
              [
                113.76175581026212,
                -23.27449899532824
              ],
              [
                113.74664960909024,
                -23.231599875445937
              ],
              [
                113.73291669893399,
                -23.18868696355258
              ],
              [
                113.73978315401212,
                -23.172275444736425
              ],
              [
                113.73017011690274,
                -23.141971970124082
              ],
              [
                113.71506391573087,
                -23.08134447278899
              ],
              [
                113.73428998994962,
                -23.058602106820615
              ],
              [
                113.75488935518399,
                -23.058602106820615
              ],
              [
                113.75763593721524,
                -22.982766479368728
              ],
              [
                113.74939619112149,
                -22.92080244829244
              ],
              [
                113.74115644502774,
                -22.88411650080666
              ],
              [
                113.70819746065274,
                -22.841092761177965
              ],
              [
                113.66699873018399,
                -22.765135321216576
              ],
              [
                113.59970747041837,
                -22.64478294854473
              ],
              [
                113.63541303682462,
                -22.55222990818885
              ],
              [
                113.64502607393399,
                -22.509101793470947
              ],
              [
                113.67523847627774,
                -22.479919260334814
              ],
              [
                113.76999555635587,
                -22.298342250007117
              ],
              [
                113.82870374727383,
                -22.22367473613543
              ],
              [
                113.83351561345914,
                -22.20480011610801
              ],
              [
                113.83798043255126,
                -22.191964626793883
              ],
              [
                113.8469066985071,
                -22.17519439086746
              ],
              [
                113.85719953584805,
                -22.14737749598331
              ],
              [
                113.86089127948489,
                -22.136405211537298
              ],
              [
                113.86870220775523,
                -22.1305209392235
              ],
              [
                113.87264905977383,
                -22.0977620949734
              ],
              [
                113.8792607315384,
                -22.080221503240832
              ],
              [
                113.88449785415054,
                -22.067770939126234
              ],
              [
                113.88673141472131,
                -22.053687582556723
              ],
              [
                113.89600044581725,
                -22.015339832005047
              ],
              [
                113.90509550660352,
                -21.99114890504208
              ],
              [
                113.9093845944418,
                -21.971737008118918
              ],
              [
                113.91590941521041,
                -21.93877709827506
              ],
              [
                113.92517744112149,
                -21.910912134553143
              ],
              [
                113.93857861424986,
                -21.886700317898953
              ],
              [
                113.9624406228788,
                -21.87650619514615
              ],
              [
                113.97942243623868,
                -21.85324783045422
              ],
              [
                114.00587605904686,
                -21.84321992013467
              ],
              [
                114.01394767527545,
                -21.828003575877204
              ],
              [
                114.02901274546174,
                -21.803798907346447
              ],
              [
                114.05917957254262,
                -21.803818098727305
              ],
              [
                114.11881147432462,
                -21.780257975950843
              ],
              [
                114.15228511820392,
                -21.775638253373824
              ],
              [
                114.16799188635505,
                -21.778745872374476
              ],
              [
                114.1836994748129,
                -21.783127275254355
              ],
              [
                113.84415327119962,
                -21.569686601539157
              ],
              [
                113.54186936347423,
                -21.91591896802818
              ],
              [
                113.20969282198087,
                -22.648585166156078
              ],
              [
                113.33740888643399,
                -23.317384303590728
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                114.20159912985783,
                -21.818370642246446
              ],
              [
                114.17825276191286,
                -21.856613738894747
              ],
              [
                114.16177296841691,
                -21.908862750574418
              ],
              [
                114.1590263309378,
                -21.954724142251
              ],
              [
                114.13979990126,
                -22.022215376191348
              ],
              [
                114.13430663300517,
                -22.05531253912132
              ],
              [
                114.11233357151491,
                -22.10494376015978
              ],
              [
                114.0986004018031,
                -22.16346071502368
              ],
              [
                114.09997371190536,
                -22.193981645697033
              ],
              [
                114.1466664483065,
                -22.23593710388731
              ],
              [
                114.13705323482415,
                -22.244835130458977
              ],
              [
                114.15078639266218,
                -22.2613585417313
              ],
              [
                114.14391980802901,
                -22.29058748746839
              ],
              [
                114.20022576654937,
                -22.298211431430442
              ],
              [
                114.19594136090211,
                -22.326010184065492
              ],
              [
                114.21379459357657,
                -22.35649570342047
              ],
              [
                114.17671540713779,
                -22.376815699087846
              ],
              [
                114.20830119742145,
                -22.418716252276695
              ],
              [
                114.202807928239,
                -22.46187332587893
              ],
              [
                114.23439420545463,
                -22.42633318358514
              ],
              [
                114.27971364236062,
                -22.402211475839216
              ],
              [
                114.31953981260655,
                -22.388244362194992
              ],
              [
                114.34563281987391,
                -22.37046600654553
              ],
              [
                114.33327297288204,
                -22.304412249794222
              ],
              [
                114.35249939659322,
                -22.261206353915217
              ],
              [
                114.39369887645715,
                -22.242140685678766
              ],
              [
                114.39507219062152,
                -22.217987117354223
              ],
              [
                114.36348592224694,
                -22.20527304390004
              ],
              [
                114.39919213306274,
                -22.149317437245703
              ],
              [
                114.45824471591949,
                -22.14168539713145
              ],
              [
                114.48983097591382,
                -22.107336119907128
              ],
              [
                114.50356412886985,
                -22.075523775827243
              ],
              [
                114.50356412375325,
                -22.046250093507478
              ],
              [
                114.48021775125993,
                -22.01824351513757
              ],
              [
                114.50905737565014,
                -21.983864230796897
              ],
              [
                114.54064363697968,
                -21.985137680793756
              ],
              [
                114.62578922526137,
                -22.037339485169603
              ],
              [
                114.74252098817948,
                -21.839890268438786
              ],
              [
                115.07895361604231,
                -21.731368628679416
              ],
              [
                114.97568515724389,
                -21.53345328906004
              ],
              [
                114.8598962012745,
                -21.502791412111016
              ],
              [
                114.75660579064464,
                -21.56915513963781
              ],
              [
                114.72689558749435,
                -21.613811179355803
              ],
              [
                114.68205349910896,
                -21.64569565694506
              ],
              [
                114.65055017031708,
                -21.6538839177725
              ],
              [
                114.4625673854119,
                -21.54582652050703
              ],
              [
                114.410808750767,
                -21.577164591166255
              ],
              [
                114.39486419076496,
                -21.595003951984577
              ],
              [
                114.41050525453856,
                -21.64348723685392
              ],
              [
                114.39009209372448,
                -21.66963280862465
              ],
              [
                114.35661941911009,
                -21.69768558235341
              ],
              [
                114.32237799304609,
                -21.713861814138628
              ],
              [
                114.30048898123414,
                -21.744702331328657
              ],
              [
                114.27109030446537,
                -21.71818187501676
              ],
              [
                114.27191135330172,
                -21.676349817397593
              ],
              [
                114.13516255754865,
                -21.75131749797786
              ],
              [
                114.21041110533058,
                -21.80428025918341
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                121.84847730603099,
                -17.191751327012778
              ],
              [
                121.79903882946849,
                -17.23372844153154
              ],
              [
                121.76607984509349,
                -17.3360076598078
              ],
              [
                121.70290845837474,
                -17.626797291757093
              ],
              [
                122.14785474743724,
                -17.6137086786087
              ],
              [
                122.20003980603099,
                -17.40940378243942
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                121.54018600433767,
                -18.965798549781145
              ],
              [
                121.54018600433767,
                -18.948914090453652
              ],
              [
                121.54293258636892,
                -18.933326919264182
              ],
              [
                121.57726486175955,
                -18.909943435193334
              ],
              [
                121.58275802582205,
                -18.88785603125203
              ],
              [
                121.59237106293142,
                -18.85926800744726
              ],
              [
                121.60610397308767,
                -18.852770049452175
              ],
              [
                121.61159713715017,
                -18.833274665912384
              ],
              [
                121.60061080902517,
                -18.798177274674742
              ],
              [
                121.61022384613456,
                -18.76047192384261
              ],
              [
                121.58825334518849,
                -18.735110652209332
              ],
              [
                121.59099777191581,
                -18.68893863292319
              ],
              [
                121.62121017425955,
                -18.672026344448863
              ],
              [
                121.66996441465896,
                -18.66747710831918
              ],
              [
                121.70498092621267,
                -18.652510069026956
              ],
              [
                121.7173405453533,
                -18.61347078747068
              ],
              [
                121.68300826996267,
                -18.586137957692337
              ],
              [
                121.69674118011893,
                -18.554895068484182
              ],
              [
                121.72764258891769,
                -18.53862220975018
              ],
              [
                121.7502995297283,
                -18.511926758590576
              ],
              [
                121.75167282074392,
                -18.496299241790172
              ],
              [
                121.75716598480642,
                -18.465039931182417
              ],
              [
                121.78737838715017,
                -18.440288937083523
              ],
              [
                121.39461715668142,
                -18.123425553549183
              ],
              [
                120.9702702328533,
                -18.296925553857758
              ],
              [
                121.3383122250408,
                -18.789078545688703
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                119.49231484135464,
                -18.920978465029695
              ],
              [
                118.96222450932339,
                -18.86640788940203
              ],
              [
                118.88669350346402,
                -19.166325021721473
              ],
              [
                117.99099046636991,
                -19.77432657067289
              ],
              [
                118.17089158941678,
                -20.419160516519753
              ],
              [
                118.52525349759101,
                -20.42914537294653
              ],
              [
                118.85341722418241,
                -20.280101784384556
              ],
              [
                118.93169481207303,
                -20.08288840859181
              ],
              [
                118.94817430426053,
                -19.907994421165963
              ],
              [
                118.93169481207303,
                -19.888009335056193
              ],
              [
                118.88500291754178,
                -19.91770845059893
              ],
              [
                118.85479051519803,
                -19.90867017941499
              ],
              [
                118.86715013433866,
                -19.8608878864853
              ],
              [
                118.92482835699491,
                -19.85572137024253
              ],
              [
                118.95504075933866,
                -19.90479647653086
              ],
              [
                119.12670213629178,
                -19.62693511616502
              ],
              [
                119.12189346314591,
                -19.612707419090285
              ],
              [
                119.07314378668241,
                -19.601062987609314
              ],
              [
                119.05803758551053,
                -19.580362288680536
              ],
              [
                119.10198289801053,
                -19.55448267378596
              ],
              [
                119.13906175543241,
                -19.59847554582708
              ],
              [
                119.34917528082303,
                -19.257866248732448
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                116.82051552377561,
                -19.242162171178773
              ],
              [
                116.36183632455686,
                -19.224009175249684
              ],
              [
                115.91963661752561,
                -19.405448610894474
              ],
              [
                115.12038124643186,
                -19.705673800260875
              ],
              [
                114.73036659799436,
                -20.682624083453486
              ],
              [
                115.11710289578343,
                -21.310851767845367
              ],
              [
                115.33133629422093,
                -21.26990562681576
              ],
              [
                115.21323326687718,
                -20.988093405541022
              ],
              [
                115.26541832547093,
                -20.829018653100267
              ],
              [
                115.40549400906468,
                -20.551519631422618
              ],
              [
                115.32309654812718,
                -20.350789408383587
              ],
              [
                115.38352135281468,
                -20.206514206432004
              ],
              [
                115.71036461453343,
                -20.397135027049
              ],
              [
                115.63071373562718,
                -20.559234779829534
              ],
              [
                115.64170006375218,
                -20.615800621801046
              ],
              [
                115.67740563015843,
                -20.759691528469688
              ],
              [
                115.51810387234593,
                -20.908577120082537
              ],
              [
                115.52357228129449,
                -21.002183649432432
              ],
              [
                115.54556969265845,
                -21.158525757540037
              ],
              [
                115.73508385281468,
                -21.080381790106706
              ],
              [
                115.81198814968968,
                -20.993222036901834
              ],
              [
                115.89163902859593,
                -20.86751994445079
              ],
              [
                115.99051598172093,
                -20.7956429029597
              ],
              [
                116.26792076687718,
                -20.736575413306632
              ],
              [
                116.37778404812718,
                -20.690332591883262
              ],
              [
                116.38327721218968,
                -20.572092494611084
              ],
              [
                116.52884605984593,
                -20.44346671029902
              ],
              [
                116.83097008328343,
                -20.31988460028333
              ],
              [
                117.00949791531468,
                -20.42030261223304
              ],
              [
                117.12760094265843,
                -20.40228368050092
              ],
              [
                117.11191004409643,
                -20.469867532713092
              ],
              [
                117.04772210177958,
                -20.477934184609516
              ],
              [
                116.92497195590748,
                -20.44205960505898
              ],
              [
                116.90339940403172,
                -20.484555800411233
              ],
              [
                116.8213410270968,
                -20.622219351799078
              ],
              [
                116.81935004216636,
                -20.664088858209944
              ],
              [
                116.87331320249332,
                -20.69529019780443
              ],
              [
                117.0238958988239,
                -20.610625087240862
              ],
              [
                117.17154625515845,
                -20.574663907642837
              ],
              [
                117.22647789578343,
                -20.618371297812317
              ],
              [
                117.26491334319614,
                -20.687875083878307
              ],
              [
                117.3075194548966,
                -20.779098406463195
              ],
              [
                117.73047569851782,
                -20.773816303438917
              ],
              [
                118.06555870633032,
                -20.57980660374619
              ],
              [
                118.19327477078343,
                -20.31730892080727
              ],
              [
                118.06967857937718,
                -19.8116537284404
              ],
              [
                117.92410973172093,
                -19.734114348856114
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                114.14762031968667,
                -21.759552865372623
              ],
              [
                114.28636086461042,
                -21.718754763921204
              ],
              [
                114.3000960865848,
                -21.691955271622124
              ],
              [
                114.34400093492103,
                -21.640887919553176
              ],
              [
                114.40580771969657,
                -21.61280448288574
              ],
              [
                114.42777168687417,
                -21.580880314220952
              ],
              [
                114.5358936093636,
                -21.648158723048823
              ],
              [
                114.63306847814601,
                -21.636224770944214
              ],
              [
                114.60904298478195,
                -21.60853355584341
              ],
              [
                114.60492411648808,
                -21.587618310147935
              ],
              [
                114.62552559312415,
                -21.589819194631385
              ],
              [
                114.63548603920759,
                -21.641655910358864
              ],
              [
                114.67878909592815,
                -21.639915379730507
              ],
              [
                114.66166636800742,
                -21.614557026008104
              ],
              [
                114.64802012482949,
                -21.581710278373226
              ],
              [
                114.66055024763345,
                -21.569645150184446
              ],
              [
                114.70244242830195,
                -21.613942165733356
              ],
              [
                114.72544863352832,
                -21.602088567330874
              ],
              [
                114.75188612969082,
                -21.572357137365152
              ],
              [
                114.73746612514758,
                -21.528851706074636
              ],
              [
                114.7656012767179,
                -21.502322171509853
              ],
              [
                114.90227054413285,
                -21.47997988114809
              ],
              [
                114.94550239976478,
                -21.407101387572524
              ],
              [
                114.98670113023353,
                -21.398151274265636
              ],
              [
                115.05811226304603,
                -21.460790551459002
              ],
              [
                115.02172268588805,
                -21.482513799735997
              ],
              [
                114.91838056371839,
                -21.485708613127482
              ],
              [
                114.84061101450249,
                -21.502649056299077
              ],
              [
                114.93081664005582,
                -21.53668741534011
              ],
              [
                115.05399238999915,
                -21.730214727053774
              ],
              [
                115.29019844468665,
                -21.76848067434487
              ],
              [
                115.87234165953556,
                -21.53313336979567
              ],
              [
                116.2322760814054,
                -20.997396152778173
              ],
              [
                116.91234825882742,
                -20.791252942359414
              ],
              [
                116.72389875982086,
                -20.628407624648116
              ],
              [
                116.55596823285495,
                -20.649729495622946
              ],
              [
                116.19852963474845,
                -20.805386934746004
              ],
              [
                116.0357101772891,
                -20.972554348175567
              ],
              [
                115.81976356193907,
                -21.108991375640443
              ],
              [
                115.5299966927733,
                -21.355631354806494
              ],
              [
                115.361932758277,
                -21.53426165432353
              ],
              [
                115.3251918295697,
                -21.515732614581715
              ],
              [
                115.32453072007728,
                -21.410936982652295
              ],
              [
                115.36918100537117,
                -21.3648967606979
              ],
              [
                115.38220894273353,
                -21.31757562183179
              ],
              [
                115.42203438218667,
                -21.217754005960835
              ],
              [
                115.33963692124917,
                -21.069176469696476
              ],
              [
                115.28745186265542,
                -21.05379788501653
              ],
              [
                114.91940987046792,
                -20.99483193080315
              ],
              [
                113.97183906968667,
                -21.534900219451206
              ],
              [
                113.85648262437417,
                -21.631952194943093
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    });
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - WEA
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Rodney Borrego (rodbio2008@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.west_australia;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

//Map.centerObject(geometry, 7)

var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF - not used for Indo
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1200, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 750, //depth in centimetres
  
  //############
  // Clean-up stage selection
  cleanup_stage: 3, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: false,
  
  // export options
  do_export: false, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the manually edited map - uses the output from the second pass of cleaning
  //var man_geo = ee.Image(region_params.geo_map_clean2);
  var man_geo = ee.Image(region_params.geo_map_clean2); // use this when testing for a small area
  
  // import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  //var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  //Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", true, 0.4);
  //var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  // the "MID MASK" CLEAN
 // man_geo = man_geo.where({
  //  test: midmask.eq(1),
  //  value: ee.Image(0)
  //});
  
  /*
  // the "REEF MASK" CLEAN
  
  // Define a kernel for reef mask Morphological Operations
  var kernel_rm = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create reef mask to clean areas inside the reef - Perform an dilation of deepwater
  var reef_mask = man_geo.eq(2)
            .focal_max({kernel: kernel_rm, iterations: 2});
  var global_reef_mask = ee.Image(region_params.global_reef_mask);
  

  // Reef crest, slope, sheltered slope (within reef mask) -> Inner reef flat
  man_geo = man_geo.where({
    test: reef_mask.eq(0)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22))),
    value: ee.Image(13)
  });
  
  // the "DEEP WATER" CLEAN
  
  // Define a kernel for deep water Morphological Operations
  var kernel_dw = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
  var deepwater = man_geo.eq(2)
            .focal_max({kernel: kernel_dw, iterations: 2})
            .focal_min({kernel: kernel_dw, iterations: 2});
    
  
    // Deep lagoon (outside reef mask and global mask) -> deepwater 
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(12)),
                    //.and(global_reef_mask.eq(2)),
    value: ee.Image(2)
  });
  
 
  // Reef classes in deepwater -> deepwater
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(24))),
    value: ee.Image(2)
  });
  
  */
  
  /*
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })
  */
  
  
  
/*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone").clip(not_reef_crest);
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone").clip(not_deep_water);
  
*/
var mid_Mask = ee.Image().byte().paint(ee.Feature(midMask, {zone: 1}), "zone").clip(midMask);

man_geo = man_geo.where({
  test: man_geo.eq(1),
  value: ee.Image (0),
})




/*

var Brs_Sl = ee.Image().byte().paint(ee.Feature(brs_sl, {zone: 1}), "zone").clip(brs_sl);
var Sl_Brs = ee.Image().byte().paint(ee.Feature(sl_brs, {zone: 1}), "zone").clip(sl_brs);
 // var Rs_Brs = ee.Image().byte().paint(ee.Feature(rs_brs, {zone: 1}), "zone").clip(rs_brs);
var Brs_Rs = ee.Image().byte().paint(ee.Feature(brs_rs, {zone: 1}), "zone").clip(brs_rs);
 // var Rc_Brs = ee.Image().byte().paint(ee.Feature(rc_brs, {zone: 1}), "zone").clip(rc_brs)
 var Srs_Brs = ee.Image().byte().paint(ee.Feature(srs_brs, {zone: 1}), "zone").clip(srs_brs)
 var All_Brs = ee.Image().byte().paint(ee.Feature(all_brs, {zone:1}), "zone").clip(all_brs)
 // var Srs_Orf = ee.Image().byte().paint(ee.Feature(srs_orf, {zone: 1}), "zone").clip(srs_orf)  
  // Back reef slope -> shallow lagoon (inside the reef)

  man_geo = man_geo.where({
    test: Brs_Sl.eq(1)
                     .and(man_geo.eq(24)).or(man_geo.eq(12)),
    value: ee.Image(11)
  });
  

 // Shallow lagoon and deep lagoon > back reef slope (inside the reef)
  man_geo = man_geo.where({
    test:  Sl_Brs.eq(1)
                     .and(man_geo.eq(11).or(man_geo.eq(12))),
    value: ee.Image(24)
  });
  
  /*
  
// reef slope > back reef slope (outside the reef)
  man_geo = man_geo.where({
    test: Rs_Brs.eq(1)
                     .and(man_geo.eq(22)),
    value: ee.Image(24)
  });
  

 //Back reef slope > reef slope (outside the reef)
  man_geo = man_geo.where({
    test:  Brs_Rs.eq(1)
                     .and(man_geo.eq(24)),
    value: ee.Image(22)
  });
  
  //reef crest > Back reef slope (outside the reef)
 // man_geo = man_geo.where({
   // test:  Rc_Brs.eq(1)
   //                  .and(man_geo.eq(15)),
  //  value: ee.Image(24)
  //});
   
  //sheltered reef slope > Back reef slope (outside the reef)
  man_geo = man_geo.where({
    test:  Srs_Brs.eq(1)
                     .and(man_geo.eq(21)),
    value: ee.Image(24)
  });
    
  //sheltered reef slope > outer reef falt (inside the reef)
 // man_geo = man_geo.where({
   // test:  Srs_Orf.eq(1)
     //                .and(man_geo.eq(21)),
   // value: ee.Image(14)
  //}); 
  
  man_geo = man_geo.where({
    test: All_Brs.eq(1)
            .and(man_geo.eq(11)).or(man_geo.eq(12))
            .or(man_geo.eq(13)).or(man_geo.eq(15))
            .or(man_geo.eq(16)).or(man_geo.eq(21)).or(man_geo.eq(22))
            .or(man_geo.eq(23)),
    
    value: ee.Image(24)
  });
*/
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.image);
  Map.addLayer(lowtide_image, imageVisParam2, sensor_params.sname + ' low tide', false);
  var notreef_mask = ee.FeatureCollection(region_params.notreef_mask).geometry();
  Map.addLayer(notreef_mask, {}, "noReefmask", false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
  var unepClipped= wcmc.filterBounds(region_extent)
  Map.addLayer(unepClipped, {color:'#FFFF33'}, 'UNEP_layer', false)
  
 // Map.addLayer(waves, {}, 'waves', false);
 // Map.addLayer(wavespng, {}, 'wavespng', false);
  
  //Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
 // Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(1)), {palette: ['F8FF23'], opacity: 0.4}, 'global_reef_mask - land', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(3)), {palette: ['0000ff'], opacity: 0.4}, 'global_reef_mask - reef', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(2)), {palette: ['FF0000'], opacity: 0.4}, 'global_reef_mask - water', false);

  // display distance to land mask for assessing cut-off distances
  var distToLand = ee.Image(region_params.distToLand);
    
  //Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
 // Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
  
  // display distance to water mask
  var distToWater = ee.Image(region_params.distToWater);
    
  //Map.addLayer(distToWater.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'distToWater ' + vars.dist_to_land_ORF + 'm', false);
  
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });
    
  // Seagrass on Back reef slope -> Sand 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(24)),
    value: ee.Image(11)
  });  
  
    
  /*
  
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
  
  */
  
  
  
     
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
   Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  // Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  //Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic, map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    // shallow lagoon > 5m == deep lagoon//this rule is making mini deep laggoons witin BRS 
    //so I will generate another clean up1 with shallow lagoons instead (comenting this up)
    
    // = geo_map.where({
     // test: geo_map.eq(11)
                    //.and(depth.gt(vars.shallowlag_depth_cutoff)),
      //value: ee.Image(12)
    //});
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    geo_map = geo_map.where({
      test: depth.gt(vars.geo_depth_cutoff),
      value: ee.Image(2)
    });
    
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).lte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);

    // // reef crest close to land -> TRF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
    // clean_map = clean_map.where({
    //   test: distToLand.lte(vars.dist_to_land_RC)
    //                 .and(clean_map.eq(15)),
    //   value: ee.Image(16)
    // });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
    
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // the "LAND MASK" CLEAN  ****to be moved to datagen for next region****
      var global_reef_mask = ee.Image(region_params.global_reef_mask);
  
      clean_map = clean_map.where({
        test: global_reef_mask.eq(1),
        value: ee.Image(0)
      });
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        // reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
