/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var centre_map = /* color: #d63000 */ee.Geometry.Point([114.44816397036129, -21.839276915151252]),
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    region_wcmcBound = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[140.23089908705762, -8.585320339637319],
          [140.89007877455762, -13.158609752389577],
          [142.47211002455762, -13.628858870481562],
          [144.53753971205762, -15.796437236299633],
          [145.54828189955762, -19.232281959787983],
          [150.77777408705762, -24.650968807059012],
          [153.94183658705762, -24.850510653508582],
          [153.63421939955762, -20.92445805796405],
          [147.70160221205762, -16.68245796426936],
          [144.88910221205762, -12.5159099321673],
          [147.61371158705762, -9.496696412689664],
          [147.52582096205762, -7.671750406266707],
          [142.73578189955762, -6.494303270145306]]]),
    region_extent = /* color: #d63000 */ee.Geometry.Polygon(
        [[[121.52457829656016, -16.567344371518196],
          [120.77750798406016, -17.7430441662282],
          [118.75602360906016, -18.202852383088082],
          [115.06461735906016, -19.243329053741355],
          [112.77946110906016, -21.42710206277618],
          [112.12028142156016, -25.298947707144478],
          [112.60367985906016, -28.2023876625074],
          [113.87809392156016, -30.46250765055571],
          [115.41617985906016, -30.500379433720447],
          [115.81168767156016, -28.974129290165205],
          [114.93278142156016, -27.814404981992528],
          [114.84489079656016, -26.28810345418345],
          [114.75700017156016, -25.338671728584902],
          [114.14176579656016, -24.30165396861741],
          [114.71305485906016, -23.09449472712174],
          [116.29508610906016, -21.67234280676188],
          [116.99821110906016, -21.304326713880705],
          [118.27262517156016, -21.345263262923904],
          [119.37125798406016, -20.93538649611636],
          [121.21696110906016, -20.35967337001447],
          [122.49137517156016, -19.409204840322467],
          [123.01871892156016, -18.411457621903356],
          [123.28239079656016, -17.449820927367163],
          [122.27164860906016, -16.272273332782632]]]),
    notReef_mask = /* color: #98ff00 */ee.Geometry.MultiPoint();
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Viewing script for looking at reefs and classifications for each region. west_austr
// From this region Timor Sea onwards the map_viewer script is going to be used from the very beginning
// in the workflow 

//Viewer for GBR torres

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove ;      //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.west_australia;       //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################



// Choose which layers will be shown in the map viewer
var vars = {
  raw: false, // set to true if you want to view the raw classifications for benthic and geo
  geo_cleanup_stage: 0, // set to 0, 1, 2 or 3 - this controls the display of the geo clean stages (0 = cleanup not ready)
  benthic_cleanup_stage: 0, // set to 0, 1 or 2 - this controls the display of the benthic clean stages (0 = cleanup not ready)
};

// choose where to centre the map (link this dynamically to map app?)
Map.centerObject(centre_map, 6);

// Add low-tide base map to viewer
// var low_tide_image = ee.Image(region_params.pixels);
// Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + " from stack", false); // image data

//print (region_params.image[0])
var low_tide_image_dove = ee.Image(region_params.image);
Map.addLayer(low_tide_image_dove, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + ' low tide', false); // image data


var wcmc=wcmc.filterBounds(region_wcmcBound)
Map.addLayer(wcmc, {color:'#ffff00'}, "WCMC layer", false)



// Load the raw classifications
if (vars.raw) {
// geo raw (test if more than one map exists for the region)
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0, false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }

  // benthic raw (test if more than one map exists for the region)
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
    var benthic_map_raw = ee.Image(region_params.benthic_map[0]).unmask(0, false)
                     .add(ee.Image(region_params.benthic_map[1]).unmask(0, false))
                     .selfMask();
  } else {
      var benthic_map_raw = ee.Image(region_params.benthic_map);
  }

  // Add the raw region classification to the viewer
  Map.addLayer(geo_map_raw, map_palettes.geo, 'Geomorphic RAW', false);
  Map.addLayer(benthic_map_raw.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW', false);
}

// Add geo clean stage 1 to the viewer
if (vars.geo_cleanup_stage == 1||vars.geo_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'Geomorphic - stage 1 clean', false);
  Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean1_10m_5m', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.geo_cleanup_stage == 2||vars.geo_cleanup_stage == 3) {
  Map.addLayer(ee.Image(region_params.geo_map_clean2), map_palettes.geo, 'Geomorphic - stage 2 clean', false);
  Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean2_10m_5m', false);
}

// Add geo clean stage 3 to the viewer
if (vars.geo_cleanup_stage == 3) {
  var geo_map_clean3 = ee.Image(region_params.geo_map_clean3)
  Map.addLayer(geo_map_clean3.updateMask(geo_map_clean3.gt(2)), map_palettes.geo, 'Geomorphic - stage 3 clean', true);
}

// Add benthic clean stage 1 to the viewer
if (vars.benthic_cleanup_stage == 1||vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean1), map_palettes.benthic, 'Benthic - stage 1 clean', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean2), map_palettes.benthic, 'Benthic - stage 2 clean', false);
}

// Geo Training Data - Needs more work + add flag to show
var geo_train = ee.FeatureCollection(region_params.geo_train_library);

var geo_buff = function(feature) {
  return feature.buffer(20);   // substitute in your value of Z here
};

var geo_train_buff = geo_train.map(geo_buff)

// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// Paint the interior of the polygons with different colors.
var geo_fill = empty.paint({
  featureCollection: geo_train_buff,
  color: 'class_num',
});

Map.addLayer(geo_fill, map_palettes.geo, 'Geo Training Data', false);



////////// UI SET UP //////////

//Generate title
var title = ui.Label({
  value: 'Coral Atlas map classes',
  style: {fontWeight: 'bold', fontSize: '14px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
pkg_vis.add_lgds([title, geo_legend, benthic_legend]);//, mask_legend])
// generate the legend



////////// MASK EXPORTS //////////


Export.table.toAsset({
  collection: ee.FeatureCollection(region_extent),
  description: "region_extent_export",
  assetId: region_params.asset + 'in_out/' + region_params.sname + '_extent'
})

Export.table.toAsset({
  collection: ee.FeatureCollection(notReef_mask),
  description: "not_reef_mask_export",
  assetId: region_params.asset + 'in_out/' +  region_params.sname + '_notreef'
})

/*Export.table.toAsset({
  collection: ee.FeatureCollection(mid_mask),
  description: "mid_mask_export",
  assetId: region_params.asset + 'in_out/' +  region_params.sname + '_midmask'
})*/