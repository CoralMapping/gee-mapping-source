/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var land_dist = ee.Image("projects/coral_atlas/global_datasets/mod44w6_global_distToLand"),
    imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    region_extent = 
    /* color: #d63000 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[75.50260244893565, 10.732564931074679],
          [75.50260244893565, 4.572761773416827],
          [85.19254385518565, 4.572761773416827],
          [85.19254385518565, 10.732564931074679]]], null, false),
    rc_rs = 
    /* color: #e0de1a */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.47066703752216,
                9.174058175490137
              ],
              [
                79.4068090052956,
                9.157789107046657
              ],
              [
                79.47135368302997,
                9.092705398542778
              ],
              [
                79.56679740861591,
                9.040494284078001
              ],
              [
                79.64164176896747,
                9.03303493440246
              ],
              [
                79.67940727189716,
                9.037781811157956
              ],
              [
                79.66910758927997,
                9.121180981999695
              ],
              [
                79.59975639299091,
                9.122536905547538
              ],
              [
                79.49813285783466,
                9.161856444027851
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.81385334902939,
                8.409954744020855
              ],
              [
                79.8064719098204,
                8.406898053122971
              ],
              [
                79.81024846011337,
                8.397897656667284
              ],
              [
                79.8174582379454,
                8.402482790391238
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.77621473610702,
                8.477205188832011
              ],
              [
                79.76145185768905,
                8.46837622036567
              ],
              [
                79.76316847145858,
                8.455811569892472
              ],
              [
                79.7803346091539,
                8.455811569892472
              ],
              [
                79.77896131813827,
                8.470753270272757
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    geometry = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.MultiPoint(),
    add_toMidMask = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                78.96550490761115,
                9.21463502556589
              ],
              [
                78.98696257973029,
                9.194470357964297
              ],
              [
                78.97752120399787,
                9.18396394135687
              ],
              [
                78.97391631508185,
                9.17938846900047
              ],
              [
                78.96876647377326,
                9.16888160535676
              ],
              [
                78.95057036781623,
                9.162780703082898
              ],
              [
                78.94799544716193,
                9.151764919733637
              ],
              [
                78.97786012222252,
                9.153377111364588
              ],
              [
                79.05272112339213,
                9.154012268614384
              ],
              [
                79.07177553623393,
                9.160282793660995
              ],
              [
                79.04362307041362,
                9.17502656506591
              ],
              [
                79.03864489048198,
                9.183669180716043
              ],
              [
                79.03795824497416,
                9.205190072006804
              ],
              [
                79.03993243190314,
                9.222219367136104
              ],
              [
                79.03126345127299,
                9.22230417657778
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.74457665503775,
                8.963798377920538
              ],
              [
                79.72809744178733,
                8.923608854103097
              ],
              [
                79.76654931128776,
                8.862384481755331
              ],
              [
                79.80328484595572,
                8.87527476374775
              ],
              [
                79.86920281470572,
                8.861027583650472
              ],
              [
                79.8736660105065,
                8.88545098232526
              ],
              [
                79.82834740699087,
                8.968885288511329
              ],
              [
                79.79058190406118,
                9.006526208932573
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.97650676962485,
                9.579345202787989
              ],
              [
                79.95745235678305,
                9.59288635232713
              ],
              [
                79.94320446249594,
                9.601687809538916
              ],
              [
                79.92776880574746,
                9.610563527905654
              ],
              [
                79.9214173348002,
                9.60599368882766
              ],
              [
                79.91712580037637,
                9.589914135220422
              ],
              [
                79.90631113362832,
                9.572479652499466
              ],
              [
                79.89910135579629,
                9.559445522630396
              ],
              [
                79.94407663655801,
                9.55233578672623
              ],
              [
                79.96776590657754,
                9.56892493936985
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                80.14102158895969,
                9.819471142475054
              ],
              [
                80.12179551474094,
                9.814735005550917
              ],
              [
                80.09638963095188,
                9.798496307827588
              ],
              [
                80.070297101655,
                9.729472989938705
              ],
              [
                80.02772508017063,
                9.654343179362147
              ],
              [
                80.0648039375925,
                9.595445928058636
              ],
              [
                80.22616563192844,
                9.508773907874374
              ],
              [
                80.28521714560031,
                9.508096695988755
              ],
              [
                80.31130967489719,
                9.699016986966775
              ],
              [
                80.23577866903781,
                9.805262528551427
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.39641473184753,
                8.35871117158317
              ],
              [
                81.39074990640808,
                8.356503272922218
              ],
              [
                81.38817498575378,
                8.356545732629732
              ],
              [
                81.38684461008239,
                8.344444529026473
              ],
              [
                81.4080447901361,
                8.35888100942395
              ],
              [
                81.40139291177917,
                8.367839850622396
              ],
              [
                81.3906640757196,
                8.370429808981939
              ],
              [
                81.38186643015075,
                8.373147123824836
              ],
              [
                81.38457009683776,
                8.3657169210911
              ],
              [
                81.38714501749206,
                8.363339226283463
              ],
              [
                81.39019200693298,
                8.362362668856264
              ],
              [
                81.39366814981628,
                8.364740369622226
              ],
              [
                81.39864632974792,
                8.365122498749358
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.26034790336632,
                8.455633681789
              ],
              [
                81.2344270354464,
                8.47176390906747
              ],
              [
                81.26463973318722,
                8.449479804655077
              ],
              [
                81.29622497906819,
                8.462510475736043
              ],
              [
                81.29622513114953,
                8.47023581125568
              ],
              [
                81.29914337455773,
                8.473801363373664
              ],
              [
                81.29948669731164,
                8.481611504862755
              ],
              [
                81.28283554374718,
                8.476178379754751
              ],
              [
                81.26807266532921,
                8.492986861675575
              ],
              [
                81.27262108909916,
                8.492392431146373
              ],
              [
                81.26562557104285,
                8.51060072528711
              ],
              [
                81.2733930911488,
                8.523715687559474
              ],
              [
                81.31030136405968,
                8.53339211592933
              ],
              [
                81.3003450041964,
                8.544935689946035
              ],
              [
                81.26635605155968,
                8.545444957225452
              ],
              [
                81.25013350304481,
                8.527111026057678
              ],
              [
                81.22567230522179,
                8.525073735935534
              ],
              [
                81.21108108818078,
                8.545275201541212
              ],
              [
                81.16318756401085,
                8.535089722241132
              ],
              [
                81.17245742614284,
                8.479319386236446
              ],
              [
                81.18893677055382,
                8.446634419426928
              ],
              [
                81.21262604057335,
                8.444766621682477
              ],
              [
                81.22284010909769,
                8.441964194890321
              ],
              [
                81.22245432494651,
                8.449392569902077
              ],
              [
                81.25522032350115,
                8.456502839261507
              ],
              [
                81.20558792411828,
                8.492137966089562
              ],
              [
                81.20215469657921,
                8.481102152646779
              ],
              [
                81.20799118339562,
                8.476178379754751
              ],
              [
                81.21515859157911,
                8.442474224887844
              ],
              [
                81.2278185124684,
                8.450879372107568
              ],
              [
                81.23391205131554,
                8.45003039215944
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.40638256983107,
                8.322895980611216
              ],
              [
                81.38784314112013,
                8.323745246907519
              ],
              [
                81.39917279199904,
                8.257327077729409
              ],
              [
                81.41513730005568,
                8.273975139781511
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.2089179525903,
                8.471042546936268
              ],
              [
                81.2114928732446,
                8.467816549500512
              ],
              [
                81.22162089448483,
                8.463741566719799
              ],
              [
                81.2279723654321,
                8.465609272515596
              ],
              [
                81.23398051362545,
                8.465609272515596
              ],
              [
                81.25166163545163,
                8.46594885441406
              ],
              [
                81.26316294770749,
                8.469005078018247
              ],
              [
                81.27655253510983,
                8.471042546936268
              ],
              [
                81.27912745576413,
                8.482927567144694
              ],
              [
                81.27020106416256,
                8.494981997751664
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.3625637101922,
                8.500674628764516
              ],
              [
                81.34951744554377,
                8.485734091490992
              ],
              [
                81.37492332933283,
                8.379775483226153
              ],
              [
                81.39380608079767,
                8.394380476370468
              ],
              [
                81.36908684251642,
                8.497279103205116
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.42116743088485,
                8.193512461630279
              ],
              [
                81.43009382248641,
                8.178475220402198
              ],
              [
                81.43335538864852,
                8.179409754758913
              ],
              [
                81.43522502997172,
                8.181345329881726
              ],
              [
                81.42707111456644,
                8.20470786249461
              ],
              [
                81.4235520563389,
                8.203943292236684
              ],
              [
                81.41960384466898,
                8.203688435157146
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.41996580124618,
                8.208294280509486
              ],
              [
                81.4198799705577,
                8.211182617683798
              ],
              [
                81.42859181620935,
                8.20919786710936
              ],
              [
                81.43163882041195,
                8.210101367110884
              ],
              [
                81.43365599536305,
                8.213213686254779
              ],
              [
                81.41541677475692,
                8.227369311591755
              ],
              [
                81.41043859482528,
                8.228728466346457
              ],
              [
                81.4169617271495,
                8.207830947195562
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.41887174579745,
                8.163101718911154
              ],
              [
                81.43226133319979,
                8.149507721078919
              ],
              [
                81.4655636403287,
                8.164800936126246
              ],
              [
                81.44221769306307,
                8.226647509552171
              ],
              [
                81.40960203144198,
                8.232084110498302
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.67334555527725,
                7.760041305653071
              ],
              [
                81.67815207383194,
                7.7528974925003755
              ],
              [
                81.70235632798233,
                7.721599359333651
              ],
              [
                81.71248434922256,
                7.7287437029509105
              ],
              [
                81.69051169297256,
                7.758170318697575
              ],
              [
                81.68192862412491,
                7.761231929380859
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.69870272583648,
                9.114983853033902
              ],
              [
                79.71209231323883,
                9.098043749381395
              ],
              [
                79.81165591187164,
                9.086517445442269
              ],
              [
                79.88409701294586,
                9.044138143434147
              ],
              [
                79.90435305542633,
                9.02515059623825
              ],
              [
                79.92323580689117,
                9.02786316422178
              ],
              [
                79.93731203980133,
                9.056004851970014
              ],
              [
                79.8202389807193,
                9.123468106262273
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.69732943482086,
                9.082110231197374
              ],
              [
                79.65784731812165,
                9.028202233785208
              ],
              [
                79.71792880005525,
                9.030575711801466
              ],
              [
                79.80101290650056,
                8.942407502077227
              ],
              [
                79.87319570322323,
                8.887294874402311
              ],
              [
                79.86642589399379,
                8.856490136284528
              ],
              [
                79.91595991649137,
                8.86842583514421
              ],
              [
                79.91546637815134,
                8.903150141942715
              ],
              [
                79.89044715108088,
                8.944782905988438
              ],
              [
                79.87070742554351,
                8.970216714008297
              ],
              [
                79.88306704468414,
                8.988868040896314
              ],
              [
                79.82401553101226,
                9.040747583401968
              ],
              [
                79.76187411255523,
                9.070244385099468
              ],
              [
                79.72925845093414,
                9.081771212472045
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.79830355633743,
                8.831634158638787
              ],
              [
                79.80311007489212,
                8.803135870655437
              ],
              [
                79.84430880536085,
                8.570997273260588
              ],
              [
                79.88001276014347,
                8.554364205134855
              ],
              [
                79.93082613934523,
                8.541800141704
              ],
              [
                79.93082613934524,
                8.660611638524717
              ],
              [
                79.9397525309468,
                8.729165803355338
              ],
              [
                79.89443392743118,
                8.79227880216561
              ],
              [
                79.87589449872024,
                8.861487145831216
              ],
              [
                79.85460848797806,
                8.851310263128775
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.7200259684468,
                8.425668575929441
              ],
              [
                79.65548129071243,
                8.202816083302482
              ],
              [
                79.63488192547806,
                7.930875882007317
              ],
              [
                79.76809115399368,
                7.854700124130298
              ],
              [
                79.7584781168843,
                7.903671866691752
              ],
              [
                79.72277255047806,
                8.069588244503137
              ],
              [
                79.7145328043843,
                8.194660552600247
              ],
              [
                79.73375887860306,
                8.229999976181892
              ],
              [
                79.76122469891556,
                8.326487690139075
              ],
              [
                79.77289712880611,
                8.34754813261585
              ],
              [
                79.78319735516554,
                8.36589134127549
              ],
              [
                79.79967684735306,
                8.409366607096134
              ],
              [
                79.76809115399368,
                8.436536173555263
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                80.98599987292698,
                8.965711921357356
              ],
              [
                80.9866865184348,
                8.937224056494559
              ],
              [
                81.06290416980198,
                8.853104055642397
              ],
              [
                81.07801037097386,
                8.88024165058828
              ],
              [
                81.01346569323948,
                8.951468267815738
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.09448986316136,
                8.857853279457458
              ],
              [
                81.08419018054417,
                8.840891484353781
              ],
              [
                81.1240156199973,
                8.779143965123705
              ],
              [
                81.13860683703831,
                8.767437917219956
              ],
              [
                81.15165310168675,
                8.780161864884738
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.15628795886448,
                8.771679281561491
              ],
              [
                81.15268306994847,
                8.76523238862413
              ],
              [
                81.14736156726292,
                8.759803339394407
              ],
              [
                81.16778927112034,
                8.729263461833096
              ],
              [
                81.17568569446019,
                8.742328049221804
              ],
              [
                81.17791729236058,
                8.747757353429867
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.18426876330784,
                8.736219987421562
              ],
              [
                81.17482738757542,
                8.722476482616603
              ],
              [
                81.1851270701926,
                8.706356912796457
              ],
              [
                81.19336681628636,
                8.713483545177299
              ],
              [
                81.20332317614964,
                8.729093788856712
              ],
              [
                81.19233684802464,
                8.737238004672296
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.18495540881565,
                8.711366799708745
              ],
              [
                81.19233684802464,
                8.691343898136683
              ],
              [
                81.21207790637425,
                8.663004574160096
              ],
              [
                81.22134762072972,
                8.665380407984465
              ],
              [
                81.22769909167698,
                8.663683385356022
              ],
              [
                81.22855739856175,
                8.668774430259072
              ],
              [
                81.21156292224339,
                8.703222019814142
              ],
              [
                81.19336681628636,
                8.717644946475126
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.93681396371255,
                6.3955446301032985
              ],
              [
                79.96290649300943,
                6.2986386354821144
              ],
              [
                80.01371826058755,
                6.115696552024239
              ],
              [
                80.12907470590005,
                5.964107484454778
              ],
              [
                80.43669189340005,
                5.8616586484139415
              ],
              [
                80.6371923816813,
                5.873953508294747
              ],
              [
                80.50810302621255,
                5.910836457153438
              ],
              [
                80.2801367176188,
                5.9709367301204574
              ],
              [
                80.21284545785318,
                6.00644743302353
              ],
              [
                80.0823828113688,
                6.11433107494593
              ],
              [
                80.04667724496255,
                6.200349290797607
              ],
              [
                80.03706420785318,
                6.222192960812629
              ],
              [
                80.0164648426188,
                6.308193556109675
              ],
              [
                80.00273193246255,
                6.3573303598414315
              ],
              [
                79.94642700082193,
                6.456954429685937
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    orf_trf = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[79.9804830438083, 9.032252995835892],
           [79.95627878965792, 9.021572271431952],
           [79.93430613340792, 9.03649129084192],
           [79.92795466246065, 9.012417113175218],
           [79.94254587950167, 8.976302839596677],
           [79.94254587950167, 8.96748566277338],
           [79.97516154112276, 8.986476238827073],
           [80.02511500181612, 9.022928571426265],
           [80.0683736688083, 9.057682017517227],
           [80.06631373228487, 9.080736108967448],
           [80.07592676939423, 9.11039911847652],
           [80.14896229451176, 9.300760656916683],
           [80.09635447325165, 9.310856085750636],
           [79.99593256773409, 9.05751249665741],
           [79.98065470518526, 9.033439723462182]]],
         [[[79.87770318929347, 9.621667686800874],
           [79.85281228963527, 9.597633815939897],
           [79.8625969881216, 9.570551355568526],
           [79.88731622640285, 9.582569464115121],
           [79.89933252278956, 9.594756407192044],
           [79.88542795125636, 9.608973953604526],
           [79.88920450154933, 9.620313711296403]]],
         [[[80.03683042444237, 9.641533732195496],
           [80.00541639245995, 9.635779637338109],
           [79.9997515670205, 9.600068210051505],
           [80.02447080530175, 9.604807384187648],
           [80.05622816003807, 9.566892136386095],
           [80.10000181116112, 9.5806030498164]]]]),
    orf_sl = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[79.90004760968628, 8.8817218350675],
          [79.8787615989441, 8.85017431879969],
          [79.84648926007691, 8.779267356792031],
          [79.90348083722535, 8.699862621994077],
          [79.93094665753785, 8.784356825970075],
          [79.93094665753785, 8.88070421556767]]]),
    sl_rs = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.01141819534257,
                9.005368680370522
              ],
              [
                80.96747288284257,
                8.95111008178686
              ],
              [
                81.16522678909257,
                8.603665399891586
              ],
              [
                81.15973362503007,
                8.440690106036426
              ],
              [
                81.29706272659257,
                8.375480646509724
              ],
              [
                81.43439182815507,
                7.877905164064033
              ],
              [
                81.68433079299882,
                7.622084901312944
              ],
              [
                81.75024876174882,
                7.760900300466082
              ],
              [
                81.38495335159257,
                8.587371004181868
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                80.0546100549668,
                9.388766326214556
              ],
              [
                80.00929140725411,
                9.400960176141254
              ],
              [
                80.00791811398206,
                9.34947211957883
              ],
              [
                79.93101374146802,
                9.287134283484331
              ],
              [
                79.96671933957019,
                9.067508843695414
              ],
              [
                79.7332596449207,
                9.167848443582168
              ],
              [
                79.49533690364598,
                9.14547785403989
              ],
              [
                79.50582894521382,
                9.039028616890574
              ],
              [
                79.66734161672983,
                8.972567183372139
              ],
              [
                79.83900315440863,
                8.725603227132584
              ],
              [
                79.86372241486234,
                8.5898388692171
              ],
              [
                79.76759195751919,
                8.612922259694555
              ],
              [
                79.7401261140683,
                8.47168430976056
              ],
              [
                79.69480747233898,
                8.356210884226137
              ],
              [
                79.62476957402197,
                8.161866912506698
              ],
              [
                79.66596834491273,
                7.870854470883897
              ],
              [
                79.77995159269479,
                7.85725070216409
              ],
              [
                79.77328853390135,
                7.880495641566815
              ],
              [
                79.73226732098311,
                7.97854374359618
              ],
              [
                79.72639492546293,
                8.20998133067588
              ],
              [
                79.76430905917881,
                8.36780209583358
              ],
              [
                79.78369878942529,
                8.408766083272408
              ],
              [
                79.7933557467336,
                8.418838529073724
              ],
              [
                79.80230445971912,
                8.425912478053586
              ],
              [
                79.80782030838326,
                8.438420152091345
              ],
              [
                79.81924741389554,
                8.435504443540902
              ],
              [
                79.82976748891778,
                8.425216500295893
              ],
              [
                79.83468424667312,
                8.42686471817471
              ],
              [
                79.83885927739328,
                8.427349241176028
              ],
              [
                79.84131758538246,
                8.431909226877044
              ],
              [
                79.84381809145754,
                8.432898659444751
              ],
              [
                79.84403839730827,
                8.43339338000886
              ],
              [
                79.84494535543062,
                8.433548580697309
              ],
              [
                79.84548313952511,
                8.435526788116412
              ],
              [
                79.87177080488249,
                8.43954186114673
              ],
              [
                79.88157521371265,
                8.509715049986816
              ],
              [
                79.96946591774027,
                8.58983886839926
              ],
              [
                80.01753114887119,
                8.726960621117268
              ],
              [
                79.96946592229024,
                8.926443683255878
              ],
              [
                80.11228832496309,
                9.068864968899181
              ],
              [
                80.14112747275011,
                9.357602317063083
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.93718642589914,
                9.89612871274713
              ],
              [
                79.66252822277414,
                9.61190683776415
              ],
              [
                79.80809707043039,
                9.519821540223763
              ],
              [
                79.92070693371164,
                9.752694629887756
              ],
              [
                80.08000869152414,
                9.77976241671517
              ],
              [
                80.34642714855539,
                9.720210384748109
              ],
              [
                80.36839980480539,
                9.806827999602598
              ],
              [
                80.12120742199289,
                9.92318475195291
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    brs_rs = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.13073942558412,
                8.83752964925006
              ],
              [
                81.06361982719545,
                8.799871331703647
              ],
              [
                81.17513771351963,
                8.409009329978693
              ],
              [
                81.53768654164463,
                7.691061559620596
              ],
              [
                81.65304298695713,
                7.609397508007028
              ],
              [
                81.83981056508213,
                7.715557717916016
              ],
              [
                81.59261818226963,
                8.047474966422858
              ],
              [
                81.47726173695713,
                8.188865961833248
              ],
              [
                81.40859718617588,
                8.523108745186791
              ],
              [
                81.26852150258213,
                8.718628299118738
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                80.03069582886383,
                9.746961662871435
              ],
              [
                79.51433840698883,
                7.776313882504971
              ],
              [
                80.01421633667633,
                7.700109911142763
              ],
              [
                80.39324465698883,
                9.627835330916538
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                80.07726210949289,
                9.915068174596735
              ],
              [
                79.73119277355539,
                9.796002031295494
              ],
              [
                79.65154189464914,
                9.617322841909347
              ],
              [
                79.59386367199289,
                9.498150794918978
              ],
              [
                79.72844619152414,
                9.376227385628662
              ],
              [
                79.85478896496164,
                9.698552467863825
              ],
              [
                80.05528945324289,
                9.793295484017666
              ],
              [
                80.24755019543039,
                9.831185134989589
              ],
              [
                80.19261855480539,
                9.909657011355522
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                80.01097187888087,
                6.5950247275102205
              ],
              [
                79.88188252341212,
                6.5568255575281595
              ],
              [
                80.07963642966212,
                5.898809406226041
              ],
              [
                80.59050068747462,
                5.833236614031071
              ],
              [
                81.10411152731837,
                6.0845566007960965
              ],
              [
                81.02171406638087,
                6.218364176748934
              ],
              [
                80.63993916403712,
                6.021737428860362
              ],
              [
                80.17027363669337,
                6.177406255831116
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    srs_rs = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.31181706199334,
                8.547864923123484
              ],
              [
                81.2441824794738,
                8.550920493116495
              ],
              [
                81.20916355857537,
                8.539037583368216
              ],
              [
                81.18684757957146,
                8.503047087049778
              ],
              [
                81.20985020408318,
                8.452450960337318
              ],
              [
                81.29156101951287,
                8.450073797483203
              ],
              [
                81.31765354880974,
                8.508819375728878
              ],
              [
                81.3756750942199,
                8.380110747351413
              ],
              [
                81.39833439597771,
                8.382488339722187
              ],
              [
                81.36125553855584,
                8.526814775862322
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.41853610193147,
                8.190152898880314
              ],
              [
                81.43252720088564,
                8.159567985421276
              ],
              [
                81.4561299434842,
                8.1605873655966
              ],
              [
                81.4341572872342,
                8.216827961462897
              ],
              [
                81.41081133996857,
                8.226002409581797
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.46411680824934,
                8.050936947806385
              ],
              [
                81.47372984535872,
                8.020681252977726
              ],
              [
                81.52110838539778,
                7.963903261865602
              ],
              [
                81.5609338248509,
                7.911878190829159
              ],
              [
                81.59663939125716,
                7.911538136042214
              ],
              [
                81.57295012123762,
                8.008102379734769
              ],
              [
                81.46240019447981,
                8.062834636157339
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.21579534284342,
                8.646201186600026
              ],
              [
                81.21098882428873,
                8.63126636435108
              ],
              [
                81.22060186139811,
                8.591210971745253
              ],
              [
                81.24463445417155,
                8.544361163392647
              ],
              [
                81.26729375592936,
                8.537570857799466
              ],
              [
                81.2583673643278,
                8.593926725500046
              ],
              [
                81.22403508893717,
                8.688287043156553
              ],
              [
                81.18901616803873,
                8.687608276436894
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.39086183532504,
                8.359137061344592
              ],
              [
                81.3899176977518,
                8.354763716247957
              ],
              [
                81.3977712057474,
                8.355527993684147
              ],
              [
                81.40133317931918,
                8.364232158817709
              ],
              [
                81.39802869781283,
                8.366864599747316
              ],
              [
                81.38704236968783,
                8.364147241072253
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                80.01104043153941,
                6.547321210695035
              ],
              [
                79.87096474794566,
                6.468183566319347
              ],
              [
                80.09343789247691,
                5.987639475122263
              ],
              [
                80.69493935732066,
                5.831916398298204
              ],
              [
                81.13713906435191,
                6.0340746595985015
              ],
              [
                81.00255654482066,
                6.206123068769045
              ],
              [
                80.48894570497691,
                6.028611902590998
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    trf_rs = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.42368594324006,
                8.158718206547901
              ],
              [
                81.45733157312287,
                8.160757288712922
              ],
              [
                81.44720355188264,
                8.213939665361812
              ],
              [
                81.42608949979092,
                8.228296335698618
              ],
              [
                81.41115466272248,
                8.227021779601113
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.47578978188216,
                8.066675448736383
              ],
              [
                81.45381712563216,
                8.062596319437628
              ],
              [
                81.51355528481184,
                7.956524577325174
              ],
              [
                81.55818724281966,
                7.891235990961812
              ],
              [
                81.60281920082747,
                7.894636693477434
              ],
              [
                81.57535338051497,
                7.952444344400609
              ],
              [
                81.57329344399153,
                8.015683380767051
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.20479864975965,
                8.688680050791108
              ],
              [
                81.19449896714247,
                8.68257111249026
              ],
              [
                81.21715826890028,
                8.648970175661585
              ],
              [
                81.21647162339247,
                8.593301427187843
              ],
              [
                81.2456540574745,
                8.549167949905993
              ],
              [
                81.26453680893934,
                8.54611236586386
              ],
              [
                81.23398108384168,
                8.66797713515655
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.39678415282992,
                8.366970746185943
              ],
              [
                81.38635572418002,
                8.362767325115424
              ],
              [
                81.38983186706332,
                8.361323715500868
              ],
              [
                81.39154848083285,
                8.358563858711884
              ],
              [
                81.3933080118496,
                8.357162712058818
              ],
              [
                81.39931615813998,
                8.358181723155312
              ],
              [
                81.3997882269266,
                8.365145023412522
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                81.3075212596629,
                8.536509315245821
              ],
              [
                81.25705281483869,
                8.525474780361733
              ],
              [
                81.27507725941877,
                8.469957757213395
              ],
              [
                81.29344502675275,
                8.46859944197058
              ],
              [
                81.28795186269025,
                8.498141715304339
              ],
              [
                81.31936589467267,
                8.511553835795702
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                80.00506057987826,
                6.538753685436549
              ],
              [
                79.89657058964389,
                6.516923483857831
              ],
              [
                80.01742019901889,
                6.258983176879606
              ],
              [
                80.13140335331576,
                6.0309614639264595
              ],
              [
                80.56536331425326,
                5.8766166969376
              ],
              [
                80.89083328495639,
                5.9735994510667405
              ],
              [
                81.06249466190951,
                6.07739293833444
              ],
              [
                81.03640213261264,
                6.125185859743339
              ],
              [
                80.89083328495639,
                6.086951863263004
              ],
              [
                80.70269241581576,
                5.998183910078178
              ],
              [
                80.48159256230014,
                5.961306807338244
              ],
              [
                80.28658523808139,
                6.037789871990582
              ],
              [
                80.14650955448764,
                6.140205610239601
              ],
              [
                80.08333816776889,
                6.249427353260193
              ],
              [
                80.04213943730014,
                6.353166900832828
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    irf_sl = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.79741052818383,
                8.097314121400876
              ],
              [
                79.72805933189477,
                8.036127500450089
              ],
              [
                79.7465987606057,
                7.970851603366878
              ],
              [
                79.80977014732446,
                7.95861121070398
              ],
              [
                79.85508875084008,
                8.023209143094594
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                79.8173292186301,
                8.447840794349707
              ],
              [
                79.7891767528098,
                8.406407652981478
              ],
              [
                79.74866466784886,
                8.297030116601277
              ],
              [
                79.72600536609104,
                8.054389236025512
              ],
              [
                79.8557813670676,
                8.104696639359478
              ],
              [
                79.87363415027073,
                8.373122085223361
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    rs_sl = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[79.78643017077854, 8.16451346959864],
          [79.71089916491917, 8.133246694482258],
          [79.74660473132542, 7.970756361186169],
          [79.85921459460667, 7.953755713104598],
          [79.85166149402073, 8.116932625759857]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - SA
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Rodney B (rodbio2008@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.south_asia;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land: 1000, //distance to land in meters to disallow reef crest, and convert to terrestrial reef flat
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1000, //depth in centimetres
  shallowlag_depth_cutoff: 400, //depth in centimetres
  benthic_depth_cutoff: 750, //depth in centimetres

  //############
  // Clean-up stage selection
  cleanup_stage: 1, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry()
// -----------------------------------------<


/* ############################
START OF CLEAN 3 - Manual Cleanup
 - review everything in this section
 - first review the reef_boundary object - as it is required for all cleanup stages
    - This can be hand drawn or imported from elsewhere, or could just be a big box
    - Reef_boundary defines export extent and can be used to clip out unwanted areas */
var reef_boundary = region_extent;
Map.addLayer(reef_boundary, {}, "Manual reef outline", false);

/* This is the section to add/remove manual cleanups
 - You MUST review it for each region

############################ */

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);
  
  // import the mid mask from asset
  var mid_mask = ee.FeatureCollection(region_params.midMask).merge(add_toMidMask).geometry()
  Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", true, 0.4)
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  var reefCrestToReefSlope = ee.Image().byte().paint(ee.Feature(rc_rs,{zone:1}), "zone").clip(rc_rs);
  var orfToTerrestrialRF =ee.Image().byte().paint(ee.Feature(orf_trf,{zone:1}), "zone").clip(orf_trf);
  var orfToShallowL =ee.Image().byte().paint(ee.Feature(orf_sl,{zone:1}), "zone").clip(orf_sl);
  var slToReefSlope = ee.Image().byte().paint(ee.Feature(sl_rs,{zone:1}), "zone").clip(sl_rs);
  var bReefSlopetoRS = ee.Image().byte().paint(ee.Feature(brs_rs,{zone:1}), "zone").clip(brs_rs);
  var srstoRS = ee.Image().byte().paint(ee.Feature(srs_rs,{zone:1}), "zone").clip(srs_rs);
  var trfToRs = ee.Image().byte().paint(ee.Feature(trf_rs,{zone:1}), "zone").clip(trf_rs);
 // var irfToRs = ee.Image().byte().paint(ee.Feature(irf_rs,{zone:1}), "zone").clip(irf_rs);
 var irfToSl = ee.Image().byte().paint(ee.Feature(irf_sl,{zone:1}), "zone").clip(irf_sl);
 var rsTosl = ee.Image().byte().paint(ee.Feature(rs_sl,{zone:1}), "zone").clip(rs_sl);
  // the "MID MASK" CLEAN
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });
  
  
  //turning RC to RS
  man_geo = man_geo.where({
      test:reefCrestToReefSlope.eq(1)
                                   .and (man_geo.eq(15)),
      value: ee.Image(22)
  });
  
  
  man_geo =man_geo.where({
    test:orfToTerrestrialRF.eq(1)
                           .and (man_geo.eq(14)),
    value: ee.Image(16)
  });
  
  
  man_geo =man_geo.where({
    test:orfToShallowL.eq(1)
                           .and (man_geo.eq(14)),
    value: ee.Image(11)
  });
  
  man_geo =man_geo.where({
   test:slToReefSlope.eq(1)
                       .and (man_geo.eq(11)),
   value: ee.Image(22)
  });
  
  
  man_geo =man_geo.where({
    test:bReefSlopetoRS.eq(1)
                           .and (man_geo.eq(24)),
    value: ee.Image(22)
  });
  
  man_geo =man_geo.where({
    test:srstoRS.eq(1)
                           .and (man_geo.eq(21)),
    value: ee.Image(22)
  });
  
   man_geo =man_geo.where({
    test:trfToRs.eq(1)
                           .and (man_geo.eq(16)),
    value: ee.Image(22)
  });
  
  man_geo =man_geo.where({
    test:irfToSl.eq(1)
                           .and (man_geo.eq(13)),
    value: ee.Image(11)
  });
  
  man_geo =man_geo.where({
    test:rsTosl.eq(1)
                           .and (man_geo.eq(22)),
    value: ee.Image(11)
  });
  /*
  man_geo =man_geo.where({
    test:irfToRs.eq(1)
                           .and (man_geo.eq(13)),
    value: ee.Image(22)
  });
  */
  /*
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })
  */
  
  
  
  /*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone").clip(not_reef_crest);
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone").clip(not_deep_water);
  
  
  // Reef crest -> Inner reef flat (inside the reef) + Yawajaba Island (inshore)
  man_geo = man_geo.where({
    test: notreefcrest.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(13)
  });
  
  // Deep water -> Deep lagoon (inside the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(2)),
    value: ee.Image(12)
  });
  
  ##############
  */
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: reef_boundary,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });
    
  // Seagrass on Back reef slope -> Sand 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(24)),
    value: ee.Image(11)
  });  
  
    
  /*
  
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
  
  */
  
  
  
     
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic, map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: reef_boundary,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

/* ############################
    END OF MANUAL SECTION
############################ */


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geomorphic map - stage 1 clean', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Final geo map (manual clean - stage 3)', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ############################
  // START OF CLEAN 1
  // ############################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    // make a smooth map with masked area as a value
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    //replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // shallow lagoon > 5m == deep lagoon
    clean_map = clean_map.where({
      test: clean_map.eq(11)
                     .and(depth.gt(vars.shallowlag_depth_cutoff)),
      value: ee.Image(12)
    });
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    clean_map = clean_map.where({
      test: depth.gt(vars.geo_depth_cutoff),
      value: ee.Image(2)
    });
    
    // LAND mask cleaning
    Map.addLayer(land_dist.lte(vars.dist_to_land), {}, "Land mask (dist to land)", false);
    
    // reef crest close to land -> TRF
    clean_map = clean_map.where({
      test: land_dist.lte(vars.dist_to_land)
                     .and(clean_map.eq(15)),
      value: ee.Image(16)
    });
    
    // TRF far from land -> ORF
    clean_map = clean_map.where({
      test: land_dist.gt(vars.dist_to_land)
                     .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
    
    
  }
  
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
    
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    
  }
  
  // ############################
  // START OF CLEAN 2
  // ############################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: reef_boundary
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: reef_boundary
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        // reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
