/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var land_dist = ee.Image("projects/coral_atlas/global_datasets/mod44w6_global_distToLand"),
    imageVisParam = {"opacity":1,"bands":["depth"],"min":1500,"max":2500,"gamma":1},
    mid_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                138.95421392366072,
                -15.517297537859836
              ],
              [
                138.46806890412947,
                -16.85458273026955
              ],
              [
                138.75920659944197,
                -16.975459552472827
              ],
              [
                139.26183111116072,
                -15.59932172361471
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                122.89314767388754,
                -12.225521784659392
              ],
              [
                122.91786691216879,
                -12.276686184128721
              ],
              [
                122.9431011345809,
                -12.26578312789007
              ],
              [
                122.92215844659262,
                -12.24179481682996
              ],
              [
                122.9262783196395,
                -12.234748884681588
              ],
              [
                122.97365685967856,
                -12.219985370080801
              ],
              [
                122.96850701836996,
                -12.20706661890133
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                122.38795513652765,
                -16.882147565441134
              ],
              [
                122.11879009746515,
                -17.11197581332371
              ],
              [
                122.0611118748089,
                -17.507925104918197
              ],
              [
                122.17921490215265,
                -17.514473355798813
              ],
              [
                122.65643353008234,
                -17.028613584839665
              ],
              [
                122.92092114890643,
                -16.83549097865235
              ],
              [
                122.83989697898456,
                -16.609274212648568
              ],
              [
                122.78410223586455,
                -16.578883752237832
              ],
              [
                122.7793811000615,
                -16.582111958662487
              ],
              [
                122.77568975540831,
                -16.586985299863162
              ],
              [
                122.75818616355487,
                -16.55399459332653
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                123.08961193278267,
                -16.67545425940004
              ],
              [
                123.12905086073526,
                -16.673398752285234
              ],
              [
                123.13776294901803,
                -16.67923639365902
              ],
              [
                123.14205448344185,
                -16.687869245940668
              ],
              [
                123.14583103373482,
                -16.69230884672426
              ],
              [
                123.14986507609322,
                -16.70003679459735
              ],
              [
                123.14960758402779,
                -16.703736233437976
              ],
              [
                123.14763347819283,
                -16.70644910969991
              ],
              [
                123.14248363688424,
                -16.712039157391658
              ],
              [
                123.17715923502877,
                -16.71113489607133
              ],
              [
                123.1759576053901,
                -16.660571657356915
              ],
              [
                123.13355724528267,
                -16.658104815938014
              ],
              [
                123.08918377530031,
                -16.650335018852264
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                139.0686846562806,
                -17.143295961809102
              ],
              [
                139.2279864140931,
                -17.389839404376474
              ],
              [
                139.47929866995247,
                -17.438322304737
              ],
              [
                139.54521663870247,
                -17.349208699805782
              ],
              [
                139.34059627737435,
                -17.240378992341842
              ],
              [
                139.24034603323372,
                -17.15641826263108
              ],
              [
                139.20326717581185,
                -17.106548589200422
              ],
              [
                139.1840411015931,
                -17.052726850801545
              ],
              [
                139.1565752812806,
                -16.997576302696423
              ],
              [
                139.12773616995247,
                -16.968681439251384
              ],
              [
                139.06044491018685,
                -16.918761658948988
              ],
              [
                139.02611263479622,
                -16.879341956715933
              ],
              [
                138.97392757620247,
                -16.82545505566457
              ],
              [
                138.84071834768685,
                -16.805736503164674
              ],
              [
                138.80775936331185,
                -16.893796804141168
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                129.19283102654504,
                -14.448520331615068
              ],
              [
                129.32947348259972,
                -14.522315119655197
              ],
              [
                129.4537563195138,
                -14.45118002942905
              ],
              [
                129.3933315148263,
                -14.342106390179678
              ],
              [
                129.39676474236535,
                -14.292207430728691
              ],
              [
                129.40294455193566,
                -14.274241092751163
              ],
              [
                129.4001979699044,
                -14.254276813876707
              ],
              [
                129.41478645115717,
                -14.228766447138446
              ],
              [
                129.42405616551264,
                -14.227102489405556
              ],
              [
                129.42989265232904,
                -14.226436902881687
              ],
              [
                129.433669202622,
                -14.216785678042367
              ],
              [
                129.43744575291498,
                -14.210462238420018
              ],
              [
                129.44053565770014,
                -14.200810331968288
              ],
              [
                129.4432822397314,
                -14.191823704351927
              ],
              [
                129.4501486948095,
                -14.187163831164748
              ],
              [
                129.45941840916498,
                -14.183502435016614
              ],
              [
                129.46800147801264,
                -14.173849379936595
              ],
              [
                129.49546729832514,
                -14.098883929391574
              ],
              [
                129.49512397557123,
                -14.09305669167015
              ],
              [
                129.47812949925287,
                -14.078071683006225
              ],
              [
                129.47194968968256,
                -14.056424935515095
              ],
              [
                129.4685164621435,
                -14.052261864596526
              ],
              [
                129.46765815525873,
                -14.046433438117841
              ],
              [
                129.46800147801264,
                -14.040438330410582
              ],
              [
                129.47315131932123,
                -14.037440717724426
              ],
              [
                129.48053275853022,
                -14.036108432832625
              ],
              [
                129.49816039846843,
                -14.035580161184056
              ],
              [
                129.5209913616032,
                -14.032082868436444
              ],
              [
                129.53626922415202,
                -14.036246306133561
              ],
              [
                129.53953079031413,
                -14.053398871498818
              ],
              [
                129.5433073406071,
                -14.070550151591217
              ],
              [
                129.54450897024577,
                -14.079708075233967
              ],
              [
                129.54468063162273,
                -14.090530602591093
              ],
              [
                129.5429640178532,
                -14.105514793327316
              ],
              [
                129.53901580618327,
                -14.107512611050655
              ],
              [
                129.5355825786442,
                -14.11650257412163
              ],
              [
                129.53678420828288,
                -14.121163896815183
              ],
              [
                129.5348959331364,
                -14.123660994730695
              ],
              [
                129.53111938284343,
                -14.130153321144354
              ],
              [
                129.5352392558903,
                -14.13198445665312
              ],
              [
                129.53970245169108,
                -14.13165152402015
              ],
              [
                129.55189040945476,
                -14.123993939050552
              ],
              [
                129.5520620708317,
                -14.11733496016967
              ],
              [
                129.55635360525554,
                -14.092029065946596
              ],
              [
                129.55995849417155,
                -14.085369153522205
              ],
              [
                129.5623617534489,
                -14.080540595546614
              ],
              [
                129.56630996511882,
                -14.078209531025797
              ],
              [
                129.56957153128093,
                -14.076710976988634
              ],
              [
                129.5733480815739,
                -14.0762114567922
              ],
              [
                129.5759230022282,
                -14.075212413123433
              ],
              [
                129.5791845683903,
                -14.074379873396438
              ],
              [
                129.58553603933757,
                -14.073713839431141
              ],
              [
                129.5894842510075,
                -14.074879397596595
              ],
              [
                129.59188751028483,
                -14.078376036423235
              ],
              [
                129.59514907644694,
                -14.077043989846276
              ],
              [
                129.59635070608562,
                -14.070050617929637
              ],
              [
                129.59995559500163,
                -14.066220823597135
              ],
              [
                129.60390380667155,
                -14.062390965122944
              ],
              [
                129.60733703421062,
                -14.05689583878675
              ],
              [
                129.60733703421062,
                -14.053731918304454
              ],
              [
                129.6066503887028,
                -14.048902692197016
              ],
              [
                129.60476211355632,
                -14.045239073410391
              ],
              [
                129.6008139018864,
                -14.042574586573192
              ],
              [
                129.59583572195476,
                -14.04157539601876
              ],
              [
                129.583991086945,
                -14.033748252589975
              ],
              [
                129.583991086945,
                -14.021757216707124
              ],
              [
                129.59102920340007,
                -14.002437007494237
              ],
              [
                129.59806731985515,
                -14.002603567967762
              ],
              [
                129.60287383840983,
                -14.005268519121762
              ],
              [
                129.60527709768718,
                -14.011930761734694
              ],
              [
                129.60819534109538,
                -14.01742696636539
              ],
              [
                129.60871032522624,
                -14.023089584986517
              ],
              [
                129.6121435527653,
                -14.025254666936112
              ],
              [
                129.6176367168278,
                -14.02692010068326
              ],
              [
                129.62175658987468,
                -14.02608738532134
              ],
              [
                129.62724975393718,
                -14.032249407396236
              ],
              [
                129.63857940481608,
                -14.033914790339898
              ],
              [
                129.6483641033024,
                -14.033748252589975
              ],
              [
                129.65145400808757,
                -14.030584012354405
              ],
              [
                129.65814880178874,
                -14.029418228627398
              ],
              [
                129.67119506643718,
                -14.024755034453845
              ],
              [
                129.68218139456218,
                -14.016760766752684
              ],
              [
                129.69557098196452,
                -13.998772646530291
              ],
              [
                129.70724395559733,
                -13.987446070583745
              ],
              [
                129.71548370169108,
                -13.976452095808359
              ],
              [
                129.7213201885075,
                -13.964791245771252
              ],
              [
                129.7271566753239,
                -13.955128951478256
              ],
              [
                129.72990325735515,
                -13.945466252258857
              ],
              [
                129.73196319387858,
                -13.935469930677545
              ],
              [
                129.73196319387858,
                -13.920141397144766
              ],
              [
                129.7189730225054,
                -13.903170272967408
              ],
              [
                129.71141992191946,
                -13.893505400981974
              ],
              [
                129.7086733398882,
                -13.88350683317169
              ],
              [
                129.71073327641164,
                -13.872841218806682
              ],
              [
                129.7134798584429,
                -13.846841730140225
              ],
              [
                129.73270593266164,
                -13.823839757918822
              ],
              [
                129.75770358011434,
                -13.799551173909714
              ],
              [
                129.76127428186675,
                -13.76073302298954
              ],
              [
                129.78022726013472,
                -13.742658131313677
              ],
              [
                129.77597122510056,
                -13.71761287550173
              ],
              [
                129.78133114939456,
                -13.686557335065519
              ],
              [
                129.7868402367535,
                -13.654364313633819
              ],
              [
                129.79476462191366,
                -13.648276775412508
              ],
              [
                129.7935812619977,
                -13.63556162250807
              ],
              [
                129.2059222138477,
                -13.712574666571781
              ],
              [
                129.0782061493946,
                -14.25759955242258
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                130.45686333761068,
                -11.365832373370504
              ],
              [
                130.3877500240231,
                -11.3456362698991
              ],
              [
                130.34586464804653,
                -11.354724693381426
              ],
              [
                130.19826534134927,
                -11.63888644295029
              ],
              [
                130.20169856888833,
                -11.654690380225233
              ],
              [
                130.19345882279458,
                -11.72698717757588
              ],
              [
                130.62535884720864,
                -11.768667450185927
              ],
              [
                130.6555712495524,
                -11.737071692554487
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                123.74470137933088,
                -16.142283968727348
              ],
              [
                123.7486495910008,
                -16.14195418146066
              ],
              [
                123.75646018365217,
                -16.144922247081325
              ],
              [
                123.77190970757795,
                -16.145416920357736
              ],
              [
                123.77534293511701,
                -16.148467378240426
              ],
              [
                123.78135108331037,
                -16.14574670185514
              ],
              [
                123.78246688226056,
                -16.137501999592097
              ],
              [
                123.78281020501447,
                -16.125793932576325
              ],
              [
                123.77474212029767,
                -16.127525450873332
              ],
              [
                123.7555555328687,
                -16.123472938305145
              ],
              [
                123.73680152743657,
                -16.118030861447167
              ],
              [
                123.73233833163579,
                -16.118443145227108
              ],
              [
                123.73053588717778,
                -16.117206291315412
              ],
              [
                123.71658840030034,
                -16.118772971633803
              ],
              [
                123.72525729983647,
                -16.123472938305145
              ],
              [
                123.72748809326299,
                -16.126982937007096
              ],
              [
                123.72881846893438,
                -16.129332836928366
              ],
              [
                123.73100715149053,
                -16.13092003426305
              ],
              [
                123.73407559860357,
                -16.132321704452426
              ],
              [
                123.73628573883184,
                -16.134650928566785
              ],
              [
                123.73956876266607,
                -16.136547267793443
              ],
              [
                123.74270158279546,
                -16.138299304200746
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                123.60239866986512,
                -16.096340761352298
              ],
              [
                123.60520962491273,
                -16.097804524904966
              ],
              [
                123.60673311963319,
                -16.098773489207527
              ],
              [
                123.60795620694398,
                -16.09947443915918
              ],
              [
                123.60890034451722,
                -16.100175386635755
              ],
              [
                123.61158255353212,
                -16.100525859445867
              ],
              [
                123.61308459058046,
                -16.10025785088204
              ],
              [
                123.61748341336488,
                -16.092794697870893
              ],
              [
                123.61259106412172,
                -16.0909391743032
              ],
              [
                123.60319260373353,
                -16.094402804273344
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                124.17669526197406,
                -16.278179354651876
              ],
              [
                124.15924829536186,
                -16.28407751200753
              ],
              [
                124.1443771138853,
                -16.275639083652315
              ],
              [
                124.13557828627859,
                -16.269636888140575
              ],
              [
                124.13034131107182,
                -16.262246095590026
              ],
              [
                124.12089796068567,
                -16.261964969454464
              ],
              [
                124.1064750137258,
                -16.264037216478872
              ],
              [
                124.0872435291795,
                -16.26290491469641
              ],
              [
                124.07075525857273,
                -16.25898890395233
              ],
              [
                124.05220295290701,
                -16.248186181871723
              ],
              [
                124.02746059465974,
                -16.247667417431053
              ],
              [
                123.98931014747862,
                -16.245955965021274
              ],
              [
                123.97309752690772,
                -16.23807570728294
              ],
              [
                123.94017030669687,
                -16.226469200094375
              ],
              [
                123.9278456587051,
                -16.20711366387292
              ],
              [
                123.90491499165888,
                -16.205321927832234
              ],
              [
                123.9167288597502,
                -16.220530454293133
              ],
              [
                123.92730909090675,
                -16.22787122778139
              ],
              [
                123.96117125381163,
                -16.24815757543942
              ],
              [
                123.96744091439109,
                -16.257415480931865
              ],
              [
                124.15455094434708,
                -16.321182174517997
              ],
              [
                124.20364609815567,
                -16.37784578319699
              ],
              [
                124.26681748487442,
                -16.406171416446814
              ],
              [
                124.30835953809708,
                -16.29086699161242
              ],
              [
                124.20227280714005,
                -16.244726198616053
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                124.08330408275539,
                -16.107962087138734
              ],
              [
                124.09420458019191,
                -16.109281459196943
              ],
              [
                124.09901109874659,
                -16.09864377221666
              ],
              [
                124.08459154308252,
                -16.093530882605304
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                124.38301986642216,
                -15.877466882916965
              ],
              [
                124.40310424752568,
                -15.946471993991786
              ],
              [
                124.42543897943773,
                -15.94552406118938
              ],
              [
                124.46876077949008,
                -15.87569305742341
              ],
              [
                124.48524027167758,
                -15.845474972209535
              ],
              [
                124.48421030341586,
                -15.820537516791646
              ],
              [
                124.43254022895297,
                -15.8182252789542
              ],
              [
                124.4145157843729,
                -15.85653894955033
              ],
              [
                124.41159754096469,
                -15.88312304020543
              ],
              [
                124.40550451193593,
                -15.861205976618855
              ],
              [
                124.40498952780507,
                -15.856334711361194
              ],
              [
                124.40516118918202,
                -15.846344121412894
              ],
              [
                124.40421705160878,
                -15.83362810997151
              ],
              [
                124.39942451248601,
                -15.8066189208772
              ],
              [
                124.38277335892155,
                -15.808518370012171
              ],
              [
                124.38534827957585,
                -15.846173330528092
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                130.02550926620506,
                -13.09550163023884
              ],
              [
                130.03752556259178,
                -13.134956984496112
              ],
              [
                130.0553783457949,
                -13.134622643695177
              ],
              [
                130.0718578379824,
                -13.140975041052243
              ],
              [
                130.08147087509178,
                -13.151673443855891
              ],
              [
                130.09760704452538,
                -13.178751689164997
              ],
              [
                130.10893669540428,
                -13.19747069989415
              ],
              [
                130.1103099864199,
                -13.21084054398231
              ],
              [
                130.11339989120506,
                -13.219196324694375
              ],
              [
                130.1103099864199,
                -13.235238621144408
              ],
              [
                130.120952991791,
                -13.254287476047978
              ],
              [
                130.10001030380272,
                -13.40161489426244
              ],
              [
                130.17434974551782,
                -13.442509497862366
              ],
              [
                130.26575049922684,
                -13.373445799195192
              ],
              [
                130.29770567008086,
                -13.260073788586853
              ],
              [
                130.1962786457369,
                -13.24816700206771
              ],
              [
                130.15665855819725,
                -13.229557095236082
              ],
              [
                130.1535686534121,
                -13.219530549970312
              ],
              [
                130.1477321665957,
                -13.207163909833145
              ],
              [
                130.1315959971621,
                -13.186774297807801
              ],
              [
                130.12198296005272,
                -13.179420249934122
              ],
              [
                130.11236992294334,
                -13.17106310904776
              ],
              [
                130.10790672714256,
                -13.156688159520979
              ],
              [
                130.10584679061913,
                -13.140306375387764
              ],
              [
                130.10069694931053,
                -13.132950932861887
              ],
              [
                130.10172691757225,
                -13.122251714107506
              ],
              [
                130.10550346786522,
                -13.118908112710429
              ],
              [
                130.11305656845116,
                -13.11757065941805
              ],
              [
                130.11751976425194,
                -13.112889515606357
              ],
              [
                130.11854973251366,
                -13.105533252481546
              ],
              [
                130.1154598277285,
                -13.098845549733534
              ],
              [
                130.1106533091738,
                -13.09382965346603
              ],
              [
                130.10275688583397,
                -13.080787845262032
              ],
              [
                130.10035362655663,
                -13.067745347253855
              ],
              [
                130.0873073619082,
                -13.05704329567668
              ],
              [
                130.06224480087303,
                -13.054702160080886
              ],
              [
                130.0164127320686,
                -13.076440227888824
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                131.2678187022704,
                -11.992629733696772
              ],
              [
                131.26095224719228,
                -12.033262039886651
              ],
              [
                131.294941199829,
                -12.038298675179092
              ],
              [
                131.30318094592275,
                -12.041320611036783
              ],
              [
                131.29288126330553,
                -12.052400751581063
              ],
              [
                131.2973444591063,
                -12.083624139590402
              ],
              [
                131.30678330668465,
                -12.204795017277696
              ],
              [
                131.40617777209462,
                -12.108465954208892
              ],
              [
                131.46231649150235,
                -11.989553055738108
              ],
              [
                131.3929652952133,
                -11.97544768699259
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                135.8299165715639,
                -13.205417053911395
              ],
              [
                135.76262531179827,
                -13.610182011016589
              ],
              [
                135.8958345403139,
                -13.80763892551946
              ],
              [
                135.84918501471884,
                -14.082157872761412
              ],
              [
                135.76129438971884,
                -14.204670809614544
              ],
              [
                135.8017847624844,
                -14.313809854546035
              ],
              [
                135.89862349128134,
                -14.347075283020931
              ],
              [
                135.74372992464646,
                -14.482741126883486
              ],
              [
                135.7959149832402,
                -14.561176698063182
              ],
              [
                135.9167645926152,
                -14.551872237919671
              ],
              [
                136.01976141878708,
                -14.355057909488462
              ],
              [
                136.12687811800583,
                -14.048854930934183
              ],
              [
                136.0622936798312,
                -13.81222031125032
              ],
              [
                136.09250608217496,
                -13.704175350862641
              ],
              [
                136.1543041778781,
                -13.628113894215403
              ],
              [
                136.19000974428434,
                -13.576057727643256
              ],
              [
                136.24631467592496,
                -13.5446850321629
              ],
              [
                136.31841245424528,
                -13.532668860735868
              ],
              [
                136.3644177032687,
                -13.375735597889461
              ],
              [
                136.16254392397184,
                -13.328301549317974
              ],
              [
                136.20065274965543,
                -13.29381111460244
              ],
              [
                136.20786252748746,
                -13.280445827219747
              ],
              [
                136.1773068023898,
                -13.27509950617352
              ],
              [
                136.16185727846403,
                -13.26273568802156
              ],
              [
                136.15396085512418,
                -13.230319450948539
              ],
              [
                136.18074002992887,
                -13.178511362050273
              ],
              [
                136.1531593815871,
                -13.092251652313605
              ],
              [
                136.0491325871535,
                -13.135050955111122
              ],
              [
                135.91661177179077,
                -13.225306245536334
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    });
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - PNG - Solomons
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Chris Roelfsema (chris.m.roelfsema@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.timor;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land: 1000, //distance to land in meters to disallow reef crest, and convert to terrestrial reef flat
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1000, //depth in centimetres
  shallowlag_depth_cutoff: 400, //depth in centimetres
  benthic_depth_cutoff: 750, //depth in centimetres
  
  //############
  // Clean-up stage selection
  cleanup_stage: 2, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  smooth_output: false, // run smoother over final output (includes noise removal) (should be false for second pass)
  
  // results/layers to show
  export_small_area: false,
  show_eg_area: false, // constrain the map add to the corresponding example_area polygon geomtery (you can change that)
                              // - you can either set this, or have it false and just navigate to the area you want to see (keeping in mind ALL tiles in the zoom area will calcualte)
  reproject_display: true,
  //reproject_res: ee.Number(sensor_params.pixel).pow(2),
  
  // export options
  do_export: false, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.smooth_output = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.smooth_output = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}
// -----------------------------------------<

// ############################
// START OF CLEAN 3 - Manual Cleanup

// review everything in this section
// first review the reef_boundary object - as it is required for all cleanup stages
// ############################

// This can be hand drawn or imported from elsewhere, or could just be a big box
// Reef_boundary defines export extent and can be used to clip out unwanted areas
var reef_boundary = ee.FeatureCollection([ee.Feature(inner),ee.Feature(outer)]).geometry();
Map.addLayer(reef_boundary, {}, "Manual reef outline", false);

// ############################
// This is the section to add/remove manual cleanups
// You MUST review it for each region
// ############################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var depth_cont = depth.lt(900);
  Map.addLayer(depth_cont, {}, "depth contour", false);
  
  // update these values based on inspection of the layer
  //Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask, {zone: 1}), "zone").clip(mid_mask);
  var landmaskfc = ee.FeatureCollection(region_params.land_mask).geometry();
  var landmask = ee.Image().byte().paint(ee.Feature(landmaskfc, {zone: 1}), "zone").clip(landmaskfc);
  var inner_extent = ee.Image().byte().paint(ee.Feature(inner, {zone: 1}), "zone").clip(inner);
  var outer_extent = ee.Image().byte().paint(ee.Feature(outer, {zone: 1}), "zone").clip(outer);
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone").clip(not_reef_crest);
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone").clip(not_deep_water);
  var arnhemcoast = ee.Image().byte().paint(ee.Feature(arnhem_coast, {zone: 1}), "zone").clip(arnhem_coast);
  var reefslope = ee.Image().byte().paint(ee.Feature(reef_slope, {zone: 1}), "zone").clip(reef_slope);
  var litchfield = ee.Image().byte().paint(ee.Feature(litchfield_coast, {zone: 1}), "zone").clip(litchfield_coast);
  var northernwa = ee.Image().byte().paint(ee.Feature(northern_wa, {zone: 1}), "zone").clip(northern_wa);
  var dampier = ee.Image().byte().paint(ee.Feature(dampier_coast, {zone: 1}), "zone").clip(dampier_coast);
  var welleslytiwi = ee.Image().byte().paint(ee.Feature(wellesly_tiwi, {zone: 1}), "zone").clip(wellesly_tiwi);
  var tiwi = ee.Image().byte().paint(ee.Feature(tiwi_is, {zone: 1}), "zone").clip(tiwi_is);
  var midshelf = ee.Image().byte().paint(ee.Feature(mid_shelf, {zone: 1}), "zone").clip(mid_shelf);
  var inshorereefouter = ee.Image().byte().paint(ee.Feature(inshore_reef_outer, {zone: 1}), "zone").clip(inshore_reef_outer);
  var inshorereefinner = ee.Image().byte().paint(ee.Feature(inshore_reef_inner, {zone: 1}), "zone").clip(inshore_reef_inner);

  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);
 
  // "LAND MASK" CLEAN
  // remove
  man_geo = man_geo.where({
    test: landmask.eq(1),
    value: ee.Image(0)
  });
  
  // "NOT REEF" CLEAN
  // remove
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });
  
  /*// WAVE clean ############# ---> (to be integrated into RF classifier when feasible)
  // remove
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })*/
  
  // **Deep Water clean**
  
  // Reef crest -> Inner reef flat (inside the reef) + Yawajaba Island (inshore)
  man_geo = man_geo.where({
    test: notreefcrest.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(13)
  });
  
  // Deep water -> Deep lagoon (inside the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(2)),
    value: ee.Image(12)
  });
  
  // Shallow lagoon/Deep lagoon/Shelterd reef slope -> Reef slope (around the reef edge)
  man_geo = man_geo.where({
    test: reefslope.eq(1)
                     .and(man_geo.eq(11)).or(man_geo.eq(12)).or(man_geo.eq(21)),
    value: ee.Image(22)
  });
  
  // Reef slope/Sheletered reef slope -> Deep lagoon (insided the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(22)).or(man_geo.eq(21)),
    value: ee.Image(12)
  });
  

  // **Shallow Water clean**
  
  // Create smoothed depth layer to use in where operations
  var smooth_depth = depth
                      //.unmask(99)
                      .focal_mode({
                        radius: vars.smooth_radius, // relates to smoothness required
                        kernelType: 'circle', units: 'pixels', iterations: 2
                      });
  
  
  // **Litchfield Coast**
  
  // Inner reef flat/Outer reef flat -> TRF
  man_geo = man_geo.where({
    test: litchfield.eq(1)
                     .and(man_geo.eq(13)).or(man_geo.eq(14)),
    value: ee.Image(16)
  });
  
  // Non TRF -> Mask
  man_geo = man_geo.where({
    test: litchfield.eq(1)
                     .neq(man_geo.eq(16)),
    value: ee.Image(0)
  });
  
  // **Arnhem Land Coast**
  
  // Shallow lagoon, IRF, SRS, BRS, RC -> TRF
  man_geo = man_geo.where({
    test: arnhemcoast.eq(1)
                     .and(man_geo.eq(11)).or(man_geo.eq(13)).or(man_geo.eq(21)).or(man_geo.eq(24)).or(man_geo.eq(15))
                     .and(smooth_depth.lte(300)),
    value: ee.Image(16)
  });
  
  // Shallow lagoon, IRF, BRS -> Mask
  man_geo = man_geo.where({
    test: arnhemcoast.eq(1)
                     .and(man_geo.eq(11)).or(man_geo.eq(16)).or(man_geo.eq(21)).or(man_geo.eq(24))
                     .and(smooth_depth.gt(300)),
    value: ee.Image(0)
  });
  
  // **Northern WA Coast** was 150 and BRS
  // Shallow lagoon, IRF, BRS -> TRF 
  /*man_geo = man_geo.where({
    test: northernwa.eq(1)
                     .and(man_geo.eq(11)).or(man_geo.eq(16)).or(man_geo.eq(24))
                     .and(smooth_depth.gt(150)),
    value: ee.Image(0)
  });*/
  
  // Shallow lagoon, IRF, Sheltered slope -> TRF
  man_geo = man_geo.where({
    test: northernwa.eq(1)
                     .and(man_geo.eq(11)).or(man_geo.eq(13)).or(man_geo.eq(21)),
    value: ee.Image(16)
  });
  
  // **Dampier Coast**
  
  // Shallow lagoon, IRF, Sheltered slope -> TRF
  man_geo = man_geo.where({
    test: dampier.eq(1)
                     .and(man_geo.eq(11)).or(man_geo.eq(13)).or(man_geo.eq(21)),
    value: ee.Image(16)
  });
  
  // **Wellesley Island & Tiwi Islands**
  
  // Shallow lagoon -> BRS 
  man_geo = man_geo.where({
    test: welleslytiwi.eq(1)
                     .and(man_geo.eq(11)),
    value: ee.Image(24)
  });
  
  // IRF, SRS -> TRF 
  man_geo = man_geo.where({
    test: welleslytiwi.eq(1)
                     .and(man_geo.eq(13)).or(man_geo.eq(21)),
    value: ee.Image(16)
  });
  
  // BRS -> TRF
  man_geo = man_geo.where({
    test: tiwi.eq(1)
                     .and(man_geo.eq(24)),
    value: ee.Image(16)
  });
  
  // **Mid-Shelf**
  
  // Shallow lagoon, Deep lagoon, SRS -> BRS 
  man_geo = man_geo.where({
    test: midshelf.eq(1)
                     .and(man_geo.eq(11)).or(man_geo.eq(12)).or(man_geo.eq(21)),
    value: ee.Image(24)
  });
  
  // Reef crest -> Outer reef flat
  man_geo = man_geo.where({
    test: midshelf.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(14)
  });
  
  // **Inshore reef**
  
  // Inner reef flat, TRF -> Outer reef flat
  man_geo = man_geo.where({
    test: inshorereefouter.eq(1)
                     .and(man_geo.eq(13)).or(man_geo.eq(16)),
    value: ee.Image(14)
  });
  
  // TRF, SRS -> Inner reef flat
  man_geo = man_geo.where({
    test: inshorereefinner.eq(1)
                     .and(man_geo.eq(16)).or(man_geo.eq(21)),
    value: ee.Image(13)
  });
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add the manual layer to the map
  var image = ee.Image(region_params.image);
  Map.addLayer(image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: reef_boundary,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var depth_cont = depth.lt(900);
  Map.addLayer(depth_cont, {}, "depth contour", false);
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // **Generic benthic rules**
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
    
  // **Manual polygon guided rules**
    
  // Sub-regions copied here to run in benthic clean, originally defined under manual cleanup for geo
  var subreg_1 = ee.Image().byte().paint(ee.Feature(inner, {zone: 1}), "zone").clip(inner);
  var subreg_2 = ee.Image().byte().paint(ee.Feature(outer, {zone: 1}), "zone").clip(outer);
  var ashmore = ee.Image().byte().paint(ee.Feature(ashmore_reef, {zone: 1}), "zone").clip(ashmore_reef);
   
  // **Inshore**
    
  // Rock on TRF -> coral/algae
  man_benthic = man_benthic.where({
    test: subreg_1.eq(1)
                      .and(geo_map.eq(16))
                      .and(man_benthic.eq(13)),
    value: ee.Image(15)
  });
    
  // **Offshore**
    
  // Seagrass -> Coral/algae (Ashmore Reef)
  man_benthic = man_benthic.where({
    test: ashmore.eq(1)
                      .and(man_benthic.eq(14)),
    value: ee.Image(15)
  });
  
  // Seagrass -> Sand
  man_benthic = man_benthic.where({
    test: subreg_2.eq(1)
                      .and(man_benthic.eq(14)),
    value: ee.Image(11)
  });
  
  // Sand on RC, RS -> Coral/algae
  man_benthic = man_benthic.where({
    test: subreg_2.eq(1)
                      .and(man_benthic.eq(11))
                      .and(geo_map.eq(15)).or(geo_map.eq(22)),
    value: ee.Image(15)
  });
     
  // Add the manual layer to the map

  var low_tide_image_dove = ee.Image(region_params.image);
  Map.addLayer(low_tide_image_dove, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + ' low tide', false); // image data
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic, map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: reef_boundary,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// ############################
// END OF MANUAL SECTION
// ############################


// 2. Data loads & vis

// load input data

// define raw geo/benthic outputs
// Run check to see if the region has been split into multiple areas

// geo
if (ee.List(region_params.geo_map).length().getInfo() > 1) {
  var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
               .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
               .selfMask();
} else {
  var geo_map_raw = ee.Image(region_params.geo_map);
}

// benthic
if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
    var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
             .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
             .selfMask();
} else {
    var benthic_map = ee.Image(region_params.benthic_map);
}

// set the geo map for further processing
if (vars.geomorphic && vars.obia_2nd_pass) {
  // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
  var geo_map = ee.Image(region_params.geo_map_clean1);
} else if (vars.geomorphic) {
  var geo_map = geo_map_raw;
}

var depth = ee.Image(region_params.pixels).select('depth');
var low_tide_image = ee.Image(region_params.image);

var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
//Map.centerObject(eg_area, 11)
Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);

// load for display purposes
if (vars.geomorphic) {
  Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
  if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geomorphic map - stage 1 clean', false);
}
if (!vars.geomorphic) {
  // Use the manually cleaned geomorphic map as input for the benthic clean
  var geo_map = ee.Image(region_params.geo_map_clean3);
  if (!vars.manual_clean) Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Final geo map (manual clean - stage 3)', false);
  Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
}

// 3. Object-based re-classificaiton and cleaning

/*

// if we want to retain the land/waves flags, need to add them in before makign the mask

######## Not that straight forwards - the land and bright masks are a LOT of not land and not breakign waves... =(

// add in land, for geomorphic clean up rules
  geo_map = geo_map.unmask(0).where({
    test: depth.eq(-2).and(globcover.select('landcover').neq(210)),
    value: ee.Image(1)
  })
  
  // change -3 to reef rim, hope that clouds have been handleded by masking
  geo_map = geo_map.unmask(0).where({
    test: depth.eq(-3),
    value: ee.Image(15)
  })
  
  // remask
  geo_map = geo_map.updateMask(geo_map.gt(0))

*/


/* OUTPUT EXTENT
  - to the mapping extent just so it doesn't balloon out
  - to the 'reef boundary' extent for noise/deep removal
*/  
var class_extent_mask = geo_map.gt(0);

/*

########
Initial small object clean
 - this was originally at the end, but we needed to massively reduce the number of objects to 
   iterate through in the OBIA cleaning, so this happens first now
 - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
 
 - includes a possible special case for:
      - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
      - benthic to allow breaking waves (temporal class) to grow into surrounding class
########

*/

// ############################
// START OF CLEAN 1
// ############################

if (vars.geomorphic && !vars.obia_2nd_pass) {
  
  // make a smooth map with masked area as a value
  var smooth_map = geo_map
                      //.unmask(99)
                      .focal_mode({
                        radius: vars.smooth_radius, // relates to smoothness required
                        kernelType: 'circle', units: 'pixels', iterations: 2
                      });
  //smooth_map = smooth_map.updateMask(smooth_map.neq(99)).updateMask(class_extent_mask)
  
  //replace small objects with smooth underneath
  var clean_map = geo_map.where({
    test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
    value: smooth_map
  //}).updateMask(smooth_map.neq(99)).updateMask(class_extent_mask)
  }).updateMask(class_extent_mask);
  
  // shallow lagoon > 5m == deep lagoon
  clean_map = clean_map.where({
    test: clean_map.eq(11)
                   .and(depth.gt(vars.shallowlag_depth_cutoff)),
    value: ee.Image(12)
  });
  
  /*// deep lagoon == deep (to hard to differentiate deep water vs. deep lagoon effectively over large areas)
  clean_map = clean_map.where({
    test: clean_map.eq(12),
    value: ee.Image(2)
  })*/
  
  // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
  clean_map = clean_map.where({
    test: depth.gt(vars.geo_depth_cutoff),
    value: ee.Image(2)
  });
  
  // deep water in depth data == deep (only for inshore reefs of Timor Sea)
  var inner_extent = ee.Image().byte().paint(ee.Feature(inner, {zone: 1}), "zone").clip(inner);
  clean_map = clean_map.where({
    test: depth.gt(700)
                   .and(inner_extent.eq(1)),
    value: ee.Image(2)
  });
  
  // LAND mask cleaning
  Map.addLayer(land_dist.lte(vars.dist_to_land), {}, "Land mask (dist to land)", false);
  
  // reef crest close to land -> TRF (only for inner reefs of Timor Sea)
  var inner_extent = ee.Image().byte().paint(ee.Feature(inner, {zone: 1}), "zone").clip(inner);
  clean_map = clean_map.where({
    test: land_dist.lte(vars.dist_to_land)
                   .and(inner_extent.eq(1))
                   .and(clean_map.eq(15)),
    value: ee.Image(16)
  });
  
  // TRF far from land -> ORF
  clean_map = clean_map.where({
    test: land_dist.gt(vars.dist_to_land)
                   .and(clean_map.eq(16)),
    value: ee.Image(14)
  });
  
  
  
  /*//CLEAN UP SMALL (but slightly larger) TURBID AREAS
  var smooth_noturbid = clean_map
                          .updateMask(clean_map.neq(3))
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(1.5),
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          })
  
  clean_map = clean_map.where({
    test: clean_map.eq(3).connectedPixelCount(vars.small_object_geo.multiply(10), false).lt(vars.small_object_geo.multiply(10)), 
    value: smooth_noturbid
  }).updateMask(class_extent_mask)*/
}

// Benthic Clean 1
if (!vars.geomorphic && vars.cleanup_stage == 1) {
  
  // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
  var smooth_map = benthic_map
                      //.unmask(99)
                      .focal_mode({
                        radius: vars.smooth_radius, // relates to smoothness required
                        kernelType: 'circle', units: 'pixels', iterations: 1
                      });
  //smooth_map = smooth_map.updateMask(smooth_map.neq(99)).updateMask(class_extent_mask)
  
  //replace small objects with smooth underneath
  var clean_map = benthic_map.where({
    test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
    value: smooth_map
  //}).updateMask(smooth_map.neq(99)).updateMask(class_extent_mask)
  }).updateMask(class_extent_mask);
  
  
  /*// CLEAN UP ALL TEMPORAL AREAS
  var smooth_notemp = benthic_map
                          .updateMask(benthic_map.neq(2))
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(2),
                            kernelType: 'circle', units: 'pixels', iterations: 3
                          })
  
  
  clean_map = clean_map1.where({
    test: benthic_map.eq(2), 
    value: smooth_notemp
  }).updateMask(clean_map1.gte(0))
  
  // this catches any left over unmasked temporal, and assigned it back to temporal
  clean_map = clean_map.where({
    test: clean_map.unmask(99).eq(99).and(clean_map1.eq(2)),
    value: ee.Image(2)
  })*/
  
}

// ############################
// START OF CLEAN 2
// ############################

if (vars.geomorphic && vars.obia_2nd_pass) {
  var clean_map = geo_map;
}

if (vars.obia_clean) {
  
  if (vars.geomorphic && !vars.fast_clean) { // SHOULD TRY TO PUT THIS OUT TO A MODULE TO KEEP THE RULES THE SAME EVERYWEHRE?
    
    // #########
    // THE PLAN - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
    // #########
    
    // FUNCTION that maps over feature colleciton and assigns neighbour percentages
    var set_neighbour_properties = function(f) {
      // make the 1px buffer
      var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
      // reduce the classes in the buffer zone
      var diff_classes = ee.Dictionary(
        clean_map.unmask(ee.Image(0)).reduceRegion({
          reducer: ee.Reducer.frequencyHistogram(),
          geometry: diff.geometry(),
          scale: vars.image_data_scale,
          maxPixels: 1e11
        }).get('classification')
      );
      // calculate the percentages
      var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
      var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
      
      /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
         or we can return the neighbour % and do image logic via (painted) rasters */
      
      return(f.set(diff_percs));
    };
    
    // FUNCTION to reduce the map to vectors and map the neighbour properties function
    var reduce_neighbours = function() {
      // reduce map to vectors
      var map_fc = clean_map
            .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
            .reduceToVectors({
              scale: vars.image_data_scale, 
              eightConnected: false,
              bestEffort: true, 
              maxPixels: 1e13,
              tileScale: 1,
              geometry: reef_boundary
            });
      // map the function, calculate neighbour properties
      return(map_fc.map(set_neighbour_properties));
    };
    
    // first make a make size threshold, so we're not vecortising huge objects when we don't have to
    var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
    //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
    Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
    
    // This is where we select the single or group of classes to vectorise for cleaning up
    //var classn = ee.Number(15) // one class
    var classn = clean_map.where({
      test: clean_map.neq(16) //TRF
              .and(clean_map.neq(15)) //RR
              .and(clean_map.neq(14)) //ORF
              .and(clean_map.neq(13)) //IRF
              //.and(clean_map.neq(12)) // deep L
              .and(clean_map.neq(11)), // shallow L 
      value: ee.Image(99) // 99 ensures it's ignored in logic
    });
    
    // Minimum size of object to reclass based on neighbourhood
    var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
    // calculate neighbours
    var map_fc_neighbours = reduce_neighbours();
    
    // #########
    // REEF RIM
    // #########
    
    var focus_class = ee.Number(15); //RR
    
    // start the object-based neighbourhood rules
    // paint out to rasters (only paint the layers needed)
    var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
    //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
    var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
    var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
    var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
    var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
    var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
    var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
    //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
    
    // RR surrounded by ORF --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb14.gt(75)),
      value: ee.Image(14)
    });
    
    // RR surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.gt(75)),
      value: ee.Image(13)
    });
    
    // RR surrounded by IRF + ORF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.add(nb14).gt(75)),
      value: ee.Image(13)
    });
    
    // RR with decent border to TRF --> TRF (often dark, probably seagrass)
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb16.gt(40)),
      value: ee.Image(16)
    });
    
    /*// RR surrounded by OCL --> OCL
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb24.gt(75)),
      value: ee.Image(24)
    })*/
    
    /* with 2nd/3rd pass method, we don't really need this
    // RR surrounded by IRF + ORF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
              .and(nb13.add(nb14).gt(75))
              .and(nb21.add(nb22).lte(0)), // to not get rid of complex reef rims (if touching slope, it's probably RR)
      value: ee.Image(13) // could try assigning to a place-holder, then deal with at the end?
    })*/
    
    /*// small RR objects touching OCL + stuff --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(objsize.lte(max_size))
              .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
              .and(nb24.gt(1)),
      value: ee.Image(14)
    })*/
    
    // ####
    // ORF
    // ####
    
    focus_class = ee.Number(14); // ORF
    
    //classn = ee.Number(14)
    //map_fc_neighbours = reduce_neighbours()
    //var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22') //SL ex
    //var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21') //Sl sh
    //nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15') //RR
    //nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13') //IRF
    //var nb1 = ee.Image().byte().paint(map_fc_neighbours, '1').unmask(0).rename('nb1') //Land
    
    // ORF surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.gt(75)),
      value: ee.Image(13)
    });
    
    // ORF surrounded by TRF --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb16.gt(75)),
      value: ee.Image(16)
    });
    
    // ORF surrounded by RR --> RR
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb15.gt(85)),
      value: ee.Image(15)
    });
    
    // ORF touching slope and RR --> RR
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb21.gt(0).or(nb22.gt(0)))
              .and(nb15.gt(0)),
      value: ee.Image(15)
    });
    
    /*// ORF touching land --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb1.gt(10)),
      value: ee.Image(16)
    })*/
    
    // ####
    // IRF
    // ####
    
    focus_class = ee.Number(13); // IRF
    
    //classn = ee.Number(13)
    //map_fc_neighbours = reduce_neighbours()
    //nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15') //RR
    //nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14') //ORF
    
    // IRF surrounded by ORF --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb14.gt(75)),
      value: ee.Image(14)
    });
    
    // IRF surrounded by TRF --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb16.gt(75)),
      value: ee.Image(16)
    });
    
    // IRF surrounded by RR --> RR
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb15.gt(85)),
      value: ee.Image(15)
    });
    
    /*// IRF touching land --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb1.gt(10)),
      value: ee.Image(16)
    })*/
    
    // ####
    // TRF
    // ####
    
    focus_class = ee.Number(16); // TRF
    
    //classn = ee.Number(16)
    //map_fc_neighbours = reduce_neighbours()
    //nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15') //RR
    //nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14') //ORF
    //nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13') //IRF
    
    // TRF surrounded by ORF --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb14.gt(75)),
      value: ee.Image(14)
    });
    
    // TRF surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.gt(75)),
      value: ee.Image(13)
    });
    
    // TRF surrounded by IRF + ORF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.add(nb14).gt(75)),
      value: ee.Image(13)
    });
    
    /*// TRF not touching land --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb1.lt(10)),
      value: ee.Image(13)
    })*/
    
    
    // ####
    // LAGOONS
    // ####
    
    var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
    //var nb12 = ee.Image().byte().paint(map_fc_neighbours, '12').unmask(0).rename('nb12') //deep lag
    
    // DL touching SL --> SL
    /* 
    This is a stop-gap until we have better depth product - below are the rules we want,
    but too much band-aiding is required to make it work, so for the moment just err on the side
    of shallow lagoon when it's mixed.
    */
    /*clean_map = clean_map.where({
      test: clean_map.eq(12)
              .and(nb11.gt(0)),
      value: ee.Image(11)
    })*/
    
    /*// SL sourrounded by DL --> DL
    clean_map = clean_map.where({
      test: clean_map.eq(11)
              .and(nb12.gt(75)),
      value: ee.Image(12)
    })*/
    
    /*// DL sourrounded by SL --> SL
    clean_map = clean_map.where({
      test: clean_map.eq(12)
              .and(nb11.gt(75)),
      value: ee.Image(11)
    })*/
    
    /*// DL/SL surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(11).or(clean_map.eq(12))
              .and(objsize.lte(max_size))
              .and(nb13.gt(80)),
      value: ee.Image(13)
    })*/
    
    // SL surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(11)
              .and(objsize.lte(max_size))
              .and(nb13.gt(80)),
      value: ee.Image(13)
    });
    
    /*// DL/SL touching OCL --> OCL
    clean_map = clean_map.where({
      test: clean_map.eq(11).or(clean_map.eq(12))
              .and(nb24.gt(0)),
      value: ee.Image(24)
    })*/
    
    
    /*// ####
    // Turbid
    // ####
    
    focus_class = ee.Number(3) // turbid
    
    // Turb surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.gt(75)),
      value: ee.Image(13)
    })
    
    // Turb surrounded by ORF --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb14.gt(75)),
      value: ee.Image(14)
    })
    
    // Turb surrounded by TRF --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb16.gt(75)),
      value: ee.Image(16)
    })*/
  
  } else if (vars.geomorphic && vars.fast_clean) {
    print("Executing the fast version OBIA");
    
    /* fast version of the geo clean up
      - blanket version assigns the underlying most common in neighbourhood
      - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
    */
    
    
    //############
    //# blanket version
    //############
    // make a very smooth map to capture the broader neighbourhood
    var smooth_map = clean_map
                        .focal_mode({
                          radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    
    // first make a make size threshold, so we're not vectorising huge objects when we don't have t
    // - the unmask(99) captures small no data values/ data gaps
    var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
    Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
    
    
    // replace small objects with smooth underneath
    var clean_map = clean_map.unmask(0).where({
      test: segment_id.gt(0), 
      value: smooth_map
    }).selfMask();
    //############
    //############
    
    
    /*    
    //############
    //# mode OBIA version
    //############
    
    // #########
    // THE FASTER PLAN - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
    //                 - BUT, just assign the mode of the neighbours, so save resouces even further??
    // #########
    
    // FUNCTION that maps over feature colleciton and assigns neighbour percentages
    var set_neighbour_mode = function(f) {
      // make the 1px buffer
      var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
      // reduce the classes in the buffer zone
      var diff_mode = ee.Number(ee.Dictionary(
        clean_map.unmask(ee.Image(0)).reduceRegion({
          reducer: ee.Reducer.mode(),
          geometry: diff.geometry(),
          scale: vars.image_data_scale,
          maxPixels: 1e11
        })).get('classification'))
      
      return(f.set('mode',diff_mode))
    }
    
    // FUNCTION to reduce the map to vectors and map the neighbour properties function
    var reduce_neighbours_mode = function() {
      // reduce map to vectors
      var map_fc = clean_map.unmask(0)
            .updateMask(classn.gt(0)) // only vectorise class/es of interest
            .reduceToVectors({
              scale: vars.image_data_scale, 
              eightConnected: false,
              bestEffort: true, 
              maxPixels: 1e13,
              tileScale: 1,
              geometry: reef_boundary
            })
      // map the function, calculate neighbour properties
      return(map_fc.map(set_neighbour_mode))
    }
    
    // first make a make size threshold, so we're not vecortising huge objects when we don't have to
    var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
    Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
    
    // This is where we select the single or group of classes to vectorise for cleaning up
    var classn = segment_id.where({
      test: clean_map.neq(16) //TRF
              .and(clean_map.neq(15)) //RR
              .and(clean_map.neq(14)) //ORF
              .and(clean_map.neq(13)) //IRF
              //.and(clean_map.neq(12)) // deep L
              .and(clean_map.neq(11)) // shallow L 
              .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
      value: ee.Image(0) // 99 ensures it's ignored in logic
    })
    
    // calculate neighbours
    var map_fc_neighbours = reduce_neighbours_mode()
    
    //print(map_fc_neighbours.limit(10))
    
    var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
    //Map.addLayer(mode_map, display_pal, "mode map", false)
    
    // replace small objects with mode underneath
    var clean_map = clean_map.unmask(0).where({
      test: segment_id.gt(0), 
      value: mode_map
    }).selfMask()
    
    //############
    //############
    */
    
  } else {
    
    if (vars.cleanup_stage == 1) {
      // BENTHIC CLEAN-UP RULES
      
      // reclaim shallow no data to surrounding class
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      var clean_map = clean_map.unmask(0).where({
        test: geo_map.gt(2).and(clean_map.eq(0)), 
        value: smooth_map
      }).selfMask();
      
      // cut benthic off to < 10 - 15 m
      clean_map = clean_map.where({
        test: depth.gt(vars.benthic_depth_cutoff),
        value: ee.Image(0)
      });
      
      // Deep (or land or missing) in geo == masked from benthic
      clean_map = clean_map.where({
        test: geo_map.unmask(0).lte(2),
        value: ee.Image(0)
      });
      
      /*// Deep lagoon in geo == masked from benthic
      clean_map = clean_map.where({
        test: geo_map.eq(12),
        value: ee.Image(0)
      })*/
      
      
      /*// turbid in geo == turbid (temporal - class num 2)
      // ############## ---> need to decide here whether to push geo turbid through regardless of benthic class
      clean_map = clean_map.where({
        test: geo_map.eq(3),
        value: ee.Image(2)
      })*/
      
      /*
      // Ignore in benthic + ORF in geo == rock
      clean_map = clean_map.where({
        test: clean_map.eq(0)
                       .and(geo_map.eq(14)),
        value: ee.Image(13)
      })
      
      // Ignore in benthic + IRF in geo == sand
      clean_map = clean_map.where({
        test: clean_map.eq(0)
                       .and(geo_map.eq(13)),
        value: ee.Image(11)
      })
      
      // Ignore in benthic + TRF in geo == sand
      clean_map = clean_map.where({
        test: clean_map.eq(0)
                       .and(geo_map.eq(16)),
        value: ee.Image(11)
      })
      
      // Ignore in benthic + RR in geo == rock
      */
      
      /*// seagrass in benthic + ORF/RR/slope in geo == coral/algae
      clean_map = clean_map.where({
        test: clean_map.eq(14)
                       .and(geo_map.eq(14).or(geo_map.eq(15)).or(geo_map.eq(21)).or(geo_map.eq(22))),
        value: ee.Image(15)
      })*/
      
      // ####--> CR: "Seagrass neighbouring deep water or no data not shallow a rock or coral algae class"
      
      /*// rock in benthic + TRF in geo == sand
      clean_map = clean_map.where({
        test: clean_map.eq(13)
                       .and(geo_map.eq(16)),
        value: ee.Image(11)
      })*/
    }
  }
}

// final smooth
if (!vars.manual_clean) {
  if (vars.smooth_output) {
    // smooth the output lightly to make nice edges, and get rid of noise
    var noise_smooth = clean_map.unmask(99) // unmasking to a value allows us to include masked areas in the smooth, then re-mask after
                          .focal_mode({
                            radius: 2, // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
    clean_map = clean_map.updateMask(noise_smooth.neq(99)).updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too;
  } else {
    // just clip to the classified extent and move on
    if (vars.geomorphic) {
      clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
    } else {
      clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
    }
  }
}

// 4. Export data

var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;

if (vars.do_export) {
  print("For export, the image data scale must be set to:", vars.image_data_scale);
  
  if (vars.export_small_area) {
    var export_convhull = export_small;
  } else {
    //var export_convhull = clean_map.gt(2).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extent, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})
    var export_convhull = reef_boundary;
  }
  Map.addLayer(export_convhull, {}, "Export footprint", false);
  
  Export.image.toAsset({
    image: clean_map.set(vars),
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: export_convhull,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  /*Export.image.toCloudStorage({
    image: clean_map,//.set(vars),
    description: 'swp_geo_clean',
    bucket: 'mitchest_unet_bucket',
    fileNamePrefix: 'swp_geo_clean',
    region: export_convhull,
    scale: 25,
    crs: 'EPSG:4326',
    maxPixels: 1e13
  })*/
  
} else {
  if (!vars.manual_clean) {
    if (vars.show_eg_area) {
      if (vars.reproject_display) {
        Map.addLayer(clean_map.clip(eg_area).reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, false);
      } else {
        Map.addLayer(clean_map.clip(eg_area), display_pal, output_name, false);
      }
    } else {
      if (vars.reproject_display) {
        Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
      } else {
        Map.addLayer(clean_map, display_pal, output_name, false);
      }
    }
  }
}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
