/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var pixels = ee.Image("projects/coral_atlas/west_indian_ocean/in_out/wio_pixels"),
    extra_masking = /* color: #d63000 */ee.Geometry.Polygon(
        [[[46.16883746799445, -9.314531487909539],
          [46.16265765842414, -9.456796659566903],
          [46.17982379611945, -9.456796659566903],
          [46.19424335178351, -9.417510216611321],
          [46.19698993381476, -9.361959694124929],
          [46.20248309787726, -9.317919430876863]]]),
    wio_lt_sr = ee.Image("projects/coral_atlas/workflow/mapping/west_indian_ocean/west_indian_ocean_islands_low_tide_normalized_sr_jan2018_jan2020_v2_shift_mosaic/20200131T210330Z/west_indian_ocean_islands_low_tide_normalized_sr_jan2018_jan2020_v2_shift_mosaic"),
    geo = ee.Image("projects/coral_atlas/west_indian_ocean/in_out/wio_geo-clean_manual_July10"),
    benthic = ee.Image("projects/coral_atlas/west_indian_ocean/in_out/wio_benthic-clean_July10"),
    not_reef = 
    /* color: #01ff14 */
    /* shown: false */
    /* locked: true */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[55.2248077855843, -20.980851493012523],
                  [55.33741764886555, -21.08595829180467],
                  [55.4884796605843, -21.2191575703884],
                  [55.5763702855843, -21.37014202611179],
                  [55.5763702855843, -21.549074333518252],
                  [55.95265202386555, -21.487750868105195],
                  [56.05702214105305, -21.23195887279921],
                  [55.8839874730843, -20.93981411727935],
                  [55.6917267308968, -20.672797751973356],
                  [55.42530827386555, -20.62910598668815],
                  [55.1479034887093, -20.793527159750223],
                  [55.1204376683968, -20.867971649301655]]]),
            {
              "system:index": "0"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
/* export maps for WIO (This is to send another go to Eldang 16/07/2020) 
Script to export maps to GCS, ready for smoothing
- note the eventual smoothed output still needs to be QC'd by UQ, 
  to ensure smoothing has not done naything untoward
 
TODO: define output params up front
  - e.g. description, export path, GCS bucket etc.
 
TODO: link this to the reef_params module
  - in that case you'd just choose the region, and the exrpot would all happen automatically
  - let's just see if this process takes off, then i'll invest time to link it up with automation
  
TODO: deal with change in dateline (i.e. WGS-84 projection wrapping)
  - Fiji/south pacific might be the only region where this happens? worth it?
  **A: resonable solution below**
*/


/*
Script to export maps to GCS, ready for smoothing
- note the eventual smoothed output still needs to be QC'd by UQ, 
  to ensure smoothing has not done naything untoward
 
TODO: define output params up front
  - e.g. description, export path, GCS bucket etc.
 
TODO: link this to the reef_params module
  - in that case you'd just choose the region, and the exrpot would all happen automatically
  - let's just see if this process takes off, then i'll invest time to link it up with automation
  
TODO: deal with change in dateline (i.e. WGS-84 projection wrapping)
  - Fiji/south pacific might be the only region where this happens? worth it?
  **A: resonable solution below**
*/
Map.setCenter(53.62766108666353, -11.173976110741622, 6)
// so we can visualise maps before export
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals')

// will need to import depth mosaic from pixels now
var depth = pixels.select('depth')//.multiply(100).uint16()

// addiitonal masking 


var FINAL_MASK_TO_GEOBENTHIC= not_reef.merge(extra_masking);
var add_zone = function(f) {return(f.set('zone', 1))}
var exclude_fc = FINAL_MASK_TO_GEOBENTHIC.map(add_zone)


var exclude_mask = ee.Image().byte().paint(exclude_fc, 'zone').uint8()
//Map.addLayer(exclude_mask, {}, "image extra mask zone", false)

geo = geo.where(exclude_mask.eq(1), ee.Image(0))
benthic = benthic.where(geo.eq(0), ee.Image(0)) // may not always need this (only if extra masking is applied here)

// finalise layers (include 'mapped area' as zeros)
geo = geo.where(geo.lte(2), 0)
//print (geo)
benthic = benthic.unmask(0).updateMask(geo.gte(0))

// make reef/non-reef layer 
var reef_top = geo.eq([11,13,14,15,16,25,26]).reduce(ee.Reducer.sum())
print (reef_top)
var reef_all = geo.eq([11,12,13,14,15,16,21,22,23,24,25,26]).reduce(ee.Reducer.sum())
var reef_layer = reef_top.addBands(reef_all).reduce(ee.Reducer.sum())
print (reef_layer)

// check before export

//Map.addLayer(reef_layer, {min:0, max:2}, "reef layerNoSelf", false)
//Map.addLayer(reef_layer.selfMask(), {min:0, max:2}, "reef layer", false)
Map.addLayer(wio_lt_sr, {"opacity":1,"bands":["b1","b2","b3"],"min":1,"max":1514,"gamma":1}, 'WIO_lt_sr', false)
Map.addLayer(geo, map_palettes.geo, "geomorphic map", false)
Map.addLayer(benthic, map_palettes.benthic, "benthic map", false)
//Map.addLayer(Final_mask, {}, 'Final_mask', false)
//Map.addLayer(depth, {min: -3, max: 1200, palette:['#d0d1e6','#a6bddb','#74a9cf','#3690c0','#0570b0','#045a8d','#023858']}, "depth layer", false)

//Map.addLayer(exclude_fc, {}, "vector mask zone", false)

// combine into single stack
var export_stack = depth.updateMask(geo.gte(0)).rename('depth')
                    .addBands(reef_layer.rename('reef'))
                    .addBands(geo.rename('geomorphic'))
                    .addBands(benthic.rename('benthic'))
                    .toInt16()

Map.addLayer(export_stack, {}, "export raster stack", false)

//removing the fills in the masks to visually detect gaps between them

//Map.addLayer(ee.Image().byte().paint({featureCollection:not_reef, color:1, width: 1}), {}, 'not_reefOutline', false)
//Map.addLayer(ee.Image().byte().paint({featureCollection:Rivermouth, color: 1, width: 1}), {}, 'RivermouthOutline', false)
//Map.addLayer(ee.Image().byte().paint({featureCollection: slithers, color:1, width:1}), {}, 'SlithersOutline', false)


/*// add export region
var export_geom_east = ee.Geometry.Rectangle(-179.99998,-21.4794,-168.13175,-8.4)
var export_geom_west = ee.Geometry.Rectangle(162.7051,-23.052,179.99998,-7.8)
Map.addLayer(export_geom_west, {}, "export footprint west", true)
Map.addLayer(export_geom_east, {}, "export footprint east", true)

// add raster flag for either side of dateline
var latlong = ee.Image.pixelLonLat().select('longitude').clipToCollection(ee.FeatureCollection([export_geom_west,export_geom_east]))
//Map.addLayer(latlong)

var export_stack_east = export_stack.updateMask(latlong.lte(0))
var export_stack_west = export_stack.updateMask(latlong.gt(0))

Map.addLayer(export_stack_east, {}, "export raster stack east", false)
Map.addLayer(export_stack_west, {}, "export raster stack west", false)*/

// make east/west export geometries
/*var export_geom_east = latlong.lt(0).and(latlong.gt(-179.99998)).selfMask()
                            .reduceToVectors({
                              reducer: ee.Reducer.countEvery(),
                              geometry: export_geom,
                              scale: 5,
                              maxPixels: 1e13,
                              crs: 'EPSG:4326'
                            })

var export_geom_west = latlong.gt(0).and(latlong.lt(179.99998)).selfMask()
                            .reduceToVectors({
                              reducer: ee.Reducer.countEvery(),
                              geometry: export_geom,
                              scale: 5,
                              maxPixels: 1e13,
                              crs: 'EPSG:4326'
                            })*/

/*
// run the export
Export.image.toCloudStorage({
  image: export_stack,
  description: 'ea_stack',
  bucket: 'coral-atlas-data-pipeline',
  fileNamePrefix: 'coral-gee-export-bucket/ea_updated20200618/ea_stack',
  region: reef_boundary, 
  scale: 5,
  crs: 'EPSG:4326',
  maxPixels: 1e13, 
  skipEmptyTiles: true
});



Export.table.toCloudStorage({
  collection: slithers, 
  bucket: 'coral-atlas-data-pipeline',
  fileNamePrefix: 'coral-gee-export-bucket/ea_updated20200618/Slither_Masks',
  fileFormat: 'SHP'
});




Export.image.toCloudStorage({
  image: export_stack_east,
  description: 'swp_stack_east',
  bucket: 'coral-atlas-data-pipeline',
  fileNamePrefix: 'coral-gee-export-bucket/swp/final/swp_stack_east',
  region: export_geom_east, 
  scale: 5,
  crs: 'EPSG:4326',
  maxPixels: 1e13, 
  skipEmptyTiles: true
})

// run the export
Export.image.toCloudStorage({
  image: export_stack_west,
  description: 'swp_stack_west',
  bucket: 'coral-atlas-data-pipeline',
  fileNamePrefix: 'coral-gee-export-bucket/swp/final/swp_stack_west',
  region: export_geom_west, 
  scale: 5,
  crs: 'EPSG:4326',
  maxPixels: 1e13, 
  skipEmptyTiles: true
})*/


// export the convex hull boundary

// export region convex hull, or manual
/*var export_geom = geo.gte(0).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: geo.geometry().bounds(100), crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})

Export.table.toCloudStorage({
  collection: ee.FeatureCollection(export_geom),
  description: 'swp_convex_hull',
  bucket: 'coral-atlas-data-pipeline',
  fileNamePrefix: 'coral-gee-export-bucket/swp/new_geom/swp_convex_hull',
  fileFormat: "SHP"
})*/