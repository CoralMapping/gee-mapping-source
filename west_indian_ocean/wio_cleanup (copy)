/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    land_dist = ee.Image("projects/coral_atlas/global_datasets/mod44w6_global_distToLand"),
    json_extent = ee.FeatureCollection("projects/coral_atlas/wio_extent"),
    region_extent = 
    /* color: #00ffff */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[54.701770985703206, -2.9751249685105154],
          [52.548450673203206, -4.772691629173448],
          [52.196888173203206, -5.910289150084192],
          [51.757435048203206, -8.091037974566733],
          [48.285755360703206, -8.65623438835204],
          [44.814075673203206, -9.350691639103687],
          [46.440052235703206, -10.864858654100164],
          [45.736927235703206, -11.72673086956205],
          [43.583606923203206, -10.605801768506067],
          [41.781849110703206, -10.605801768506067],
          [41.737903798203206, -12.543027437564627],
          [44.638294423203206, -13.954584744088688],
          [46.352161610703206, -13.783928424683062],
          [48.857044423203206, -10.99430318398806],
          [49.955677235703206, -10.908013101551091],
          [52.680286610703206, -10.95116128603305],
          [53.339466298203206, -8.438948520327026],
          [54.613880360703206, -6.827435160865552],
          [55.624622548203206, -6.914694536706059],
          [56.108020985703206, -11.511507059571993],
          [58.788685048203206, -15.865441173681486],
          [56.942981923203206, -19.631456469862268],
          [54.438099110703206, -20.539442163648662],
          [54.130481923203206, -21.482966628121225],
          [54.965442860703206, -22.420415520660942],
          [55.844349110703206, -22.095048738332846],
          [57.074817860703206, -21.196440284100703],
          [58.481067860703206, -20.827232047085705],
          [59.184192860703206, -17.883867297837703],
          [63.754505360703206, -20.909357190677294],
          [64.9849741107032, -20.00354040738218],
          [63.666614735703206, -19.009403584868657],
          [61.776966298203206, -19.175515382142862],
          [60.370716298203206, -18.009288625640345],
          [60.458606923203206, -15.187980739313776],
          [58.964466298203206, -15.187980739313776],
          [56.811145985703206, -11.55456509703201],
          [57.514270985703206, -10.216806458907836],
          [56.327747548203206, -9.17720313716965],
          [56.327747548203206, -7.786369242288465],
          [57.250599110703206, -7.089164748909251],
          [56.108020985703206, -5.866575713917645],
          [57.602161610703206, -5.647957630653708],
          [57.206653798203206, -4.422260866394937],
          [56.547474110703206, -3.4138941523262103]]]),
    not_reef = 
    /* color: #01ff14 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[55.2248077855843, -20.980851493012523],
          [55.33741764886555, -21.08595829180467],
          [55.4884796605843, -21.2191575703884],
          [55.5763702855843, -21.37014202611179],
          [55.5763702855843, -21.549074333518252],
          [55.95265202386555, -21.487750868105195],
          [56.05702214105305, -21.23195887279921],
          [55.8839874730843, -20.93981411727935],
          [55.6917267308968, -20.672797751973356],
          [55.42530827386555, -20.62910598668815],
          [55.1479034887093, -20.793527159750223],
          [55.1204376683968, -20.867971649301655]]]),
    reef_boundary = 
    /* color: #d6b113 */
    /* shown: false */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[40.859926354273455, -2.4006076916703782],
          [40.859926354273455, -23.630158061970967],
          [65.42535604177345, -23.630158061970967],
          [65.42535604177345, -2.4006076916703782]]], null, false),
    waves = ee.Image("projects/coral_atlas/west_indian_ocean/in_out/wio_waves"),
    Deep = 
    /* color: #0c16c2 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.22752818329987,
                -4.408108871795463
              ],
              [
                55.24091777070221,
                -4.414227587181845
              ],
              [
                55.24602469666657,
                -4.4121737582671585
              ],
              [
                55.238085357982484,
                -4.401818951026618
              ],
              [
                55.22963103516754,
                -4.401690584742926
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.10923834644881,
                -4.2909914005764485
              ],
              [
                55.04881354176131,
                -4.30331627503444
              ],
              [
                55.074219425550375,
                -4.350559774055848
              ],
              [
                55.22734137379256,
                -4.338235667410778
              ],
              [
                55.28364630543319,
                -4.403277280043641
              ],
              [
                55.2019354900035,
                -4.459413893211122
              ],
              [
                55.22184820973006,
                -4.447091587584681
              ],
              [
                55.241760929456625,
                -4.451883619850726
              ],
              [
                55.274719913831625,
                -4.492956898680837
              ],
              [
                55.24794073902694,
                -4.513492671837868
              ],
              [
                55.23214789234725,
                -4.532658869311558
              ],
              [
                55.21360846363631,
                -4.5107546022620015
              ],
              [
                55.17652960621444,
                -4.495695035243141
              ],
              [
                55.11679144703475,
                -4.490903289511004
              ],
              [
                54.978089054456625,
                -4.531974370997968
              ],
              [
                54.91697760426131,
                -4.6524360040557715
              ],
              [
                54.980714183904006,
                -4.867446367255372
              ],
              [
                55.07272468195088,
                -4.967327610463236
              ],
              [
                55.26017890558369,
                -4.968011676737542
              ],
              [
                55.273254757092175,
                -4.845957072348354
              ],
              [
                55.30716420883822,
                -4.645328294065157
              ],
              [
                55.34836293930697,
                -4.535817464465671
              ],
              [
                55.39436818833041,
                -4.29072742675142
              ],
              [
                55.19455434555697,
                -4.305791140344339
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.79562920448245,
                -4.47278322018755
              ],
              [
                55.7818962943262,
                -4.549449268891032
              ],
              [
                55.83614128944339,
                -4.630213595310534
              ],
              [
                55.8917595755762,
                -4.591885902082193
              ],
              [
                55.93982476112308,
                -4.46799132425887
              ],
              [
                55.82790154334964,
                -4.441293046025351
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                56.51728440642244,
                -5.164048643290083
              ],
              [
                56.875713361500566,
                -5.140797029815418
              ],
              [
                56.82764817595369,
                -4.774132471344284
              ],
              [
                56.521404279469316,
                -4.750867128151854
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                59.55351282951431,
                -16.533729913227678
              ],
              [
                59.53497340080337,
                -16.611388274644575
              ],
              [
                59.56106593010025,
                -16.675202579352693
              ],
              [
                59.593338268967436,
                -16.656784137184257
              ],
              [
                59.5967714965065,
                -16.635732319737603
              ],
              [
                59.58647181388931,
                -16.59493784820497
              ],
              [
                59.60295130607681,
                -16.533729913227678
              ],
              [
                59.5747988402565,
                -16.4955473878938
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.82117717051568,
                -4.308927445808635
              ],
              [
                55.810190836200114,
                -4.319197927056913
              ],
              [
                55.82289378428521,
                -4.319882641422618
              ],
              [
                55.83267848277154,
                -4.319283533248809
              ],
              [
                55.82993190074029,
                -4.306873329048051
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.7622374049447,
                -4.5610817119859774
              ],
              [
                55.7576454631112,
                -4.567541377858183
              ],
              [
                55.762602185370724,
                -4.570129505810936
              ],
              [
                55.76743016159753,
                -4.561680623849451
              ],
              [
                55.7652629367135,
                -4.5610817119859774
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.71091965100533,
                -3.7313159072799964
              ],
              [
                55.7095463599897,
                -3.8080538077779056
              ],
              [
                55.791247143559765,
                -3.9298266636375776
              ],
              [
                55.891507419560014,
                -3.993361063616616
              ],
              [
                55.8908207740522,
                -3.751528778021327
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.12287161608795,
                -3.724099564361653
              ],
              [
                55.12364409228424,
                -3.7459399019339044
              ],
              [
                55.19805929919342,
                -3.741743173392664
              ],
              [
                55.19402525683502,
                -3.731122791000546
              ],
              [
                55.18072150012115,
                -3.705085182061557
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.320491846662975,
                -3.747443628452631
              ],
              [
                55.31980520115516,
                -3.8580927030910788
              ],
              [
                55.404605921370006,
                -3.843363153383337
              ],
              [
                55.41078573094032,
                -3.746073272679222
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                53.26492169506689,
                -4.873348693067708
              ],
              [
                53.29401773333353,
                -4.967073279212991
              ],
              [
                53.38963264885736,
                -4.9669022625227965
              ],
              [
                53.40113390568452,
                -4.941762443327266
              ],
              [
                53.35332481042124,
                -4.9229506204654285
              ],
              [
                53.31581861812553,
                -4.891479944724156
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                53.124339277890286,
                -5.25163236231433
              ],
              [
                53.218753035214505,
                -5.4560435993407665
              ],
              [
                53.36535185113247,
                -5.181200792805181
              ],
              [
                53.25411527886685,
                -5.109393539012181
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                53.33688933180449,
                -5.399080786231485
              ],
              [
                53.33997923658965,
                -5.404976800540399
              ],
              [
                53.35293967054961,
                -5.412923511595184
              ],
              [
                53.36366850660918,
                -5.418648496781997
              ],
              [
                53.36461264418242,
                -5.421553692394682
              ],
              [
                53.368818347917774,
                -5.423177177971778
              ],
              [
                53.37645727919219,
                -5.411641791065571
              ],
              [
                53.36263853834746,
                -5.394466474160993
              ],
              [
                53.35087973402617,
                -5.383357801229904
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                53.44910670219687,
                -5.4547502049421155
              ],
              [
                53.341646680224216,
                -5.486533789670236
              ],
              [
                53.422327527392184,
                -5.59895883502795
              ],
              [
                53.51708460747031,
                -5.521391257645976
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                50.84093216338972,
                -10.01183757588908
              ],
              [
                50.81106308379988,
                -10.044293031438755
              ],
              [
                50.816899570616286,
                -10.111898094436233
              ],
              [
                50.86496475616316,
                -10.081139548789313
              ],
              [
                50.86530807891707,
                -10.027727632193288
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    notSRS = 
    /* color: #e7ff78 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.76433165988321,
                -4.589617246095629
              ],
              [
                55.76585515460367,
                -4.592461959582767
              ],
              [
                55.76933129748697,
                -4.591841684676566
              ],
              [
                55.768987974733065,
                -4.5874997452364195
              ],
              [
                55.76493247470255,
                -4.587927523694005
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                55.7651041360795,
                -4.57853440232471
              ],
              [
                55.76184256991739,
                -4.5870044743944804
              ],
              [
                55.76731427630777,
                -4.586041971260488
              ],
              [
                55.76885922870035,
                -4.579111910425983
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                53.3686055637301,
                -4.876205440500802
              ],
              [
                53.35641760596643,
                -4.895276138308276
              ],
              [
                53.35993666419397,
                -4.906820915542953
              ],
              [
                53.37924856910119,
                -4.913576655552374
              ],
              [
                53.3865441776217,
                -4.890829207974152
              ],
              [
                53.384913394540646,
                -4.8732977528464385
              ],
              [
                53.377703616708615,
                -4.8717583837001905
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                50.716941578767546,
                -9.332392778983523
              ],
              [
                50.73865674295212,
                -9.32621001471362
              ],
              [
                50.72037480630661,
                -9.318587277819127
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                50.72990201272751,
                -9.34738340960935
              ],
              [
                50.74475072183395,
                -9.33154583145327
              ],
              [
                50.71702740945602,
                -9.334679527037853
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                50.94530595782609,
                -9.247495590857218
              ],
              [
                50.88350786212297,
                -9.45684875316213
              ],
              [
                50.96933855059953,
                -9.599055088522832
              ],
              [
                51.02152360919328,
                -9.458203377969488
              ],
              [
                51.03250993731828,
                -9.233263152856834
              ],
              [
                51.025643482240156,
                -9.195984998379663
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                45.06728062136878,
                -12.589911681303422
              ],
              [
                45.08684999278793,
                -12.584550550337896
              ],
              [
                45.1071060089134,
                -12.593262330899067
              ],
              [
                45.13045192577543,
                -12.610685004215226
              ],
              [
                45.159634321734885,
                -12.625426340624431
              ],
              [
                45.24409160806581,
                -12.697110710464829
              ],
              [
                45.291420818820164,
                -12.734188731173987
              ],
              [
                45.297257297268544,
                -12.777719086248583
              ],
              [
                45.29519736293017,
                -12.813542291534581
              ],
              [
                45.290047528210344,
                -12.830615111659153
              ],
              [
                45.28867423860238,
                -12.859579545635544
              ],
              [
                45.285241361888275,
                -12.872465504432684
              ],
              [
                45.27219476810977,
                -12.880665467251982
              ],
              [
                45.245758951102694,
                -12.905765441046194
              ],
              [
                45.22671338344669,
                -12.938876356289793
              ],
              [
                45.22259351575541,
                -12.961963043346119
              ],
              [
                45.226026738443274,
                -12.992741961744391
              ],
              [
                45.24010295221053,
                -13.012478608956776
              ],
              [
                45.22362348213043,
                -13.029203351162431
              ],
              [
                45.1631987590357,
                -13.06432163114266
              ],
              [
                45.13023981933042,
                -13.072682390800061
              ],
              [
                45.07187503016284,
                -13.058970596721592
              ],
              [
                45.01763010792066,
                -13.01950313881393
              ],
              [
                44.982611233634344,
                -12.98370941464536
              ],
              [
                44.9690053383704,
                -12.930250738091718
              ],
              [
                44.96179556954632,
                -12.898460125325645
              ],
              [
                44.95046593341197,
                -12.880053186737987
              ],
              [
                44.93982294231722,
                -12.883065324085255
              ],
              [
                44.95424248024044,
                -12.953672809953055
              ],
              [
                44.97072195095727,
                -12.98712909080442
              ],
              [
                45.04951289165046,
                -13.073302840609827
              ],
              [
                45.2173974906912,
                -13.077650312387346
              ],
              [
                45.27541895840861,
                -13.001725768752378
              ],
              [
                45.31009451198681,
                -12.871897921110548
              ],
              [
                45.322454117178204,
                -12.73128683072382
              ],
              [
                45.1845683136181,
                -12.618659975143174
              ],
              [
                45.108007439356925,
                -12.57845327054445
              ],
              [
                45.070585307873365,
                -12.572421721538863
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                44.95316513169569,
                -12.878731935715377
              ],
              [
                44.962778168805066,
                -12.900485589106864
              ],
              [
                44.96689804185194,
                -12.9028281774735
              ],
              [
                44.97136123765272,
                -12.921233465171797
              ],
              [
                44.97273452866835,
                -12.929933674604388
              ],
              [
                44.97616775620741,
                -12.954024978833708
              ],
              [
                44.983034211285535,
                -12.972091928263628
              ],
              [
                44.98818405259413,
                -12.982128555482664
              ],
              [
                44.99436386216444,
                -12.995175564894053
              ],
              [
                45.00809677232069,
                -13.010897972885955
              ],
              [
                45.03178604234022,
                -13.02661938403023
              ],
              [
                45.050668793805066,
                -13.040332991557023
              ],
              [
                45.08225448716444,
                -13.06040031507733
              ],
              [
                45.12825973618788,
                -13.06842678812995
              ],
              [
                45.16739853013319,
                -13.05872810035384
              ],
              [
                45.20310409653944,
                -13.037991697723662
              ],
              [
                45.23331649888319,
                -13.013908533072046
              ],
              [
                45.21992691148085,
                -12.98915395339735
              ],
              [
                45.217523652203504,
                -12.97175736704617
              ],
              [
                45.219727574547605,
                -12.94685826350915
              ],
              [
                45.244446812828855,
                -12.909715464613893
              ],
              [
                45.2578364002312,
                -12.87959562889104
              ],
              [
                45.277405797203855,
                -12.86286082172961
              ],
              [
                45.289422093590574,
                -12.830392113838581
              ],
              [
                45.27946573372729,
                -12.795240850854368
              ],
              [
                45.28848524723516,
                -12.744346538351492
              ],
              [
                45.27749891911016,
                -12.726932976463457
              ],
              [
                45.22225585791119,
                -12.684250476206692
              ],
              [
                45.17247405859479,
                -12.638024020779621
              ],
              [
                45.15462127539166,
                -12.623283391021879
              ],
              [
                45.12063232275494,
                -12.605191457383034
              ],
              [
                45.10432681076973,
                -12.593652420362138
              ],
              [
                45.0864740275666,
                -12.586616006620169
              ],
              [
                45.058664884500196,
                -12.591977101263401
              ],
              [
                45.10467013352363,
                -12.628161557017421
              ],
              [
                45.1957470675417,
                -12.688788696558564
              ],
              [
                45.25342529019795,
                -12.741033648627104
              ],
              [
                45.26647155484639,
                -12.756957276370862
              ],
              [
                45.2451855441042,
                -12.79110946653539
              ],
              [
                45.243125607580765,
                -12.860738816322495
              ],
              [
                45.219436337561234,
                -12.917854823362454
              ],
              [
                45.2063900729128,
                -12.949308418290084
              ],
              [
                45.20913665494405,
                -12.998278764320993
              ],
              [
                45.1957470675417,
                -13.024704889507575
              ],
              [
                45.136008908362015,
                -13.047449170184628
              ],
              [
                45.07695739469014,
                -13.034070434703079
              ],
              [
                45.0144726534792,
                -12.990250016884232
              ],
              [
                44.999709775061234,
                -12.951775336613117
              ],
              [
                44.98014037808858,
                -12.894888841407193
              ],
              [
                44.96263091763936,
                -12.87012244133831
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    wio_geo = ee.Image("projects/coral_atlas/west_indian_ocean/in_out/wio_geo"),
    depth_pal = {"opacity":1,"bands":["depth"],"max":5,"palette":["e4e1ff","7f89ff","3a52ff","0007ff","000258"]},
    wio_benthic = ee.Image("projects/coral_atlas/west_indian_ocean/in_out/wio_benthic");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - North Caribbean and Bahamas
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Eva Kovacs (kovacsevam2@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals')
var param_module = require('users/mitchest/global_reefs:Modules/reef_params')

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.wio          //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: ee.Number(sensor_params.pixel),
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land: 2000, //distance to land in METERS to disallow reef crest, and convert to terrestrial reef flat
  
  //############
  /* This is a stop-gap until we figure out how to chain together vectorisations in GEE
  - GEOMORPHIC: for large regions, the first pass does the small object filter, then the second pass does the OBIA clean
  -           : *in an ideal world* for smaller regions, can do both at once, but not handling that at present
              : 1st stage  - obia_2nd_pass + obia_clean set to false (no changes needed ML thinks); 
              : 2nd stage -  obia_2nd_pass + obia_clean set to true (object-based clean-up; review any OBIA rules); 
              : 3rd stage - manual_clean set to true (chop out all non-region-specific code, review final masks and any manual edits)
  - BENTHIC : can do both at once
            : One stage only - should have obia_2nd_pass and obia_clean set to true (so it uses the most recent geo map) */
  
  // CHANGE FOR EACH PASS
  obia_2nd_pass: true,
  obia_clean: true, // run object-based relationship rules + small object clean up
  fast_clean: true, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  smooth_output: false, // run smoother over final output (includes noise removal) (should be false for second pass)
  //############
  
  //CHANGE TO TRUE FOR MANUAL CLEAN
  // apply any manual touch ups
  manual_clean: false,
  
  // results/layers to show
  export_small_area: false,
  show_eg_area: false, // contrain the map add toe the corresponding example_area polygon geomtery (you can change that)
                              // - you can either set this, or have it false and just navigate to the area you want to see (keeping in mind ALL tiles in the zoom area will calcualte)
  reproject_display: true,
  //reproject_res: ee.Number(sensor_params.pixel).pow(2),
  
  
  //CHANGE DEPENDING ON WHETHER 1ST PASS, 2ND PASSS, MANUAL OR BENTHIC
  //CHANGE NAME OF INPUT LAYER AT circa LINE 140 DEPENDING ON PASS (// DEFINE THE MANUALLY EDITED MAP)
    // export options 
  do_export: true, // export the results?
  //geomorph_output_name: region_params.sname + '_geo-clean_manual2',
  benthic_output_name: region_params.sname + '_benthic-clean_July10',
  asset_output: region_params.asset // asset path
}

/*
############################
MANUAL ADDITION
############################
*/


//REEF BOUNDARY
//This can be hand drawn or imported from elsewhere, or could just be a big box

//reef_boundary = ee.FeatureCollection([ee.Feature(fl_cari_extent),ee.Feature(bahamas_extent)]).geometry()
Map.addLayer(reef_boundary, {}, "Manual reef outline", false)
Map.addLayer(region_extent, {}, "region_extent", false)





/* TRIAL #######
    Looks like with the sentinel/ls8 depth we can try to retain full resolution,
    because theres more (good) data either side of the depth threshold/marginal areas
  ##############
  
  Used to be --> output resolution (bigger for geomorphic) - relates back to object size and the min mapping unit defined in classification stage
*/
//if (vars.geomorphic) vars.image_data_scale = ee.Number(sensor_params.pixel)//.pow(2)

// 2. Data loads & vis

// load input data
if (vars.obia_2nd_pass) {
  // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
  // - could change the path in reef_params to a list, check if it length is > 1, then take last element??
  
  // OR run a separate operation that joins the east/west clean1 maps via EPSG:3832, load via one ee.Image(), then save here as EPSG:4326
  //var geo_map = geo1.unmask(0, false).add(geo2.unmask(0,false)).selfMask().clip(swp_extent)
  
  var geo_map = ee.Image(region_params.geo_map_clean)
} else {
  //print(ee.List(region_params.geo_map).length())
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map = ee.Image(region_params.geo_map[0]).unmask(0, false)
             .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
             .selfMask()
  } else {
    var geo_map = ee.Image(region_params.geo_map)
  }
}

//var benthic_map = (vars.obia_2nd_pass) ? ee.Image(region_params.benthic_map_clean) : ee.ImageCollection(region_params.benthic_map).mosaic()
//var benthic_map = ee.Image(region_params.benthic_map)

if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
    var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
             .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
             .selfMask()
} else {
    var benthic_map = ee.Image(region_params.benthic_map)
}


var depth = ee.Image(region_params.pixels).select('depth')
var image = ee.Image(region_params.image)

var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic
//Map.centerObject(eg_area, 11)
Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false)
Map.addLayer(image, {bands: ['b3','b2','b1'], min:200, max:1200}, 'Dove low tide', false)

if (vars.geomorphic) {
  if (vars.obia_2nd_pass) {
    if (ee.List(region_params.geo_map).length().getInfo() > 1) {
      var geo_map_display = ee.Image(region_params.geo_map[0]).unmask(0, false)
                       .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                       .selfMask()
    } else {
    var geo_map_display = ee.Image(region_params.geo_map)
    }
    Map.addLayer(geo_map_display, display_pal, 'Raw GEO classification', false)
  } else {
    Map.addLayer(geo_map, display_pal, 'Raw GEO classification', false)
  }
}
if (!vars.geomorphic) {
  Map.addLayer(geo_map, map_palettes.geo, 'Clean GEO classification', false)
  Map.addLayer(benthic_map, display_pal, 'Raw BENTHIC classification', false)
}

// 3. Object-based re-classificaiton and cleaning

/*

// if we want to retain the land/waves flags, need to add them in before makign the mask

######## Not that straight forwards - the land and bright masks are a LOT of not land and not breakign waves... =(

// add in land, for geomorphic clean up rules
  geo_map = geo_map.unmask(0).where({
    test: depth.eq(-2).and(globcover.select('landcover').neq(210)),
    value: ee.Image(1)
  })
  
  // change -3 to reef rim, hope that clouds have been handleded by masking
  geo_map = geo_map.unmask(0).where({
    test: depth.eq(-3),
    value: ee.Image(15)
  })
  
  // remask
  geo_map = geo_map.updateMask(geo_map.gt(0))

*/

/* OUTPUT EXTENT
  - to the mapping extent just so it doesn't balloon out
  - to the 'reef boundary' extent for noise/deep removal
*/  
var class_extent_mask = geo_map.gt(0)


/*

########
Initial small object clean
 - this was originally at the end, but we needed to massively reduce the number of objects to 
   iterate through in the OBIA cleaning, so this happens first now
 - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
 
 - includes a possible special case for:
      - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
      - benthic to allow breaking waves (temporal class) to grow into surrounding class
########

*/

if (vars.geomorphic && !vars.obia_2nd_pass) {
  
  // make a smooth map with masked area as a value
  var smooth_map = geo_map
                      //.unmask(99)
                      .focal_mode({
                        radius: vars.smooth_radius, // relates to smoothness required
                        kernelType: 'circle', units: 'pixels', iterations: 2
                      })
  //smooth_map = smooth_map.updateMask(smooth_map.neq(99)).updateMask(class_extent_mask)
  
  //replace small objects with smooth underneath
  var clean_map = geo_map.where({
    test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
    value: smooth_map
  //}).updateMask(smooth_map.neq(99)).updateMask(class_extent_mask)
  }).updateMask(class_extent_mask)
  
  
  // shallow lagoon > 5m == deep lagoon
  clean_map = clean_map.where({
    test: clean_map.eq(11)
                   .and(depth.gt(500)),
    value: ee.Image(12)
  })
  
  /*// deep lagoon == deep (to hard to differentiate deep water vs. deep lagoon effectively over large areas)
  clean_map = clean_map.where({
    test: clean_map.eq(12),
    value: ee.Image(2)
  })*/
  
  // DEEP WATER in depth data == deep (s2 + ls8 data should be good enough for this)
  clean_map = clean_map.where({
    test: depth.gt(1000), // set at 20m (2000) but may need changing based on depth data
    // if you change this value, change the value in the benthic rules to be the same
    value: ee.Image(2)
  })
  
  
  // LAND mask cleaning
  Map.addLayer(land_dist.lte(vars.dist_to_land), {}, "Land mask", false)
  
  /*
  // reef crest close to land -> TRF
  clean_map = clean_map.where({
    test: land_dist.lte(vars.dist_to_land)
                   .and(clean_map.eq(15)),
    value: ee.Image(16)
  })
  */
  
  // TRF far from land -> ORF
  clean_map = clean_map.where({
    test: land_dist.gt(vars.dist_to_land)
                   .and(clean_map.eq(16)),
    value: ee.Image(14)
  })
  
  
  
  /*//CLEAN UP SMALL (but slightly larger) TURBID AREAS
  var smooth_noturbid = clean_map
                          .updateMask(clean_map.neq(3))
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(1.5),
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          })
  
  clean_map = clean_map.where({
    test: clean_map.eq(3).connectedPixelCount(vars.small_object_geo.multiply(10), false).lt(vars.small_object_geo.multiply(10)), 
    value: smooth_noturbid
  }).updateMask(class_extent_mask)*/
}


if (!vars.geomorphic) {
  
  // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
  var smooth_map = benthic_map
                      //.unmask(99)
                      .focal_mode({
                        radius: vars.smooth_radius, // relates to smoothness required
                        kernelType: 'circle', units: 'pixels', iterations: 1
                      })
  //smooth_map = smooth_map.updateMask(smooth_map.neq(99)).updateMask(class_extent_mask)
  
  //replace small objects with smooth underneath
  var clean_map = benthic_map.where({
    test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
    value: smooth_map
  //}).updateMask(smooth_map.neq(99)).updateMask(class_extent_mask)
  }).updateMask(class_extent_mask)
  
  
  /*// CLEAN UP ALL TEMPORAL AREAS
  var smooth_notemp = benthic_map
                          .updateMask(benthic_map.neq(2))
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(2),
                            kernelType: 'circle', units: 'pixels', iterations: 3
                          })
  
  
  clean_map = clean_map1.where({
    test: benthic_map.eq(2), 
    value: smooth_notemp
  }).updateMask(clean_map1.gte(0))
  
  // this catches any left over unmasked temporal, and assigned it back to temporal
  clean_map = clean_map.where({
    test: clean_map.unmask(99).eq(99).and(clean_map1.eq(2)),
    value: ee.Image(2)
  })*/
  
}



if (vars.geomorphic && vars.obia_2nd_pass) {
  var clean_map = geo_map
}

Map.addLayer(clean_map, display_pal, 'Clean map - init smooth/loaded', false)

if (vars.obia_clean) {
  
  if (vars.geomorphic && !vars.fast_clean) { // SHOULD TRY TO PUT THIS OUT TO A MODULE TO KEEP THE RULES THE SAME EVERYWEHRE?
    
    // #########
    // THE PLAN - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
    // #########
    
    // FUNCTION that maps over feature colleciton and assigns neighbour percentages
    var set_neighbour_properties = function(f) {
      // make the 1px buffer
      var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
      // reduce the classes in the buffer zone
      var diff_classes = ee.Dictionary(
        clean_map.unmask(ee.Image(0)).reduceRegion({
          reducer: ee.Reducer.frequencyHistogram(),
          geometry: diff.geometry(),
          scale: vars.image_data_scale,
          maxPixels: 1e11
        }).get('classification')
      )
      // calculate the percentages
      var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0])
      var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())})
      
      /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
         or we can return the neighbour % and do image logic via (painted) rasters */
      
      return(f.set(diff_percs))
    }
    
    // FUNCTION to reduce the map to vectors and map the neighbour properties function
    var reduce_neighbours = function() {
      // reduce map to vectors
      var map_fc = clean_map
            .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
            .reduceToVectors({
              scale: vars.image_data_scale, 
              eightConnected: false,
              bestEffort: true, 
              maxPixels: 1e13,
              tileScale: 1,
              geometry: reef_boundary
            })
      // map the function, calculate neighbour properties
      return(map_fc.map(set_neighbour_properties))
    }
    
    // first make a make size threshold, so we're not vecortising huge objects when we don't have to
    var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
    //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
    Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
    
    // This is where we select the single or group of classes to vectorise for cleaning up
    //var classn = ee.Number(15) // one class
    var classn = clean_map.where({
      test: clean_map.neq(16) //TRF
              .and(clean_map.neq(15)) //RR
              .and(clean_map.neq(14)) //ORF
              .and(clean_map.neq(13)) //IRF
              //.and(clean_map.neq(12)) // deep L
              .and(clean_map.neq(11)), // shallow L 
      value: ee.Image(99) // 99 ensures it's ignored in logic
    })
    
    // Minimum size of object to reclass based on neighbourhood
    var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2) // the first number is the square dimension of the desired min size
    // calculate neighbours
    var map_fc_neighbours = reduce_neighbours()
    
    // #########
    // REEF RIM
    // #########
    
    var focus_class = ee.Number(15) //RR
    
    // start the object-based neighbourhood rules
    // paint out to rasters (only paint the layers needed)
    var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count')
    //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
    var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22') //SL ex
    var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21') //Sl sh
    var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16') //TRF
    var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15') //RR
    var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14') //ORF
    var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13') //IRF
    //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
    
    // RR surrounded by ORF --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb14.gt(75)),
      value: ee.Image(14)
    })
    
    // RR surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.gt(75)),
      value: ee.Image(13)
    })
    
    // RR surrounded by IRF + ORF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.add(nb14).gt(75)),
      value: ee.Image(13)
    })
    
    // RR with decent border to TRF --> TRF (often dark, probably seagrass)
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb16.gt(40)),
      value: ee.Image(16)
    })
    
    /*// RR surrounded by OCL --> OCL
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb24.gt(75)),
      value: ee.Image(24)
    })*/
    
    /* with 2nd/3rd pass method, we don't really need this
    // RR surrounded by IRF + ORF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
              .and(nb13.add(nb14).gt(75))
              .and(nb21.add(nb22).lte(0)), // to not get rid of complex reef rims (if touching slope, it's probably RR)
      value: ee.Image(13) // could try assigning to a place-holder, then deal with at the end?
    })*/
    
    /*// small RR objects touching OCL + stuff --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(objsize.lte(max_size))
              .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
              .and(nb24.gt(1)),
      value: ee.Image(14)
    })*/
    
    // ####
    // ORF
    // ####
    
    focus_class = ee.Number(14) // ORF
    
    //classn = ee.Number(14)
    //map_fc_neighbours = reduce_neighbours()
    //var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22') //SL ex
    //var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21') //Sl sh
    //nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15') //RR
    //nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13') //IRF
    //var nb1 = ee.Image().byte().paint(map_fc_neighbours, '1').unmask(0).rename('nb1') //Land
    
    // ORF surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.gt(75)),
      value: ee.Image(13)
    })
    
    // ORF surrounded by TRF --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb16.gt(75)),
      value: ee.Image(16)
    })
    
    // ORF surrounded by RR --> RR
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb15.gt(85)),
      value: ee.Image(15)
    })
    
    // ORF touching slope and RR --> RR
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb21.gt(0).or(nb22.gt(0)))
              .and(nb15.gt(0)),
      value: ee.Image(15)
    })
    
    /*// ORF touching land --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb1.gt(10)),
      value: ee.Image(16)
    })*/
    
    // ####
    // IRF
    // ####
    
    focus_class = ee.Number(13) // IRF
    
    //classn = ee.Number(13)
    //map_fc_neighbours = reduce_neighbours()
    //nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15') //RR
    //nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14') //ORF
    
    // IRF surrounded by ORF --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb14.gt(75)),
      value: ee.Image(14)
    })
    
    // IRF surrounded by TRF --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb16.gt(75)),
      value: ee.Image(16)
    })
    
    // IRF surrounded by RR --> RR
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb15.gt(85)),
      value: ee.Image(15)
    })
    
    /*// IRF touching land --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb1.gt(10)),
      value: ee.Image(16)
    })*/
    
    // ####
    // TRF
    // ####
    
    focus_class = ee.Number(16) // TRF
    
    //classn = ee.Number(16)
    //map_fc_neighbours = reduce_neighbours()
    //nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15') //RR
    //nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14') //ORF
    //nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13') //IRF
    
    // TRF surrounded by ORF --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb14.gt(75)),
      value: ee.Image(14)
    })
    
    // TRF surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.gt(75)),
      value: ee.Image(13)
    })
    
    // TRF surrounded by IRF + ORF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.add(nb14).gt(75)),
      value: ee.Image(13)
    })
    
    /*// TRF not touching land --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb1.lt(10)),
      value: ee.Image(13)
    })*/
    
    
    // ####
    // LAGOONS
    // ####
    
    var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11') // shallow lag
    //var nb12 = ee.Image().byte().paint(map_fc_neighbours, '12').unmask(0).rename('nb12') //deep lag
    
    // DL touching SL --> SL
    /* 
    This is a stop-gap until we have better depth product - below are the rules we want,
    but too much band-aiding is required to make it work, so for the moment just err on the side
    of shallow lagoon when it's mixed.
    */
    /*clean_map = clean_map.where({
      test: clean_map.eq(12)
              .and(nb11.gt(0)),
      value: ee.Image(11)
    })*/
    
    /*// SL sourrounded by DL --> DL
    clean_map = clean_map.where({
      test: clean_map.eq(11)
              .and(nb12.gt(75)),
      value: ee.Image(12)
    })*/
    
    /*// DL sourrounded by SL --> SL
    clean_map = clean_map.where({
      test: clean_map.eq(12)
              .and(nb11.gt(75)),
      value: ee.Image(11)
    })*/
    
    /*// DL/SL surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(11).or(clean_map.eq(12))
              .and(objsize.lte(max_size))
              .and(nb13.gt(80)),
      value: ee.Image(13)
    })*/
    
    // SL surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(11)
              .and(objsize.lte(max_size))
              .and(nb13.gt(80)),
      value: ee.Image(13)
    });
    
    /*// DL/SL touching OCL --> OCL
    clean_map = clean_map.where({
      test: clean_map.eq(11).or(clean_map.eq(12))
              .and(nb24.gt(0)),
      value: ee.Image(24)
    })*/
    
    
    /*// ####
    // Turbid
    // ####
    
    focus_class = ee.Number(3) // turbid
    
    // Turb surrounded by IRF --> IRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb13.gt(75)),
      value: ee.Image(13)
    })
    
    // Turb surrounded by ORF --> ORF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb14.gt(75)),
      value: ee.Image(14)
    })
    
    // Turb surrounded by TRF --> TRF
    clean_map = clean_map.where({
      test: clean_map.eq(focus_class)
              .and(nb16.gt(75)),
      value: ee.Image(16)
    })*/
  
  } else if (vars.geomorphic && vars.fast_clean) {
    print("Executing the fast version OBIA");
    
    /* fast version of the geo clean up
      - blanket version assigns the underlying most common in neighbourhood
      - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
    */
    
    
    //############
    //# blanket version
    //############
    // make a very smooth map to capture the broader neighbourhood
    var smooth_map = clean_map
                        .focal_mode({
                          radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        })
    
    
    // first make a make size threshold, so we're not vectorising huge objects when we don't have t
    // - the unmask(99) captures small no data values/ data gaps
    var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int()
    Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
    
    
    // replace small objects with smooth underneath
    var clean_map = clean_map.unmask(0).where({
      test: segment_id.gt(0), 
      value: smooth_map
    }).selfMask()
    //############
    //############
    
    
    /*    
    //############
    //# mode OBIA version
    //############
    
    // #########
    // THE FASTER PLAN - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
    //                 - BUT, just assign the mode of the neighbours, so save resouces even further??
    // #########
    
    // FUNCTION that maps over feature colleciton and assigns neighbour percentages
    var set_neighbour_mode = function(f) {
      // make the 1px buffer
      var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
      // reduce the classes in the buffer zone
      var diff_mode = ee.Number(ee.Dictionary(
        clean_map.unmask(ee.Image(0)).reduceRegion({
          reducer: ee.Reducer.mode(),
          geometry: diff.geometry(),
          scale: vars.image_data_scale,
          maxPixels: 1e11
        })).get('classification'))
      
      return(f.set('mode',diff_mode))
    }
    
    // FUNCTION to reduce the map to vectors and map the neighbour properties function
    var reduce_neighbours_mode = function() {
      // reduce map to vectors
      var map_fc = clean_map.unmask(0)
            .updateMask(classn.gt(0)) // only vectorise class/es of interest
            .reduceToVectors({
              scale: vars.image_data_scale, 
              eightConnected: false,
              bestEffort: true, 
              maxPixels: 1e13,
              tileScale: 1,
              geometry: reef_boundary
            })
      // map the function, calculate neighbour properties
      return(map_fc.map(set_neighbour_mode))
    }
    
    // first make a make size threshold, so we're not vecortising huge objects when we don't have to
    var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
    Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
    
    // This is where we select the single or group of classes to vectorise for cleaning up
    var classn = segment_id.where({
      test: clean_map.neq(16) //TRF
              .and(clean_map.neq(15)) //RR
              .and(clean_map.neq(14)) //ORF
              .and(clean_map.neq(13)) //IRF
              //.and(clean_map.neq(12)) // deep L
              .and(clean_map.neq(11)) // shallow L 
              .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
      value: ee.Image(0) // 99 ensures it's ignored in logic
    })
    
    // calculate neighbours
    var map_fc_neighbours = reduce_neighbours_mode()
    
    //print(map_fc_neighbours.limit(10))
    
    var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
    //Map.addLayer(mode_map, display_pal, "mode map", false)
    
    // replace small objects with mode underneath
    var clean_map = clean_map.unmask(0).where({
      test: segment_id.gt(0), 
      value: mode_map
    }).selfMask()
    
    //############
    //############
    */
    
  } else {
    
    // BENTHIC CLEAN-UP RULES
    
    
    // reclaim shallow no data to surrounding class
    var smooth_map = clean_map
                        .focal_mode({
                          radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        })
    
    var clean_map = clean_map.unmask(0).where({
      test: geo_map.gt(2).and(clean_map.eq(0)), 
      value: smooth_map
    }).selfMask()
    
    // cut benthic off to < 10 - 15 m
    clean_map = clean_map.where({
      test: depth.gt(1000), // match to geo at least, not deeper or you end up with deep water benthic classes!
      value: ee.Image(0)
    })
    
    // No reef == masked from benthic
    clean_map = clean_map.where({
      test: no_reef.eq(1),
      value: ee.Image(0)
    })
    
    // Deep (or land or missing) in geo == masked from benthic
    clean_map = clean_map.where({
      test: geo_map.unmask(0).lte(2),
      value: ee.Image(0)
    })
    
    // Deep in geo  == masked from benthic
    clean_map = clean_map.where({
      test: geo_map.eq(2),
      value: ee.Image(0)
    })
    
    /*// Deep lagoon in geo == masked from benthic
    clean_map = clean_map.where({
      test: geo_map.eq(12),
      value: ee.Image(0)
    })*/
    
    // Deep/shallow lagoon in geo && rock in benthic == seagrass
    clean_map = clean_map.where({
      test: geo_map.eq(11).or(geo_map.eq(12))
                   .and(clean_map.eq(13)),
      value: ee.Image(14)
    })
    
    // Deep/shallow lagoon in geo && coral in benthic == sand
    clean_map = clean_map.where({
      test: geo_map.eq(11).or(geo_map.eq(12))
                   .and(clean_map.eq(15)),
      value: ee.Image(11)
    })
    
    /*// turbid in geo == turbid (temporal - class num 2)
    // ############## ---> need to decide here whether to push geo turbid through regardless of benthic class
    clean_map = clean_map.where({
      test: geo_map.eq(3),
      value: ee.Image(2)
    })*/
    
    /*
    // Ignore in benthic + ORF in geo == rock
    clean_map = clean_map.where({
      test: clean_map.eq(0)
                     .and(geo_map.eq(14)),
      value: ee.Image(13)
    })
    
    // Ignore in benthic + IRF in geo == sand
    clean_map = clean_map.where({
      test: clean_map.eq(0)
                     .and(geo_map.eq(13)),
      value: ee.Image(11)
    })
    
    // Ignore in benthic + TRF in geo == sand
    clean_map = clean_map.where({
      test: clean_map.eq(0)
                     .and(geo_map.eq(16)),
      value: ee.Image(11)
    })
    
    // Ignore in benthic + RR in geo == rock
    */
    
    /*// seagrass in benthic + ORF/RR/slope in geo == coral/algae
    clean_map = clean_map.where({
      test: clean_map.eq(14)
                     .and(geo_map.eq(14).or(geo_map.eq(15)).or(geo_map.eq(21)).or(geo_map.eq(22))),
      value: ee.Image(15)
    })*/
    
    // ####--> CR: "Seagrass neighbouring deep water or no data not shallow a rock or coral algae class"
    
    // Seagrass in ben + ORF in geo == Rubble
    clean_map = clean_map.where({
      test: SGtoRubble.eq(1)
                     .and(clean_map.eq(14))
                     .and(geo_map.eq(14)),
      value: ee.Image(12)
    })
        
    // Seagrass in ben + ORF in geo == Rock
    clean_map = clean_map.where({
      test: SGtoRock.eq(1)
                     .and(clean_map.eq(14))
                     .and(geo_map.eq(14)),
      value: ee.Image(13)
    })
    
    // Deep lagoon in geo + Seagrass in Ben == Sand
    clean_map = clean_map.where({
      test: SGtoSand.eq(1)
                     .and(clean_map.eq(14))
                     .and(geo_map.eq(12)),
      value: ee.Image(11)
    })
     
    // BMA to Coral/Algae
    clean_map = clean_map.where({
      test: BMAtoCA.eq(1)
                     .and(clean_map.eq(18)),
      value: ee.Image(15)
    })
    
    // MAYOTTE RB to Coral/Algae on PRs
    clean_map = clean_map.where({
      test: MayNotRB.eq(1)
                     .and(clean_map.eq(12))
                     .and(geo_map.eq(13)),
      value: ee.Image(15)
    })
    // MAYOTTE IRF Rubble to Rock 
    clean_map = clean_map.where({
      test: MayNotRB.eq(1)
                     .and(clean_map.eq(12))
                     .and(geo_map.eq(13)),
      value: ee.Image(13)
    })
    // coral or algae in benthic + TRF in geo == seagrass
    clean_map = clean_map.where({
      test: clean_map.eq(15)
                     .and(geo_map.eq(16)),
      value: ee.Image(14)
    })
    
    // rock in benthic + TRF in geo == sand
    clean_map = clean_map.where({
      test: clean_map.eq(13)
                     .and(geo_map.eq(16)),
      value: ee.Image(11)
    })
    
    // seagrass in benthic and slope in geo == coral
    clean_map = clean_map.where({
      test: clean_map.eq(14)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
      value: ee.Image(15)
    })
    
    // coral or algae in benthic + plat in geo == seagrass
    clean_map = clean_map.where({
      test: clean_map.eq(15)
                     .and(geo_map.eq(23)),
      value: ee.Image(14)
    })
    
    /*// BMA in benthic and slope/plat in geo == sand
    clean_map = clean_map.where({
      test: clean_map.eq(18)
                     .and(geo_map.eq(2).or(geo_map.eq(12)).or(geo_map.eq(21)).or(geo_map.eq(22)).or(geo_map.eq(23))),
      value: ee.Image(11)
    })*/
    
    
    
    
  }
  
/*  // ####
  // Final small object clean (safety net for oddities with scaling and border buffers??)
  // ####
  
  var clean_size = (vars.geomorphic) ? vars.small_object_geo : vars.small_object_benthic
  
  var map_vsmooth = clean_map
                        .focal_mode({
                          radius: 10, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        })
                        .updateMask(class_extent_mask)
  
  clean_map = clean_map.where({
    test: clean_map.connectedPixelCount(clean_size, false).lt(clean_size), 
    value: map_vsmooth
  })*/

}

// final smooth
if (vars.smooth_output) {
  // smooth the output lightly to make nice edges, and get rid of noise
  var noise_smooth = clean_map.unmask(99) // unmasking to a value allows us to include masked areas in the smooth, then re-mask after
                        .focal_mode({
                          radius: 2, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        })
  clean_map = clean_map.updateMask(noise_smooth.neq(99)).updateMask(clean_map.gt(1)) // this ignores 0/land; make it .gt(2) if you want to mask deep too
} else {
  // just clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)) // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)) // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }
  
}


// 4. Export data

var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name


if (vars.do_export) {
  print("For export, the image data scale must be set to:", vars.image_data_scale)
  
  if (vars.export_small_area) {
    var export_convhull = export_small
  } else {
    //var export_convhull = clean_map.gt(2).reduceToVectors({scale: 1000, maxPixels: 1e13, bestEffort: true, geometry: region_extent, crs: "EPSG:4326"}).geometry().convexHull({maxError: 100})
    var export_convhull = reef_boundary
  }
  Map.addLayer(export_convhull, {}, "Export footprint", true)
  Export.image.toAsset({
    image: clean_map.set(vars),
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: export_convhull,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  })
  /*Export.image.toCloudStorage({
    image: clean_map,//.set(vars),
    description: 'swp_geo_clean',
    bucket: 'mitchest_unet_bucket',
    fileNamePrefix: 'swp_geo_clean',
    region: export_convhull,
    scale: 25,
    crs: 'EPSG:4326',
    maxPixels: 1e13
  })*/
  
  
} else {
  if (vars.show_eg_area) {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.clip(eg_area).reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name + '_final', false)
    } else {
      Map.addLayer(clean_map.clip(eg_area), display_pal, output_name + '_final', false)
    }
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name + '_final', false)
    } else {
      Map.addLayer(clean_map, display_pal, output_name + '_final', false)
    }
  }
}

//Generate Legend title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

/*// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend*/