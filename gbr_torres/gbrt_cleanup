/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var mid_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPoint(),
    gbr30 = ee.Image("users/mitchest/gbr_reefs/gbr_depth30"),
    coast_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[152.40788313456125, -23.963473164379604],
           [151.78578230448312, -23.734875952572068],
           [151.61686750956125, -23.659426040601588],
           [151.49739119120187, -23.751217682342208],
           [151.28315779276437, -23.442895264259235],
           [150.965927568155, -23.23231888877121],
           [150.88490339823312, -23.159106610283914],
           [150.93571516581125, -23.11364436186474],
           [150.878036943155, -22.882157384839335],
           [150.91099592753, -22.756842704742475],
           [150.746201005655, -22.359891086979502],
           [150.43995710917062, -21.99109557750766],
           [150.17079207010812, -21.677501267075304],
           [149.94694563456125, -21.35938637432312],
           [149.36329695292062, -21.06877461116278],
           [149.28639265604562, -20.872578349337513],
           [149.252060380655, -20.826377171325277],
           [149.23146101542062, -20.819959219306146],
           [149.28913923807687, -20.74163821252569],
           [149.2026219040925, -20.714665850284483],
           [149.09001204081125, -20.68897342123898],
           [149.00624128885812, -20.596444677235308],
           [148.96229597635812, -20.457546270569356],
           [148.91011091776437, -20.41121882810542],
           [148.86479231424875, -20.403496231386026],
           [148.84419294901437, -20.376464094504513],
           [148.83046003885812, -20.30821907343396],
           [148.79475447245187, -20.25927015176228],
           [148.7631687790925, -20.210305790047798],
           [148.64918562479562, -20.126515256115443],
           [148.63270613260812, -20.096855527876638],
           [148.51185652323312, -19.98590420835141],
           [148.22346540995187, -19.84258405384247],
           [147.8183445603425, -19.649995914706373],
           [147.5844707599216, -19.358736922817823],
           [147.34002495914035, -19.16427433534352],
           [146.8209209552341, -19.03839946825227],
           [146.47622491031223, -18.848758451060995],
           [146.52017022281223, -18.730448903214473],
           [146.45699883609348, -18.66931148138417],
           [146.43365288882785, -18.37111483811531],
           [146.2135670294399, -17.91492282588311],
           [146.16000867983053, -17.44650935355132],
           [146.09683729311178, -17.249886404627944],
           [146.01443983217428, -17.180362708433677],
           [145.99796033998678, -17.158057123649893],
           [145.98972059389303, -16.978202739088903],
           [145.9773609747524, -16.909891581288242],
           [145.94552393871982, -16.812127768177145],
           [145.58984156567294, -16.454223131358535],
           [145.53079005200107, -16.376501656406166],
           [145.5651223273917, -16.302078201632423],
           [145.54177638012607, -16.1649502508645],
           [145.4607522102042, -15.866633429889763],
           [145.3838479133292, -15.722596463384184],
           [145.3948342414542, -15.64194404889157],
           [145.38110133129794, -15.468632397131833],
           [145.39208765942294, -15.268680902345768],
           [145.3508889289542, -15.0632343908151],
           [145.35912867504794, -15.010183622473244],
           [145.39208765942294, -14.921294092105851],
           [145.32479639965732, -14.87484463157031],
           [145.29321070629794, -14.785899211815414],
           [145.32479639965732, -14.754029286150333],
           [145.3453957648917, -14.715513563846603],
           [145.38377701336924, -14.670124513737782],
           [145.2656739860255, -14.578437359917992],
           [145.01161514813487, -14.513302998989953],
           [145.007495275088, -14.53989077270554],
           [144.98826920086924, -14.551854227334104],
           [144.97316299969737, -14.538561459965388],
           [144.95531021649424, -14.546537216408714],
           [144.90587173993174, -14.523938492083982],
           [144.84956680829112, -14.38031632377249],
           [144.81660782391612, -14.356370293134113],
           [144.78354124599866, -14.395561726038908],
           [144.7258630233424, -14.414183371007729],
           [144.57480101162366, -14.141354879884483],
           [144.50201658779554, -14.141354879884483],
           [144.45395140224866, -14.104064933793492],
           [144.5322289901393, -14.064104652597797],
           [144.34408812099866, -14.057443926329128],
           [144.25070433193616, -14.101401132663767],
           [143.9334741073268, -14.109392442696928],
           [143.84970335537366, -14.069433093955137],
           [143.86068968349866, -14.022805026127942],
           [143.78241209560804, -13.94951320760229],
           [143.7480798202174, -13.956177064494202],
           [143.7480798202174, -13.928187572220367],
           [143.77279905849866, -13.918856987529741],
           [143.76181273037366, -13.888196701938005],
           [143.7192407088893, -13.881530885297112],
           [143.69589476162366, -13.861532285764765],
           [143.72198729092054, -13.846865551148179],
           [143.7137475448268, -13.729498432377909],
           [143.7041345077174, -13.664120784813555],
           [143.7082543807643, -13.581372058490363],
           [143.6986413436549, -13.482569656402271],
           [143.6766686874049, -13.347651831468184],
           [143.6601891952174, -13.28617906895975],
           [143.62311033779554, -13.218006277269708],
           [143.59152464443616, -13.115042651016832],
           [143.58053831631116, -12.904970551079654],
           [143.57916502529554, -12.817946173372786],
           [143.51462034756116, -12.704099700480006],
           [143.43634275967054, -12.536585856954423],
           [143.32647947842054, -12.372987251909215],
           [143.25644163662366, -12.273705269733918],
           [143.2303491073268, -12.261627874645574],
           [143.21798948818616, -12.225392371546508],
           [143.2138696151393, -12.12605483630215],
           [143.28802732998304, -11.994442795514331],
           [143.33451061177516, -12.020125951460109],
           [143.2878187172439, -11.930117815757773],
           [143.15460948872828, -11.875023457517653],
           [143.06671886372828, -11.806475906355198],
           [143.06397228169703, -11.747323061288748],
           [142.95136241841578, -11.618218300181253],
           [142.89643077779078, -11.598040259845517],
           [142.8923109047439, -11.580551445006147],
           [142.9472425453689, -11.584587422507898],
           [142.97882823872828, -11.544225028164304],
           [142.95548229146266, -11.456753272763196],
           [142.91703014302516, -11.359829887574868],
           [142.85083099077906, -11.2582814475326],
           [142.84945769976343, -11.115478505059567],
           [142.721944710976, -10.887705144106944],
           [142.66426648831975, -10.75551600357391],
           [142.7054652187885, -10.631367319406692],
           [142.63130750394475, -10.570623987227037],
           [142.3099574062885, -10.47611049200771],
           [142.04765882230413, -10.570623987227037],
           [141.2442835781635, -10.39777745386569],
           [140.865255257851, -11.898709518363704],
           [141.315694710976, -13.105340253772662],
           [142.809835335976, -12.805553934998935],
           [143.523946664101, -14.598647275517763],
           [144.490743539101, -14.683683891030867],
           [145.7576592051215, -18.320469552763473],
           [146.1202080332465, -19.069742779751788],
           [148.4163506113715, -20.434572777213738],
           [149.201873072309, -22.03711604810243],
           [149.41335988871526, -22.58595940746644],
           [150.50649953715276, -22.78108738553528],
           [150.51199270121526, -23.215948379918697],
           [150.9322197519965, -23.777647030491945],
           [151.289275416059, -24.214247495485353],
           [151.86331106059026, -24.34193492759875],
           [153.33547902934026, -24.30689626042506],
           [152.99490285746526, -23.91330207660261],
           [152.50051809184026, -23.91079123713386]]],
         [[[146.65064309451492, -9.362529100516193],
           [147.10657571170242, -9.04802912634942],
           [146.52704690310867, -8.662664159960446],
           [146.20020364138992, -8.866252331095765]]]]),
    reef_clean_boundary = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[141.3205652715127, -10.390693242918486],
          [141.32331185354394, -10.431213715405752],
          [142.05390267385644, -10.582443381481959],
          [142.3038416387002, -10.482532072251589],
          [142.6224451543252, -10.577043599439705],
          [142.69110970510644, -10.628337685540828],
          [142.65265755666894, -10.76058257537003],
          [142.7103357793252, -10.757884277355954],
          [142.8092127324502, -10.774073703076793],
          [142.96027474416894, -10.687720071284284],
          [142.9630213262002, -10.541942701923508],
          [143.0179529668252, -10.231261915077043],
          [143.30085091604394, -10.033888673220087],
          [143.71283822073144, -10.031184089215703],
          [143.9023523808877, -9.81745107076062],
          [144.10834603323144, -9.625244025438596],
          [144.25666146291894, -9.543996777102729],
          [144.42694954885644, -9.72271492456675],
          [144.59723763479394, -9.435637000732912],
          [143.9243250371377, -8.915042505153066],
          [143.3695154668252, -8.868911777554976],
          [143.35028939260644, -8.958454339553723],
          [143.1442957402627, -9.020849762199163],
          [142.60871224416894, -9.297428926422377],
          [142.43976059929582, -9.217494184177259],
          [142.2598963262002, -9.148319834831558],
          [142.11982064260644, -9.159166252284027],
          [141.43317513479394, -9.454602431558385],
          [141.32880501760644, -9.709178991949296],
          [141.3645105840127, -10.142053448379542],
          [141.30683236135644, -10.19341894767065]]]),
    reef_clean = /* color: #0b4a8b */ee.Geometry.MultiPolygon(
        [[[[141.5321029773644, -10.339894338635533],
           [141.52283326300892, -10.346649211889593],
           [141.52077332648548, -10.358469890183258],
           [141.53416291388783, -10.378732872805783],
           [141.55647889289173, -10.377382048100579],
           [141.5712417713097, -10.35813216270126],
           [141.57467499884876, -10.345298248867119],
           [141.56780854377064, -10.3378678483217],
           [141.54068604621204, -10.3378678483217]]],
         [[[141.90323487433704, -10.6035632928399],
           [141.90872803839954, -10.608962607487097],
           [141.91490784796986, -10.604913130433697],
           [141.90941468390736, -10.599513744340593]]],
         [[[142.12364808234486, -10.52458745646671],
           [142.15454713019642, -10.521211968969595],
           [142.1923126331261, -10.502983698563872],
           [142.21840516242298, -10.494206740342968],
           [142.23763123664173, -10.490155752535037],
           [142.27333680304798, -10.473276066037679],
           [142.27059022101673, -10.467874372131234],
           [142.2190918079308, -10.471250441852062],
           [142.1813263050011, -10.475976877692055],
           [142.15042725714954, -10.496232214353034],
           [142.12227479132923, -10.509735035285752]]],
         [[[142.12914124640736, -10.469224804430732],
           [142.12433472785267, -10.479352859155822],
           [142.14493409308704, -10.475976877692055],
           [142.19505921515736, -10.465848712655838],
           [142.2520507923058, -10.453019228868214],
           [142.2582306018761, -10.444916123880018],
           [142.1971191516808, -10.448292443308357],
           [142.1703399768761, -10.453694478076173]]],
         [[[142.09755555304798, -10.446266656053286],
           [142.14081422004017, -10.448292443308357],
           [142.17102662238392, -10.438838656489258],
           [142.22252503546986, -10.434111655292183],
           [142.26097718390736, -10.417904249013878],
           [142.23831788214954, -10.401695999773471],
           [142.22939149054798, -10.398994543033409],
           [142.17308655890736, -10.40642349280502],
           [142.09412232550892, -10.436812807629272]]],
         [[[142.04468384894642, -10.36995240799194],
           [142.0549835315636, -10.366575240562904],
           [142.06459656867298, -10.36049624743347],
           [142.06322327765736, -10.350364330212344],
           [142.05361024054798, -10.347662430339975],
           [142.0433105579308, -10.353066206814223]]],
         [[[142.10854188117298, -10.337530098664862],
           [142.0762695423058, -10.350364330212344],
           [142.0817627063683, -10.363198036719265],
           [142.10854188117298, -10.3557680601398],
           [142.11266175421986, -10.346986951736545]]],
         [[[142.1154083362511, -10.349688857425628],
           [142.11815491828236, -10.358469890183258],
           [142.11815491828236, -10.375355800107748],
           [142.12776795539173, -10.390214647224719],
           [142.1373809925011, -10.38886387212201],
           [142.14493409308704, -10.379408282971092],
           [142.13875428351673, -10.35914534405562],
           [142.1257080188683, -10.348337907489354]]],
         [[[142.19986573371204, -10.356443519833583],
           [142.17377320441517, -10.359820796472382],
           [142.1641601673058, -10.367250676962243],
           [142.26509705695423, -10.363873480400612],
           [142.2410644641808, -10.361171696938808],
           [142.21291199836048, -10.357794434855405]]],
         [[[142.20535889777454, -10.345635990167914],
           [142.21153870734486, -10.35171527142246],
           [142.22870484504017, -10.355092598990874],
           [142.23488465461048, -10.352390739845683],
           [142.23145142707142, -10.346311471679158]]],
         [[[142.0659698596886, -10.325370869235247],
           [142.08450928839954, -10.33077502927734],
           [142.1202148548058, -10.323344285274684],
           [142.16690674933704, -10.32807296086757],
           [142.11609498175892, -10.314562270596408],
           [142.08862916144642, -10.313211169666213]]],
         [[[142.11366203326924, -10.300500500502938],
           [142.198806076238, -10.319416149402434],
           [142.27296379108174, -10.327522508130523],
           [142.3210289766286, -10.315362891715234],
           [142.32446220416767, -10.28698862770312],
           [142.30592277545674, -10.28698862770312],
           [142.26403739948017, -10.288339841021067],
           [142.20841911334736, -10.270097973476531],
           [142.1507408906911, -10.255233451360407],
           [142.1603539278005, -10.24577384666516],
           [142.12052848834736, -10.221447853167188],
           [142.10885551471455, -10.216717582464364],
           [142.1232750703786, -10.237665389366],
           [142.0628502656911, -10.21401453903062],
           [142.0243981172536, -10.21401453903062],
           [142.00311210651142, -10.228205260583838],
           [142.0079186250661, -10.253882096554673],
           [142.0456841279958, -10.268746682141947],
           [142.0738365938161, -10.286313018875253],
           [142.09237602252705, -10.298473756481677]]],
         [[[142.30660942096455, -10.216717582464364],
           [142.3251488496755, -10.22009635443609],
           [142.34368827838642, -10.210635702427505],
           [142.34643486041767, -10.196444196903622],
           [142.3478081514333, -10.16805928990541],
           [142.3375084688161, -10.146431000755307],
           [142.3258354951833, -10.130884765196727],
           [142.27227714557392, -10.113985828178286],
           [142.2276451875661, -10.11466180273969],
           [142.20635917682392, -10.124801250386886],
           [142.209792404363, -10.166031699951345]]],
         [[[142.06079032916767, -10.051113987998802],
           [142.09100273151142, -10.04502896611428],
           [142.10267570514424, -10.03353472360183],
           [142.0848229219411, -10.031506285498992],
           [142.0566704561208, -10.04232447519355]]],
         [[[142.10267570514424, -10.019335390198837],
           [142.1164086153005, -10.027449371185897],
           [142.1335747529958, -10.03083013664164],
           [142.14181449908955, -10.02542089498055],
           [142.15760734576924, -10.02271624029129],
           [142.1562340547536, -10.015954504860456],
           [142.12602165240986, -10.012573584287585],
           [142.10816886920674, -10.015278323564283]]],
         [[[142.34025505084736, -10.103846039096256],
           [142.3430016328786, -10.11195789595883],
           [142.3594811250661, -10.123449342539956],
           [142.36566093463642, -10.116689717887406],
           [142.34574821490986, -10.101818042896722]]],
         [[[141.40955513675522, -9.83333243266418],
           [141.42397469241928, -9.83333243266418],
           [141.43908089359115, -9.825890213110606],
           [141.43496102054428, -9.81777123719623],
           [141.42191475589584, -9.81777123719623],
           [141.41092842777084, -9.825890213110606]]],
         [[[141.55443733890365, -9.623533434059738],
           [141.56679695804428, -9.622856450722926],
           [141.5784699316771, -9.614055543962829],
           [141.58121651370834, -9.601869295058046],
           [141.57229012210678, -9.60322334437771],
           [141.56130379398178, -9.606608443988218],
           [141.5571839209349, -9.614055543962829]]],
         [[[141.53177803714584, -9.540254335795257],
           [141.5455109473021, -9.547702891079162],
           [141.5736634131224, -9.539577186333965],
           [141.59288948734115, -9.532805617766186],
           [141.60456246097397, -9.517230500167178],
           [141.60456246097397, -9.50233189735054],
           [141.58739632327865, -9.497591296776246],
           [141.57091683109115, -9.495559590725863],
           [141.5510041113646, -9.505040782489692],
           [141.53246468265365, -9.524679558086225]]],
         [[[142.03322640373796, -9.320915534743031],
           [142.0634388060817, -9.307363681981009],
           [142.1018909545192, -9.307363681981009],
           [142.09227791740983, -9.296521821492139],
           [142.04970589592546, -9.276192428181616],
           [142.0304798217067, -9.285679625164303],
           [141.9975208373317, -9.329046393930767]]],
         [[[142.23235360100358, -9.55595579660385],
           [142.2605060668239, -9.569497878575254],
           [142.32230416252702, -9.583039420958723],
           [142.3429035277614, -9.574914560320348],
           [142.33054390862077, -9.560018477808278],
           [142.26393929436296, -9.542413175779567],
           [142.23029366448014, -9.543767462089432]]],
         [[[142.15338936760514, -9.505845413737445],
           [142.15819588615983, -9.513971921353038],
           [142.16849556877702, -9.514649121603881],
           [142.18497506096452, -9.513971921353038],
           [142.18703499748796, -9.507199845080974],
           [142.16094246819108, -9.504490977032608]]],
         [[[142.16849556877702, -9.605381784262642],
           [142.1513294310817, -9.608089849393311],
           [142.1403431029567, -9.614859917412769],
           [142.13759652092546, -9.630430559437388],
           [142.17055550530046, -9.630430559437388],
           [142.19252816155046, -9.626368721995965],
           [142.2007679076442, -9.616213914758136],
           [142.19802132561296, -9.608089849393311],
           [142.1842884154567, -9.605381784262642]]],
         [[[142.31751397800582, -9.68752749642002],
           [142.32438043308395, -9.69226544116691],
           [142.34223321628707, -9.68685064170984],
           [142.36145929050582, -9.68752749642002],
           [142.37381890964645, -9.684143209221215],
           [142.37669421176938, -9.679489724529693],
           [142.37038568210738, -9.673990142993512],
           [142.35321954441207, -9.670605719412052],
           [142.32742742252483, -9.681224234112273]]],
         [[[142.0477165449331, -9.986058984424382],
           [142.06213610059717, -9.996202468443284],
           [142.1349205244253, -10.00905042712577],
           [142.19843523389795, -10.022574044853162],
           [142.22590105421045, -10.012431384402953],
           [142.24581377393702, -9.97997274221599],
           [142.24341051465967, -9.94987798511707],
           [142.22075121290186, -9.917413115865273],
           [142.1730293501089, -9.91166379308045],
           [142.14419023878077, -9.915722149043667],
           [142.12050096876123, -9.919442264533451],
           [142.0751823652456, -9.946158215670414],
           [142.03947679883936, -9.965432925445736]]],
         [[[142.2612632978628, -9.912001991329525],
           [142.2719063032339, -9.926882368779086],
           [142.29147694665645, -9.929588196129659],
           [142.29482445446843, -9.92011873887008],
           [142.29748514310776, -9.910649254881323],
           [142.31928484327295, -9.892047698166392],
           [142.33713762647608, -9.878856906694082],
           [142.35464763913845, -9.86634253488103],
           [142.3766197431753, -9.855856313383256],
           [142.39515978416455, -9.851628540919451],
           [142.4095787275503, -9.838604815417328],
           [142.4367012251089, -9.795979608477264],
           [142.43206620038893, -9.780923972584832],
           [142.42914812452295, -9.767898106107515],
           [142.41678850538233, -9.743536329075777],
           [142.39962236768702, -9.731016390334911],
           [142.39103929883936, -9.738122359125637],
           [142.35739366895655, -9.7668830676352],
           [142.37370105307764, -9.778217730135653],
           [142.38932268506983, -9.785491614158198],
           [142.36220078104972, -9.802915620747408],
           [142.34537737256983, -9.803422500154827],
           [142.31447832471827, -9.839957906658466],
           [142.2894157636831, -9.856532824337384],
           [142.27636949903467, -9.875474567252857],
           [142.26400987989405, -9.90253230853708]]],
         [[[142.61470949699873, -9.802407570215113],
           [142.62054598381513, -9.806805577516277],
           [142.63256228020185, -9.809512014545813],
           [142.6404587035417, -9.80714388335357],
           [142.64526522209638, -9.801730948529643],
           [142.6462951903581, -9.79665624189352],
           [142.6404587035417, -9.793949699950907],
           [142.6294723754167, -9.795302973681347],
           [142.61573946526045, -9.795979608477264]]],
         [[[142.61985933830732, -9.775341626961106],
           [142.6346222167253, -9.777709985027862],
           [142.64526522209638, -9.777371649193972],
           [142.65316164543623, -9.771958229036944],
           [142.65419161369795, -9.765868026067508],
           [142.64698183586592, -9.760454418775256],
           [142.63942873527998, -9.756732512717726],
           [142.62741243889326, -9.754702364617005],
           [142.62123262932295, -9.757409226002721],
           [142.6188293700456, -9.76823645157705]]],
         [[[142.71427309563154, -9.832177556355646],
           [142.70843660881513, -9.831162714552907],
           [142.70500338127607, -9.832515836264307],
           [142.7122131591081, -9.839957906658466],
           [142.7177063231706, -9.839281361730647],
           [142.71942293694013, -9.83386895243729]]],
         [[[142.76336824944013, -9.889680159184348],
           [142.76233828117842, -9.894415220088517],
           [142.76336824944013, -9.902194100525229],
           [142.7668014769792, -9.907267184103572],
           [142.77710115959638, -9.910987395535832],
           [142.78705751945967, -9.906928980971976],
           [142.7836242919206, -9.894415220088517],
           [142.77332460930342, -9.892047698166392]]],
         [[[142.44545045762368, -10.043538621331338],
           [142.4468237486393, -10.048102419511855],
           [142.4545485106022, -10.050468808026473],
           [142.4607283201725, -10.0459050432415],
           [142.46141496568032, -10.03863669231219],
           [142.45643678574868, -10.036946354744881],
           [142.44836870103188, -10.043200559645255]]],
         [[[142.48299754885142, -10.10969637639127],
           [142.48385585573618, -10.113245274356544],
           [142.48849071291392, -10.113583262594318],
           [142.49089397219126, -10.11189331784933],
           [142.49123729494517, -10.108682398344486],
           [142.48986400392954, -10.108006411202602],
           [142.48574413088267, -10.108006411202602]]],
         [[[142.5010219934315, -10.153632347574275],
           [142.49947704103892, -10.15718075918297],
           [142.50325359133188, -10.16427746427481],
           [142.5097767236561, -10.166642997624278],
           [142.51578487184946, -10.16512229962417],
           [142.51801646974985, -10.16106706958018],
           [142.517501485619, -10.155322072297295],
           [142.51320995119517, -10.153125428416995],
           [142.50411189821665, -10.152618508456538]]],
         [[[142.50016368654673, -10.184046025741802],
           [142.50531352785532, -10.192324802994214],
           [142.5116649988026, -10.19823808365633],
           [142.51664317873423, -10.199251777890895],
           [142.5207630517811, -10.196717536255077],
           [142.52436794069712, -10.190635274077259],
           [142.5236812951893, -10.185228721367181],
           [142.51664317873423, -10.18218749518426],
           [142.51132167604868, -10.18066687121964],
           [142.5020519616932, -10.182356452955126]]],
         [[[142.51801646974985, -10.179822076996546],
           [142.51921809938852, -10.182018537323893],
           [142.52196468141977, -10.181342704987607],
           [142.52196468141977, -10.179315199389066],
           [142.51938976076548, -10.178639361326638]]],
         [[[142.47218254624897, -10.248369783454509],
           [142.47072342454487, -10.253184042410375],
           [142.47235420762593, -10.258336063046187],
           [142.47690323411518, -10.262136680270988],
           [142.4819672447353, -10.263150170489663],
           [142.4856579643398, -10.2617988494768],
           [142.48883369981343, -10.25918064859534],
           [142.49089363633686, -10.253944181873411],
           [142.49321106492573, -10.249298856668558],
           [142.49278191148335, -10.245075774658192],
           [142.4911511284023, -10.241612805427637],
           [142.48514298020893, -10.240937099704627],
           [142.4787056785732, -10.24271082415668],
           [142.47235420762593, -10.24701839937177]]],
         [[[142.48548630296284, -10.2335887070248],
           [142.4848854881435, -10.235446937343326],
           [142.48651627122456, -10.236798370740045],
           [142.48874786912495, -10.236882835136218],
           [142.4896920066982, -10.235446937343326],
           [142.48831871568257, -10.233081915049558]]],
         [[[142.3563397847118, -10.364492204099127],
           [142.35496649369617, -10.368882543855866],
           [142.3614896260204, -10.372597398650463],
           [142.36595282182117, -10.368207110976043],
           [142.362862917036, -10.364154483107459]]],
         [[[142.4332440815868, -10.459714953656256],
           [142.4339307270946, -10.463428726018376],
           [142.4394238911571, -10.46748006334858],
           [142.44835028275867, -10.468492889412424],
           [142.45144018754382, -10.464779177674412],
           [142.4504102192821, -10.459039717542717],
           [142.4449170552196, -10.457014000388483],
           [142.43633398637195, -10.458702098935065]]],
         [[[142.4438870869579, -10.492799721813407],
           [142.4438870869579, -10.496850674996967],
           [142.44766363725086, -10.499551280972518],
           [142.45247015580554, -10.49820098093323],
           [142.45315680131336, -10.494825205037273],
           [142.44869360551257, -10.492799721813407]]],
         [[[142.6872741290141, -10.718879864697787],
           [142.68933406553754, -10.71449451292372],
           [142.68384090147504, -10.707073003712255],
           [142.67800441465863, -10.710446439530651]]],
         [[[142.70100703917035, -10.686494232373235],
           [142.69929042540082, -10.698639249886115],
           [142.70684352598676, -10.711795803339966],
           [142.71611324034222, -10.72495178533623],
           [142.72709956846722, -10.731023584101598],
           [142.75731197081097, -10.73574600995243],
           [142.7758513995219, -10.733722122193697],
           [142.78237453184613, -10.725626435663118],
           [142.78409114561566, -10.716181194200363],
           [142.76864162168988, -10.70741034898427],
           [142.75216212950238, -10.702012779571827],
           [142.73877254210004, -10.69492832388833],
           [142.72297969542035, -10.683795273597678],
           [142.71851649961957, -10.68210841218237],
           [142.71130672178754, -10.684470015540445]]],
         [[[142.7154265948344, -10.67266181517629],
           [142.73842921934613, -10.690542625550885],
           [142.75044551573285, -10.696615114060895],
           [142.7593719073344, -10.698639249886115],
           [142.75692496401024, -10.690605797751658],
           [142.75104500430493, -10.683247017647995],
           [142.7379125750649, -10.670553388980409],
           [142.72126214175216, -10.660684947625167]]],
         [[[142.74941554747113, -10.660515759176175],
           [142.75422206602582, -10.66422710551402],
           [142.76005855284222, -10.66523928302297],
           [142.7638351031352, -10.660853156168008],
           [142.75971523008832, -10.655117356450898],
           [142.75216212950238, -10.65343033597171]]],
         [[[142.77791133604535, -10.671312277350697],
           [142.77413478575238, -10.675023491956138],
           [142.7703582354594, -10.681433664993124],
           [142.77276149473676, -10.686494232373235],
           [142.77859798155316, -10.691554715408524],
           [142.78512111387738, -10.694253605193191],
           [142.79473415098676, -10.69459096472833],
           [142.80022731504926, -10.691892077944349],
           [142.78924098692426, -10.672324431281472],
           [142.78409114561566, -10.670300120050687]]],
         [[[142.81224361143597, -10.663552318637432],
           [142.81258693418988, -10.669625346645708],
           [142.81739345274457, -10.68075891630511],
           [142.82254329405316, -10.686494232373235],
           [142.83112636290082, -10.687168968318696],
           [142.8465758868266, -10.684132644756447],
           [142.86030879698285, -10.674011347011447],
           [142.8692351885844, -10.665576674777663],
           [142.874385029893, -10.654105145284746],
           [142.8736983843852, -10.640946094107587],
           [142.87129512510785, -10.631835649065787],
           [142.863398701768, -10.622387492897415],
           [142.84863582335004, -10.619687966023728],
           [142.81567683897504, -10.661865344899406]]],
         [[[142.86133876524457, -10.573117378496846],
           [142.85447231016644, -10.581554604142344],
           [142.8627120562602, -10.589991597691176],
           [142.874385029893, -10.6004531470911],
           [142.8791915484477, -10.614626288861206],
           [142.90837398252972, -10.641283512772599],
           [142.91661372862347, -10.638246731348115],
           [142.92657008848676, -10.630485930370332],
           [142.93171992979535, -10.625086995916933],
           [142.93652644835004, -10.623737247389313],
           [142.94133296690472, -10.615976077633604],
           [142.94167628965863, -10.608889620102808],
           [142.9461394854594, -10.604165223869723],
           [142.93652644835004, -10.589654122407701],
           [142.92760005674847, -10.578517229638278],
           [142.91043391905316, -10.570417417300312],
           [142.89189449034222, -10.567717432360949],
           [142.87301173887738, -10.570417417300312]]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Global coral atlas project - GBR & Torres Strait
// Contact: mitchell.lyons@gmail.com
// Region coordinator: same
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.gbr_torres;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1500, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 1000, //depth in centimetres
  
  //############
  // Clean-up stage selection
  cleanup_stage: 3, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset // asset path

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.pixels).select('depth');
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);
  
  /*// import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  //var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  //Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", true, 0.4);
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone").clip(mid_mask.dissolve());
  
  // the "MID MASK" CLEAN
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });*/
  
  // the "GLOBAL MASK CLEAN" - land (1) and/or deep (2)" ****to be moved to datagen for next region****?
  //var global_reef_mask = ee.Image(region_params.global_reef_mask);
  
  /*man_geo = man_geo.where({
    //test: global_reef_mask.eq(1), //land
    test: global_reef_mask.eq(2), //deep
    //test: global_reef_mask.lt(3), //land + deep
    value: ee.Image(0)
  });*/
  
  /*
  // WAVE clean (un-comment this sectio nbased on whether you have waves or not)
  
  var waves = ee.Image(region_params.waves)
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false)
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  })
  */
  
  
  
  /*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone").clip(not_reef_crest);
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone").clip(not_deep_water);
  
  
  // Reef crest -> Inner reef flat (inside the reef)
  man_geo = man_geo.where({
    test: notreefcrest.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(13)
  });
  
  // Deep water -> Deep lagoon (inside the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(2)),
    value: ee.Image(12)
  });
  
  ##############
  */
  // use the coastal mask to remove everything but TRF
  var coast_mask_i = ee.Image().byte().paint(ee.Feature(coast_mask, {zone: 1}), 'zone').clip(coast_mask);
  /*var wcmc_mask = ee.Image().byte().paint(ee.Feature(wcmc.filterBounds(coast_mask).geometry(),
                                                     {zone: 1}), 'zone')
                                   .unmask(0);*/
                                   
  man_geo = man_geo.where({
    test: coast_mask_i.eq(1)
                      .and(man_geo.neq(16)),
                      //.and(wcmc_mask.eq(0)),
    value: ee.Image(0)
  })
  
  // use reef area mask in torres straight to just leave reef areas mapped
  
  //#################
  
  
  
  // update GBR using deep reef mask
  man_geo = man_geo.where({
    test: gbr30.lt(-20), //deep
    value: ee.Image(2)
  });
  
  //mask to deep and anything removed to this point
  man_geo = man_geo.updateMask(man_geo.gt(2)).selfMask()
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.image);
  Map.addLayer(lowtide_image, {}, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  //Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);
  Map.addLayer(man_geo.updateMask(man_geo.gt(2)), map_palettes.geo, 'Geo clean stage 3 - no DW', false);
  Map.addLayer(gbr30.lt(-20), {}, "Deep reef mask", false)
  //Map.addLayer(global_reef_mask, {}, "Global mask", false)
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(1)), {palette: ['F8FF23'], opacity: 0.4}, 'global_reef_mask - land', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(3)), {palette: ['0000ff'], opacity: 0.4}, 'global_reef_mask - reef', false);
  //Map.addLayer(global_reef_mask.updateMask(global_reef_mask.eq(2)), {palette: ['FF0000'], opacity: 0.4}, 'global_reef_mask - water', false);

  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.Image(region_params.segments).select('depth');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // extra depth cutoff refinement
  man_benthic = man_benthic.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
  
  /*
  **Generic benthic rules**
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });
    
  
  /*// Seagrass on RC or ORF -> Coral/Algae
  // except for these two areas
  var sg_orf = ee.Image().byte().paint(ee.Feature(sg_on_orf, {zone: 1}), "zone").unmask(geo_map.eq(42));
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(14).or(geo_map.eq(15)))
                     .and(sg_orf.eq(0)),
    value: ee.Image(15)
  }); */ 
  
    
  /*
  
  **Manual polygon guided rules**
   - same as per geomorphic clean section
   - add a geometry, paint the layer, create a rule
  
  */
  
  
  // final smooth for missing data due to depth
  man_benthic = man_benthic.focal_mode(2)
                           .selfMask()
  
  
  // Add the manual layer to the map

  var dove_image = ee.Image(region_params.image);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: 'EPSG:4326',
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.pixels).select('depth');
  var low_tide_image = ee.Image(region_params.image);
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min:0, max:3000}, sensor_params.sname + ' low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geo clean stage 1', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
  // 3. Object-based re-classificaiton and cleaning
  
  /* OUTPUT EXTENT
    - to the mapping extent just so it doesn't balloon out
    - to the 'reef boundary' extent for noise/deep removal
  */  
  var class_extent_mask = geo_map.gt(0);
  
  /*
  
  ########
  Initial small object clean
   - this was originally at the end, but we needed to massively reduce the number of objects to 
     iterate through in the OBIA cleaning, so this happens first now
   - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
   
   - includes a possible special case for:
        - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
        - benthic to allow breaking waves (temporal class) to grow into surrounding class
  ########
  
  */
  
  // ##############################################################################################
  // START OF CLEAN 1
  // ##############################################################################################
  
  if (vars.geomorphic && !vars.obia_2nd_pass) {
    
    // shallow lagoon > 5m == deep lagoon
    geo_map = geo_map.where({
      test: geo_map.eq(11)
                    .and(depth.gt(vars.shallowlag_depth_cutoff)),
      value: ee.Image(12)
    });
    
    // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
    geo_map = geo_map.where({
      test: depth.gt(vars.geo_depth_cutoff),
      value: ee.Image(2)
    });
    
    // make a smooth map with masked area as a value - *** Change to ee.kernal*** see reef mask in clean 3
    var smooth_map = geo_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 2
                        });
    
    // replace small objects with smooth underneath
    var clean_map = geo_map.where({
      test: geo_map.connectedPixelCount(vars.small_object_geo, false).lt(vars.small_object_geo), 
      value: smooth_map
    }).updateMask(class_extent_mask);
    
    // display distance to land mask for assessing cut-off distances
    var distToLand = ee.Image(region_params.distToLand);
    Map.addLayer(distToLand.lte(vars.dist_to_land_RC), {}, 'Dist to land (RC to TRF): ' + vars.dist_to_land_RC + 'm', false);
    Map.addLayer(distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF), {}, 'Dist to land (TRF to ORF): ' + vars.dist_to_land_ORF + 'm', false);

    // reef crest close to land -> TRF
    clean_map = clean_map.where({
      test: distToLand.lte(vars.dist_to_land_RC)
                      .and(clean_map.eq(15)),
      value: ee.Image(16)
      });
    
    // TRF outside of specified distance from land -> ORF
    clean_map = clean_map.where({
      test: distToLand.unmask(100000, false).gt(vars.dist_to_land_ORF)
                       .and(clean_map.eq(16)),
      value: ee.Image(14)
    });
  }
  
  if (!vars.geomorphic && vars.cleanup_stage == 1) {
    
    // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
    var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
    //replace small objects with smooth underneath
    var clean_map = benthic_map.where({
      test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
      value: smooth_map
    }).updateMask(class_extent_mask);
    
  }
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    } else {
      
      if (vars.cleanup_stage == 1) {
        // BENTHIC CLEAN-UP RULES
        
        /*// reclaim shallow no data to surrounding class
        var smooth_map = clean_map
                            .focal_mode({
                              radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                              kernelType: 'circle', units: 'pixels', iterations: 2
                            });
        
        var clean_map = clean_map.unmask(0).where({
          test: geo_map.gt(2).and(clean_map.eq(0)), 
          value: smooth_map
        }).selfMask();*/
        
        // cut benthic off to < 10 - 15 m
        clean_map = clean_map.where({
          test: depth.gt(vars.benthic_depth_cutoff),
          value: ee.Image(0)
        });
        
        // Deep (or land or missing) in geo == masked from benthic
        clean_map = clean_map.where({
          test: geo_map.unmask(0).lte(2),
          value: ee.Image(0)
        });
        
      }
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }

  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend
