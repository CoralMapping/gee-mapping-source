/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var map_centre = /* color: #0b4a8b */ee.Geometry.Point([145.73990507280234, -16.42257219756514]),
    map_classification = ee.Image("users/mitchest/gbr_reefs/reef_map_eg"),
    test_area = /* color: #d63000 */ee.Geometry.Polygon(
        [[[145.73353759031693, -16.417399364534486],
          [145.73055497389237, -16.425817549114285],
          [145.74066153746048, -16.432033187347795],
          [145.74205628614823, -16.42345061473957]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// ###### minimal reproducable example to help develop object-based relationship rules
// mitchell.lyons@gmail.com

/*
The goal here is to develop a method to reclassify objects based on their neighbouring map classes, i.e.
    1. define an object as a group of connected pixels of a particular map class
    2. then determine the relative border to that object for the surrounding mapping classes
    3. if some conditions are met, reassign that object
          e.g. if object of class A is 100% surrounded by class B, then assign that object to class B
          e.g. if object of class C is >70% surrounded by class D, then assign that object to class C
*/

Map.centerObject(map_centre, 14) // zoom level 14 is ~10m/px
map_classification = map_classification.toUint8()

/*
A crude example of this is to find small objects, and replace with smoothed raster underneath,
but there's lots of classes that a quite small or thin, that shouldn't be removed,
and contextual information is an important underlying premise of OBIA
*/
var smooth_map = map_classification
                    .focal_mode({
                      radius: 10, kernelType: 'octagon', units: 'pixels', iterations: 1
                    })
                    .mask(map_classification.gte(1))

var crude_object_removal = map_classification
                              .updateMask(map_classification.connectedPixelCount(50, false).gte(50))
                              .unmask(smooth_map)


/*
Another option is to target specific classes, e.g.
 - Target class 15 (reef rim, brown colour) and 14 (outer reef flat, orange)
 - Find objects of a certain size, and replace them with what's underneath (that's not the target class)

BUT, this might get onerous, and sequentially doing this may not always make sense,
and sometimes quite large areas can be wrong and need re-assigning
and sometimes small areas of a class are actually ok if they're not sourrounded by particular classes,
  e.g. small areas of class 15 surrounded by class 13/14 (orange/pale yellow) is not OK,
  but it is OK if it borders class 21/22 (purples)
*/

var smooth_map_15 = map_classification.mask(map_classification.neq(15))
                         .focal_mode({
                           radius: 20, kernelType: 'circle', units: 'pixels', iterations: 1
                         })
                         .mask(map_classification.gte(1))
var smooth_map_14 = map_classification.mask(map_classification.neq(14))
                         .focal_mode({
                           radius: 20, kernelType: 'circle', units: 'pixels', iterations: 1
                         })
                         .mask(map_classification.gte(1))

var limit_size_15 = map_classification
                         .updateMask(map_classification.gt(0)
                                        .subtract(map_classification.eq(15).selfMask()
                                                    .connectedPixelCount(300, false).lt(300).unmask(0)
                                                  ) // clunky, sure there's a simpler way...
                                     )
                         .unmask(smooth_map_15)
                         
var limit_size_14 = limit_size_15
                        .updateMask(map_classification.gt(0)
                                        .subtract(map_classification.eq(14).selfMask()
                                                    .connectedPixelCount(300, false).lt(300).unmask(0)
                                                  ) // clunky, sure there's a simpler way...
                                     )
                         .unmask(smooth_map_14)


/*
Another option that similarly targets classes, but is based on border complexity rather than size
  - Calculate distinct values in 1 pixel square kernel
  - Calculate the max value within each class object
  - Replace complex objects with smoothed map (that's not target class) underneath

This approach is at least less reliant on size, but still ignores class-based logic,
and probably needs to have sequential reductions for the complexity to make sense...?
*/

// for class 15
var border_pixels = map_classification.reduceNeighborhood({
  reducer: ee.Reducer.countDistinct(),
  kernel: ee.Kernel.square(1)
})

var neighbour_pixels = map_classification.rename('classes').addBands(border_pixels)
                            .reduceConnectedComponents(ee.Reducer.max(), 'classes', 2000)

var border_compl_15 = map_classification
                         .updateMask(map_classification.gt(0)
                                        .subtract(
                                          map_classification.eq(15).and(neighbour_pixels.lte(3))
                                          .unmask(0)
                                         )
                                     )
                         .unmask(smooth_map_15)

// now filter out small class 14's with this input
var complex15_size14 = border_compl_15
                        .updateMask(map_classification.gt(0)
                                        .subtract(border_compl_15.eq(14).selfMask()
                                                    .connectedPixelCount(300, false).lt(300).unmask(0)
                                                  )
                                     )
                         .unmask(smooth_map_14)


/*
Another option is to vectorise, .map over the feature collection with a function that
  - buffers object by ~1px and takes the .difference() to get just the new buffer area
  - reduce the map classes within that new area with .frequencyHistogram() and convert to % border
  - finally, either stay in features or paint some raster layers from the properties
  
This is the best solution in terms of the goal - but it appears to be horribly slow...
*/

var map_fc = map_classification.reduceToVectors({
  scale: 10, 
  eightConnected: false,
  bestEffort: true, 
  maxPixels: 1e13,
  tileScale: 1
})


var set_neighbour_properties = function(f) {
  // make the 1px buffer
  var diff = f.buffer(10).difference(f, ee.ErrorMargin(0.5))
  // reduce the classes in the buffer zone
  var diff_classes = ee.Dictionary(
    map_classification.unmask(ee.Image(0)).reduceRegion({
      reducer: ee.Reducer.frequencyHistogram(),
      geometry: diff.geometry(),
      scale: 10
    }).get('classification')
  )
  // calculate the percentages
  var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0])
  var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())})
  
  // NOW we can try to do the class logic right here, or we can return the neighbour % and do image logic later
  
  /*
  
  TODO: figure out client vs. server side logic below
    - i would think class_num.eq(15) is correct, but I can't get it to work?
  
  // define ee objects for the classes
  var class_num = ee.Number(f.get('label'))
  var nb_14 = ee.Number(diff_percs.get('14')) // ORF
  var nb_13 = ee.Number(diff_percs.get('13')) // IRF
  
  // reef rim clean
  if (class_num == 15) { // RR
    if (nb_14 > 30) {
      return(f.set({out_class: 14}))
    }
  } else {   // if no hits on class logic, keep same class
    return(f.set({out_class: class_num}))
  }
  */
  
  // this is the 'return % and image logic later option
  // maybe this is more efficient, can use where() after, then only that gets calc'd and painted?
  
  return(f.set(diff_percs))
}

var map_fc_neighbours = map_fc.filterBounds(test_area).map(set_neighbour_properties)

//print(map_fc_neighbours.limit(5))
//Map.addLayer(map_fc_neighbours, {}, "Neighbour features", true)
//print("e.g. Border % for first feature", map_fc_neighbours.first().toDictionary())

// Now we paint the desired properties to an image, so we can perform the logic
var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').rename('nb15') //RR
var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').rename('nb14') //ORF
var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').rename('nb13') //IRF

// RR surrounded by ORF
var map_classification_clean = map_classification.where({
  test: map_classification.eq(15).and(nb14.gt(50)),
  value: ee.Image(14)
})

// RR surrounded by ORF
var map_classification_clean = map_classification.where({
  test: map_classification.eq(15).and(nb14.gt(50)),
  value: ee.Image(14)
})

print(map_classification_clean)


/*
Now display it - a colour palette to make it a bit nicer to look at (also gives the raster value keys)
*/
var geo_pal = {
  palette: [  // the benthic classificaiton palette (NB in raster class value order)
    '238b45', // 1 =  Land
    '08306b', // 2 =  Deep
    'ffffff', // 3 =  place-holder
    'ffffff', // 4 =  place-holder
    'ffffff', // 5 =  place-holder
    'ffffff', // 6 =  place-holder
    'ffffff', // 7 =  place-holder
    'ffffff', // 8 =  place-holder
    'ffffff', // 9 =  place-holder
    'ffffff', // 10 = place-holder
    '9ecae1', // 11 = Shallow Lagoon
    '2171b5', // 12 = Deep lagoon
    'ffffd4', // 13 = Inner Reef Flat
    'fe9929', // 14 = Outer Reef Flat
    '993404', // 15 = Reef Rim
    'ffffff', // 16 = place-holder
    'ffffff', // 17 = place-holder
    'ffffff', // 18 = place-holder
    'ffffff', // 19 = place-holder
    'ffffff', // 20 = place-holder
    '9e9ac8', // 21 = Slope Sheltered
    '807dba', // 22 = Slope Exposed
    'bdbdbd', // 23 = Plateau
    '02818a', // 24 = Open Complex Lagoon
    'd9d9d9', // 25 = Patch Reef
    '0570b0', // 26 = Small Reef
    'ffffff', // 27 = place-holder
    'ffffff', // 28 = place-holder
    'ffffff', // 29 = place-holder
    'ffffff'  // 30 = place-holder
  ],
  min: 1, max: 30
}

Map.addLayer(map_classification, geo_pal, 'Map classification', true)
Map.addLayer(crude_object_removal, geo_pal, 'Crude map smooth', false)
Map.addLayer(limit_size_15, geo_pal, 'Removed small class 15 objects', false)
Map.addLayer(limit_size_14, geo_pal, 'Removed small class 14 & 15 objects', false)
Map.addLayer(border_compl_15, geo_pal, 'Removed class 15 w/ complex borders', false)
Map.addLayer(complex15_size14, geo_pal, 'Removed class 15 (via complexity) & 14 (via size)', false)

Map.addLayer(map_classification_clean.reproject(ee.Projection('EPSG:4326').atScale(10)), geo_pal, 'cleaned map', false)

