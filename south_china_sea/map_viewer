/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var centre_map = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Point([113.12980459536129, 10.07897594189757]),
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    region_wcmcBound = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[140.23089908705762, -8.585320339637319],
          [140.89007877455762, -13.158609752389577],
          [142.47211002455762, -13.628858870481562],
          [144.53753971205762, -15.796437236299633],
          [145.54828189955762, -19.232281959787983],
          [150.77777408705762, -24.650968807059012],
          [153.94183658705762, -24.850510653508582],
          [153.63421939955762, -20.92445805796405],
          [147.70160221205762, -16.68245796426936],
          [144.88910221205762, -12.5159099321673],
          [147.61371158705762, -9.496696412689664],
          [147.52582096205762, -7.671750406266707],
          [142.73578189955762, -6.494303270145306]]]),
    region_extent = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[109.30104209981322, 9.572733439453838],
          [108.90553428731322, 8.139867122952825],
          [108.90553428731322, 6.832774773169177],
          [109.96022178731322, 5.69703919031537],
          [111.48732139668822, 4.778050739031632],
          [112.89357139668822, 4.0989452089864375],
          [114.84903502446073, 5.707677368754771],
          [116.33229209981322, 7.704609207094449],
          [118.66139366231322, 11.258295579058515],
          [119.40846397481322, 13.874493202886292],
          [119.23268272481322, 17.21860632391412],
          [120.02369834981322, 18.723402312806023],
          [120.0718248316957, 20.16901957842534],
          [119.01295616231322, 21.324315501839468],
          [116.37623741231322, 22.05930903717677],
          [113.82740928731322, 21.037479993942952],
          [112.02565147481322, 19.180594705188373],
          [109.31202842793822, 17.082134810827352],
          [109.82838584981322, 14.556083881197564],
          [110.61940147481322, 13.148104334997829],
          [110.54151244669319, 11.95069096489355],
          [110.09205772481322, 11.161305021073288],
          [109.69654991231322, 10.265343751849265]]]),
    notReef_mask = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[143.2229538713317, -8.886967697283483],
          [143.92856732175235, -8.95493207809679],
          [144.5012345369818, -9.48111085346804],
          [146.1285807904934, -8.952134996026112],
          [146.53173120922528, -8.71297369861281],
          [146.62422523349736, -8.511658987448726],
          [146.657201957465, -7.973500391071557],
          [144.7457486757348, -7.0367968175692495],
          [142.41680859666195, -7.074938169820303],
          [141.47755635910474, -8.065901325183084],
          [140.71762530131753, -8.731764730857527],
          [140.42803805758254, -9.50003802285269],
          [140.74044816560792, -10.003208601905198],
          [141.41769325669938, -10.218984405492748],
          [141.35697464880369, -9.70448012349473],
          [141.4653388045741, -9.467319977772028],
          [142.07352381219226, -9.191356735223884],
          [142.25819766519015, -9.162764771128106],
          [142.53406045235698, -9.247924055465315]]]),
    mid_mask = /* color: #0bd638 */ee.Geometry.MultiPolygon(
        [[[[115.17651664356043, 8.402836297491838],
           [115.28843986133387, 8.37566436932431],
           [115.29187308887293, 8.332864737254019],
           [115.09411918262293, 8.349849280024726],
           [114.83456718066981, 8.316558882350455],
           [114.46134953380096, 8.329163955071566],
           [114.47545158008387, 8.203078596701186],
           [114.68420111048422, 8.205493488476943],
           [114.82152091602137, 8.160260225617671],
           [114.80298148731043, 8.095004367675564],
           [114.69380485156825, 8.025658436006724],
           [114.636126628912, 8.078008916162267],
           [114.57432853320887, 8.111319326588468],
           [114.54136954883387, 8.10452150742911],
           [114.47407828906825, 8.05829329607659],
           [114.471331707037, 7.971941193370375],
           [114.51321708301356, 7.841358582979868],
           [114.41022025684168, 7.786937023290031],
           [115.09343253711512, 7.7971416057024205],
           [115.51640616992762, 7.884210553827377],
           [115.5754576835995, 8.418459294707244],
           [115.504046550787, 8.545457554548172],
           [115.25067435840418, 8.571938514006217],
           [115.08175956348231, 8.532555907691814],
           [115.02957450488856, 8.43679853040362],
           [115.06322013477137, 8.362077693349365],
           [115.13463126758387, 8.372267744771223],
           [115.16209708789637, 8.3946849186222],
           [115.16827689746668, 8.400798468827716]]],
         [[[113.67843439972535, 8.930080354083357],
           [113.63448908722535, 8.930080354083357],
           [113.63483145917667, 8.958568409618373],
           [113.66538813507691, 8.97484687561668],
           [113.83292963898316, 9.119282838066061],
           [113.8020305911316, 9.430332400701051],
           [113.47038081085816, 9.404591537893866],
           [113.47999384796753, 8.894127500116833],
           [113.62281611359253, 8.848672614590857],
           [113.68186762726441, 8.908373393666169]]],
         [[[113.27410241149427, 8.139783257876381],
           [113.28783532165052, 8.176147050476937],
           [113.30371399901868, 8.195007338832315],
           [113.34697266601087, 8.270439531869505],
           [113.36139222167493, 8.292862541562778],
           [113.40275900582274, 8.349163779866995],
           [113.40259095214368, 8.429411312022575],
           [113.28311463378431, 8.430090539249722],
           [112.88760682128431, 7.933943194860572],
           [113.00914307616712, 7.756406143921258],
           [113.52824708007337, 8.172578787408272],
           [113.4911682226515, 8.320040232206747],
           [113.4142639257765, 8.325475544310624],
           [113.36486657282296, 8.286322426153264],
           [113.36388131164075, 8.26959015034561],
           [113.35814044283394, 8.236600504204747],
           [113.3523143266522, 8.21804988129634],
           [113.34923514959112, 8.207738979060032],
           [113.34461121186305, 8.198277554993858],
           [113.33796044372083, 8.189655185609382],
           [113.33366879536587, 8.181414436654618],
           [113.32645913146497, 8.167906013702304],
           [113.30731843489274, 8.146028334608827],
           [113.28912278197767, 8.127462999321267],
           [113.27749190467904, 8.117224168228704],
           [113.26706318347011, 8.103670978251792],
           [113.24740906737806, 8.084806495724271],
           [113.24178694073555, 8.078773117641887],
           [113.23513500863429, 8.074099309132288],
           [113.22629471801282, 8.070275061768154],
           [113.22187447938903, 8.069892594769934],
           [113.2212307660259, 8.07426902050046],
           [113.21856995604993, 8.080812527995954],
           [113.22547895133006, 8.082002282909496],
           [113.23530645455106, 8.093559142213943],
           [113.24213017450523, 8.099294961619169],
           [113.24706574462415, 8.102141556624177],
           [113.25341676182003, 8.110086392219019],
           [113.2547900334572, 8.11558829442508],
           [113.26157072075084, 8.121568143249188],
           [113.26955338500501, 8.130012049392551]]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Coral atlas mapping project - South China Sea
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Chris Roelfsema
// Description:
// Viewing script for looking at reefs and classifications for each region. 
// From this region Timor Sea onwards the map_viewer script is going to be used from the very beginning
// in the workflow 


// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove ;      //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.south_china_sea;       //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################



// Choose which layers will be shown in the map viewer
var vars = {
  raw: true, // set to true if you want to view the raw classifications for benthic and geo
  geo_cleanup_stage: 2, // set to 0, 1, 2 or 3 - this controls the display of the geo clean stages (0 = cleanup not ready)
  benthic_cleanup_stage: 0, // set to 0, 1 or 2 - this controls the display of the benthic clean stages (0 = cleanup not ready)
};

// choose where to centre the map (link this dynamically to map app?)
Map.centerObject(centre_map, 6);

// Add low-tide base map to viewer
// var low_tide_image = ee.Image(region_params.pixels);
// Map.addLayer(low_tide_image, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + " from stack", false); // image data

//print (region_params.image[0])
var low_tide_image_dove = ee.Image(region_params.image);
Map.addLayer(low_tide_image_dove, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + ' low tide', false); // image data


var wcmc=wcmc.filterBounds(region_wcmcBound)
Map.addLayer(wcmc, {color:'#ffff00'}, "WCMC layer", false)



// Load the raw classifications
if (vars.raw) {
// geo raw (test if more than one map exists for the region)
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0, false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }

  // benthic raw (test if more than one map exists for the region)
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
    var benthic_map_raw = ee.Image(region_params.benthic_map[0]).unmask(0, false)
                     .add(ee.Image(region_params.benthic_map[1]).unmask(0, false))
                     .selfMask();
  } else {
      var benthic_map_raw = ee.Image(region_params.benthic_map);
  }

  // Add the raw region classification to the viewer
  Map.addLayer(geo_map_raw, map_palettes.geo, 'Geomorphic RAW', false);
  Map.addLayer(benthic_map_raw.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW', false);
}

// Add geo clean stage 1 to the viewer
if (vars.geo_cleanup_stage == 1||vars.geo_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'Geomorphic - stage 1 clean', false);
 // Map.addLayer(ee.Image(region_params.geo_map_clean1), map_palettes.geo, 'timor_geo_clean1_10m_5m', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.geo_cleanup_stage == 2||vars.geo_cleanup_stage == 3) {
  Map.addLayer(ee.Image(region_params.geo_map_clean2), map_palettes.geo, 'Geomorphic - stage 2 clean', false);
 
}

// Add geo clean stage 3 to the viewer
if (vars.geo_cleanup_stage == 3) {
  var geo_map_clean3 = ee.Image(region_params.geo_map_clean3)
  Map.addLayer(geo_map_clean3.updateMask(geo_map_clean3.gt(2)), map_palettes.geo, 'Geomorphic - stage 3 clean', true);
}

// Add benthic clean stage 1 to the viewer
if (vars.benthic_cleanup_stage == 1||vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean1), map_palettes.benthic, 'Benthic - stage 1 clean', false);
  }

// Add geo clean stage 2 to the viewer
if (vars.benthic_cleanup_stage == 2) {
  Map.addLayer(ee.Image(region_params.benthic_map_clean2), map_palettes.benthic, 'Benthic - stage 2 clean', false);
}

// Geo Training Data - Needs more work + add flag to show
var geo_train = ee.FeatureCollection(region_params.geo_train_library);

var geo_buff = function(feature) {
  return feature.buffer(20);   // substitute in your value of Z here
};

var geo_train_buff = geo_train.map(geo_buff)

// Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// Paint the interior of the polygons with different colors.
var geo_fill = empty.paint({
  featureCollection: geo_train_buff,
  color: 'class_num',
});

Map.addLayer(geo_fill, map_palettes.geo, 'Geo Training Data', false);



////////// UI(user interface) SET UP //////////

//Generate title
var title = ui.Label({
  value: 'Coral Atlas map classes',
  style: {fontWeight: 'bold', fontSize: '14px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
pkg_vis.add_lgds([title, geo_legend, benthic_legend]);//, mask_legend])
// generate the legend



////////// MASK EXPORTS //////////


Export.table.toAsset({
  collection: ee.FeatureCollection(region_extent),
  description: "region_extent_export",
  assetId: region_params.asset + 'in_out/' + region_params.sname + '_extent'
})

/*Export.table.toAsset({
  collection: ee.FeatureCollection(notReef_mask),
  description: "not_reef_mask_export",
  assetId: region_params.asset + 'in_out/' +  region_params.sname + '_notreef'
})*/

/*Export.table.toAsset({
  collection: ee.FeatureCollection(mid_mask),
  description: "mid_mask_export",
  assetId: region_params.asset + 'in_out/' +  region_params.sname + '_midmask'
})*/