/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var image2 = ee.Image("projects/coral_atlas/coral_sea/in_out/cosea_geo_clean2"),
    image = ee.Image("projects/coral_atlas/reefMask/global_reef_mask_combined"),
    region_extent = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[145.7676198808963, -12.820106714000637],
          [145.7676198808963, -14.01696049103867],
          [147.8330495683963, -18.070409960840795],
          [149.1074636308963, -18.945520797482],
          [150.7334401933963, -19.27770549892732],
          [153.3701589433963, -22.723246712582423],
          [155.6553151933963, -24.174572936495597],
          [156.7539480058963, -23.49121254904719],
          [155.8750417558963, -21.17442659810466],
          [160.769416846467, -22.015919395389524],
          [159.65433863089632, -18.40431226291197],
          [152.6670339433963, -18.070409960840795],
          [152.4473073808963, -16.222853198265746],
          [151.0850026933963, -16.47586277302255],
          [150.0742605058963, -15.122775649525506],
          [147.8769948808963, -14.783118309436277],
          [147.0420339433963, -13.162670007978479]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
//esting morphological rules for COS_export intermediate


// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');
var pkg_vis = require('users/mitchest/global_reefs:Modules/pkg_vis');
var param_module = require('users/mitchest/global_reefs:Modules/reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.coral_sea;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################



var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF - not used for Indo
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1200, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 750, //depth in centimetres
};


// the "REEF MASK" CLEAN

var man_geo = ee.Image(region_params.geo_map_clean2);

  
  // Define a kernel for reef mask Morphological Operations
  var kernel_rm = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create reef mask to clean areas inside the reef - Perform an dilation of deepwater
  var reef_mask = man_geo.eq(2)
            .focal_max({kernel: kernel_rm, iterations: 2});
  var global_reef_mask = ee.Image(region_params.global_reef_mask);
  

  // Reef crest, slope, sheltered slope and BRS(within reef mask) -> Inner reef flat
  man_geo = man_geo.where({
    test: reef_mask.eq(0)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(24))),
    value: ee.Image(13)
  });
  

// the "DEEP WATER" CLEAN
  
  // Define a kernel for deep water Morphological Operations
  var kernel_dw = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
  var deepwater = man_geo.eq(2)
            .focal_max({kernel: kernel_dw, iterations: 2})
            .focal_min({kernel: kernel_dw, iterations: 2});
    
  
    // Deep lagoon (outside reef mask and global mask) -> deepwater 
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(12)),
                    //.and(global_reef_mask.eq(2)),
    value: ee.Image(2)
  });
  
  
  // Reef classes in deepwater -> deepwater
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(23)).or(man_geo.eq(24)).or(man_geo.eq(25))),
    value: ee.Image(2)
  });
   

  
  
  //show the maps
var map_geo1 = ee.Image(region_params.geo_map_clean1);
var map_geo2 = ee.Image(region_params.geo_map_clean2);

Map.addLayer(map_geo1, map_palettes.geo, 'Geomorphic clean - stage 1', false);
Map.addLayer(map_geo2, map_palettes.geo, 'Geomorphic clean - stage 2', false);
Map.addLayer(man_geo, map_palettes.geo, 'Geomorphic clean2_MorfologicalCleanUp', false);


Export.image.toAsset({
      image: man_geo,
      description: 'geo_map_morphologic',
      region: region_extent,
      scale: 5,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });


