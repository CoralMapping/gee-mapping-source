/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var geo_east = ee.Image("projects/coral_atlas/Indonesia/in_out/indo_geo_clean3_east_RC"),
    geo_west = ee.Image("projects/coral_atlas/Indonesia/in_out/indo_geo_clean3_west_RC"),
    global_mask = ee.Image("projects/coral_atlas/reefMask/global_reef_mask_combined"),
    land_dist = ee.Image("projects/coral_atlas/global_datasets/ls8_global_distToLand"),
    region_west = ee.FeatureCollection("projects/coral_atlas/Indonesia/in_out/indo_west"),
    region_east = ee.FeatureCollection("projects/coral_atlas/Indonesia/in_out/indo_east"),
    gebco = ee.Image("projects/coral_atlas/global_datasets/GEBCO_RN5136"),
    image = ee.Image("projects/coral_atlas/Indonesia/in_out/indo_pixels"),
    coast_mask = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[95.68434914282503, 4.6443936703698565],
           [95.60195168188753, 4.49654991375642],
           [96.40944679907503, 3.586962182619043],
           [96.81044777563753, 3.5595497580879365],
           [97.46413429907503, 2.731338862303493],
           [97.59597023657503, 2.4844026814294002],
           [97.65090187720003, 2.2538871518293764],
           [97.73329933813753, 2.0617628314845424],
           [97.94203957251253, 2.045293922711979],
           [98.26064308813753, 1.8915761373264224],
           [98.40895851782503, 1.600573936283739],
           [99.11208351782503, 0.12861407616818563],
           [99.58998879126253, -0.08012602407837356],
           [100.22170265845003, -0.8766006386167425],
           [100.49636086157503, -1.4477698128538958],
           [100.82595070532503, -2.424982795656408],
           [101.43033024579157, -1.8374783599009088],
           [101.47414406470003, -0.7447779267457745],
           [96.10182961157503, 4.81957569910946]]],
         [[[103.15413614113184, 1.1374601834818232],
           [103.28597207863184, 0.3355310356492903],
           [104.09896035988184, -1.0541780728182062],
           [105.27999063331934, -0.5268863782068256],
           [105.02181192238184, 1.3241845865369397],
           [103.14314981300684, 1.3022177014178975]]],
         [[[103.07523090567506, -4.471365205379527],
           [102.97635395255006, -4.66849032073432],
           [104.59683735098756, -6.090385482191501],
           [105.26700336661256, -6.221461191713095],
           [105.65152485098756, -6.407095675744932],
           [105.67899067130006, -6.505345545173591],
           [105.79984028067506, -6.729064758533402],
           [107.95316059317506, -6.259685481076852],
           [107.83780414786256, -5.915568204459255],
           [106.98636371817506, -5.828138733189477],
           [106.65677387442506, -5.8937121245122],
           [106.51944477286256, -5.8937121245122],
           [106.34366352286256, -5.844532802570443],
           [106.17886860098756, -5.833603476250957],
           [105.73392231192506, -5.418134838774246],
           [104.36612446036256, -4.991435687651871]]],
         [[[110.5297434743257, -6.248764540213973],
           [110.5791819508882, -6.78906959858144],
           [113.8915598805757, -7.127136922459226],
           [114.0563548024507, -7.208890400213366],
           [114.2870676930757, -6.963586365693529],
           [114.2376292165132, -6.723609404389728],
           [110.6450999196382, -6.232382701670182]]],
         [[[115.59734477165593, -3.6570487898632833],
           [115.74566020134343, -4.216027365273342],
           [116.32244242790593, -4.188635387183429],
           [116.71245707634343, -3.278715214618443],
           [116.42131938103093, -3.1141767334810186],
           [115.74016703728093, -3.5474025836205527]]],
         [[[129.77046149616194, -1.8263709902990561],
           [129.80960029010726, -1.8757836664283802],
           [130.30467170124007, -1.9059796171578958],
           [130.38226264362288, -1.9533312884918907],
           [130.51890509967757, -1.9396063022950698],
           [130.55804389362288, -1.8469597726009905],
           [130.49761908893538, -1.6424343794024578],
           [130.35205024127913, -1.5257492739952738],
           [130.17988841528285, -1.5492692634196865],
           [130.03106068314312, -1.677107358961379],
           [129.84187262897444, -1.7927421397281849],
           [129.76016181354476, -1.8050956674419913]]],
         [[[133.39682232254358, -3.212009101020672],
           [133.44626079910608, -3.738381271989415],
           [134.59707867019983, -4.371250326101217],
           [134.94314800613733, -4.058987292090174],
           [135.05850445144983, -3.8397826527811327],
           [133.60006939285608, -3.220235869647404]]],
         [[[131.05689601145514, -0.8790486583512934],
           [130.9937246247364, -0.9634951305260652],
           [130.9559591218067, -1.3012582542756603],
           [131.06788233958014, -1.3445053904692503],
           [131.2958486481739, -1.131695100607678],
           [131.6151388093067, -0.7712565089151043],
           [131.61170558176764, -0.7053440163363908],
           [131.38305262766607, -0.7177026824318511],
           [131.10221461497076, -0.8522725401817809]]]]),
    geo2 = ee.Image("projects/coral_atlas/Indonesia/in_out/indo_geo_clean2"),
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_filtered"),
    reef_recovery = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[106.52366408514695, -5.554410797574332],
          [106.52847060370163, -5.518871808914062],
          [106.59164199042038, -5.502126738683849],
          [106.5871787946196, -5.4522304747106025],
          [106.47491225409226, -5.405064438884441],
          [106.38118514227585, -5.4816219291551835],
          [106.41620406317429, -5.494266645100354],
          [106.51370772528367, -5.556802768043893]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// A bespoke cleanup script for the beast that is the Indonesian reef region!

//Here I am adapting that for Coral Sea

var map_palettes = require('users/mitchest/global_reefs:Modules/colour_pals');

var export_geom = region_east.merge(region_west).geometry()

// Load the clean 3 outputs ++
Map.addLayer(image, {bands:['b3','b2','b1'],min:0,max:2000}, "Dove image", false)
Map.addLayer(geo2, map_palettes.geo, 'Geo clean stage 2', false);
var geo3 = geo_east.unmask(0, false).add(geo_west.unmask(0, false)).selfMask();
Map.addLayer(geo3, map_palettes.geo, 'Geo clean stage 3', false);

Map.addLayer(gebco.multiply(-1), {min:0, max:300}, "GEBCO", false)

// set the manual clean layer
var man_geo = geo3


/*// add back in missing data in specific locations
var recover = ee.Image().byte().paint(ee.Feature(reef_recovery, {zone: 1}), 'zone').clip(reef_recovery);
man_geo = man_geo.unmask(0).where({
  test: recover.eq(1),
  value: geo2.updateMask(geo2.lte(22))
}).selfMask()*/


/*//the "DEEP WATER" CLEAN

 - ML: when checking this reprojected to 5m (export), it is probably too intensive to do
   at 15 pixels (kernel), but also it's quite patchy so i think we'd really need to 
   dial it up to more than 15 pixels... so getting a bit hectic.
 
// Define a kernel for deep water Morphological Operations
var kernel_dw = ee.Kernel.circle({radius: 15});
// Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
var deepwater = man_geo.eq(2)
          .focal_max({kernel: kernel_dw, iterations: 2})
          .focal_min({kernel: kernel_dw, iterations: 2});
// Deep lagoon (outside reef mask and global mask) -> deepwater 
man_geo = man_geo.where({
  test: deepwater.eq(1)
                  .and(man_geo.eq(12)),
  value: ee.Image(2)
});var
// Reef classes in deepwater -> deepwater
man_geo = man_geo.where({
  test: deepwater.eq(1)
                  .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(24))),
  value: ee.Image(2)
});*/

// use the global reef mask "deep water" to remove just deep lagoon/BRS
var smooth_deep = global_mask.eq(2).focal_max(5)

man_geo = man_geo.where({
  test: smooth_deep.eq(1)
                   .and(man_geo.eq(12).or(man_geo.eq(24))),//.or(man_geo.eq(22)).or(man_geo.eq(24))),
  value: ee.Image(0)
})

// add in distance to land for to deal with non reef flat classes
man_geo = man_geo.where({
  test: smooth_deep.eq(1)
                   .and(land_dist.unmask(50000).gt(2000))
                   .and(man_geo.eq(15).or(man_geo.eq(16)).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(23))),
  value: ee.Image(0)
})

// add in distance to land + GEBCO to deal with reef flat classes
man_geo = man_geo.where({
  test: smooth_deep.eq(1)
                   .and(land_dist.unmask(50000).gt(2000))
                   .and(gebco.lt(-100))
                   .and(man_geo.eq(13).or(man_geo.eq(14))),
  value: ee.Image(0)
})


// use the coastal mask for further removal
var coast_mask_i = ee.Image().byte().paint(ee.Feature(coast_mask, {zone: 1}), 'zone').clip(coast_mask);
var wcmc_mask = ee.Image().byte().paint(ee.Feature(wcmc.filterBounds(coast_mask).geometry(),
                                                   {zone: 1}), 'zone')
                                 .unmask(0);
                                 
man_geo = man_geo.where({
  test: coast_mask_i.eq(1)
                    .and(man_geo.neq(16))
                    .and(wcmc_mask.eq(0)),
  value: ee.Image(0)
})

// update mask to deep and anything removed to this point
man_geo = man_geo.updateMask(man_geo.gt(2)).selfMask()




//Map.addLayer(man_geo.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.geo, 'Geo bespoke clean', false);
Map.addLayer(man_geo, map_palettes.geo, 'Geo bespoke clean', false);

Map.addLayer(wcmc, {}, "UNEP WCMC", false)

// Export
Map.addLayer(export_geom)
Export.image.toAsset({
  image: man_geo,
  description: "indo_cleanX",
  assetId: 'projects/coral_atlas/Indonesia/in_out/indo_geo_clean3x',
  region: export_geom,
  scale: 5,
  crs: 'EPSG:4326',
  maxPixels: 1e13,
  pyramidingPolicy: {'.default': 'mode'}
});
