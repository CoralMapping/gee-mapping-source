/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var Deepmask = ee.Image("projects/coral_atlas/central_indian_ocean/in_out/cio_DeepMask"),
    region_extent = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[70.16383984620248, 13.135866931352913],
          [70.14682558742047, 12.617194359154508],
          [70.2690563075083, 11.807120477151644],
          [70.75799813787245, 10.497269313191726],
          [71.1883486767209, 9.918038419941574],
          [71.47614859713114, 8.090218465993845],
          [71.59908832513908, 5.52591426513123],
          [71.49717465104942, 4.724023756667231],
          [71.63786599252497, 1.9241941877135522],
          [71.79169706752515, -0.00897274020001368],
          [71.76991375572192, -1.3710512046844305],
          [71.49502445725186, -2.765513665803016],
          [71.35011857751672, -3.4180227969815036],
          [70.78266724738901, -4.467873920373559],
          [70.37679876655831, -5.156730459644507],
          [70.0414366086369, -5.673827050931439],
          [69.63155494916931, -6.620623477840547],
          [69.61632242222679, -7.654629654247595],
          [69.88596916257875, -8.325549044857805],
          [70.33702213279423, -8.649621844082038],
          [71.15440380682881, -8.861512281458042],
          [72.50302938219875, -8.730914493557336],
          [73.42866829614745, -8.55743897796769],
          [74.30064119056354, -7.7866094054231425],
          [74.78510906713221, -6.8540012175349405],
          [74.87181187774016, -5.590383988857091],
          [74.71281221914346, -4.718369474096369],
          [74.42252946027796, -3.890078116525247],
          [74.39495159818864, -2.819413619339805],
          [74.80701657465998, 0.26047582105125183],
          [74.97178689803962, 2.752606230303411],
          [74.95623341371372, 3.7796590463055497],
          [73.98795167784473, 8.437740216584354],
          [73.80616705637192, 9.279013186527788],
          [73.88180364769623, 9.530197153338912],
          [74.05559477809774, 9.730752468582905],
          [74.36104571392184, 9.786128362399857],
          [72.93930746651232, 14.377460777937939],
          [72.04231647306855, 14.34492727644073],
          [71.49518330115245, 14.31657896080115],
          [70.94844908898446, 14.180519984144992],
          [70.70783078637048, 14.098023158448601],
          [70.48943631098639, 13.930058399473841]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

//testing morphological rules for WEA intermediate
//testing morphological rules for WEA intermediate


// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.cio;         //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################
/*


var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 500, //distance to land in meters to convert reef crest to TRF - not used for Indo
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1200, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 750, //depth in centimetres
};
*/

// Convert DeepMask image to feature
// first load boundary
var region = ee.Geometry(region_extent);

// Load asset
var Deep = ee.Image(region_params.DeepMask).clip(region_extent);

// Define arbitrary thresholds on the image.
var area = Deep.gt(100).add(Deep.lte(100));
area = area.updateMask(area.neq(0));

// Reduce to a vector
var Vector = area.addBands(Deep).reduceToVectors({
  geometry: region,
  crs:'EPSG:4326',
  scale: 5,
  geometryType: 'polygon',
  eightConnected: false,
  labelProperty: 'DeepImport',
  maxPixels: 1e13,
  reducer: ee.Reducer.allNonZero()
});

//Add it to the map
Map.addLayer(Vector, {palette: '000000'}, "Deep_Import", false);



// the "REEF MASK" CLEAN
/*
var man_geo = ee.Image(region_params.geo_map_clean2);

  
  // Define a kernel for reef mask Morphological Operations
  var kernel_rm = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create reef mask to clean areas inside the reef - Perform an dilation of deepwater
  var reef_mask = man_geo.eq(2)
            .focal_max({kernel: kernel_rm, iterations: 4});
  var global_reef_mask = ee.Image(region_params.global_reef_mask);
  Map.addLayer(reef_mask, {}, "reef mask")
  Map.addLayer(global_reef_mask, {}, " global_reef_mask")

    // Reef crest, (within reef mask) -> outer reef flat
  man_geo = man_geo.where({
    test: reef_mask.eq(0)
                    .and(man_geo.eq(15)),
    value: ee.Image(14)
  });
  
 

  var distToLand = ee.Image(region_params.distToLand);
  
  // reef crest close to land -> ORF - Not need when using .focal masks (reef mask) as this will take care of RC inside the reef
  man_geo = man_geo.where({
    test: distToLand.lte(vars.dist_to_land_RC)
                   .and(man_geo.eq(15)),
     value: ee.Image(14)
   });
    */
  
/*

// the "DEEP WATER" CLEAN
  
  // Define a kernel for deep water Morphological Operations
  var kernel_dw = ee.Kernel.circle({radius: vars.smooth_radius.multiply(5)});

  // Create mask to clean deepwater areas - Perform an dilation of deepwater followed by a erosion
  var deepwater = man_geo.eq(2)
            .focal_max({kernel: kernel_dw, iterations: 2})
            .focal_min({kernel: kernel_dw, iterations: 2});
    
  
    // Deep lagoon (outside reef mask and global mask) -> deepwater 
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(12)),
                    //.and(global_reef_mask.eq(2)),
    value: ee.Image(2)
  });
  
  
  // Reef classes in deepwater -> deepwater
  man_geo = man_geo.where({
    test: deepwater.eq(1)
                    .and(man_geo.eq(15).or(man_geo.eq(21)).or(man_geo.eq(22)).or(man_geo.eq(23)).or(man_geo.eq(24)).or(man_geo.eq(25))),
    value: ee.Image(2)
  });
   


  
  //show the maps
var map_geo1 = ee.Image(region_params.geo_map_clean1);
var map_geo2 = ee.Image(region_params.geo_map_clean2);

Map.addLayer(map_geo1, map_palettes.geo, 'Geomorphic clean - stage 1', false);
Map.addLayer(map_geo2, map_palettes.geo, 'Geomorphic clean - stage 2', false);
//Map.addLayer(man_geo, map_palettes.geo, 'Geomorphic clean2_RC_1xIter', false);


var region_extent=ee.FeatureCollection(region_params.extent_mask)

Export.image.toAsset({
      image: man_geo,
      description: 'geo_map_clean2_distRC_500orfB',
      region: region_extent,
      scale: 5,
      crs: 'EPSG:4326',
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
*/

// Export the FeatureCollection to a KML file.
Export.table.toDrive({
  collection: Vector,
  description:'DeepMask_vector',
  fileFormat: 'SHP',
});

