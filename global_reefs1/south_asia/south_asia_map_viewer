/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var centre_map = 
    /* color: #d63000 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[80.06231110927592, 11.643419782412085],
          [76.32695954677592, 8.37652515056032],
          [80.47979157802592, 4.709806006395633],
          [82.43535798427592, 5.278923660456486],
          [83.16045564052592, 7.462485246017544],
          [81.22686189052592, 10.781297780961276]]]),
    wcmc = ee.FeatureCollection("projects/coral_atlas/global_datasets/wcmc_reefs_2018v4_dissolved"),
    geometry = 
    /* color: #98ff00 */
    /* shown: false */
    ee.Geometry.Polygon(
        [[[78.50225251552592, 4.895917700513378],
          [81.88604157802592, 4.392207430217112],
          [84.21514314052592, 7.1028617733826644],
          [80.21611970302592, 11.2019034008838],
          [76.26104157802592, 8.778471805151488]]]),
    soa_ben_missingNW = ee.Image("projects/coral_atlas/south_asia/in_out/soa_benthic_missingNW_refined"),
    soa_geo_missingNW = ee.Image("projects/coral_atlas/south_asia/in_out/soa_geo_missingNW_refined");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Viewing script for looking at reefs and classifications for each region. 
//region: coral sea
//region coordinator: Rodney Borrego (rodbio2008@gmail.com)

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');

// ###########################################
// SENSOR GENERICS
var sensor_params = param_module.dove  ;      //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.south_asia;       //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// Choose which layers will be shown in the map viewer
var vars = {
  raw: true, // set to true if you want to view the raw classifications for benthic and geo, this flag needs to be true 
             // to use the slider to cut geo raw as well. 
  geo_clean1: true, // set to true if you want to view geo clean 1
  geo_clean2: true, // set to true if you want to view geo clean 2
  geo_clean3: true, // set to true if you want to view geo clean 3
  benthic_clean1: true, // set to true if you want to view benthic clean 1
  benthic_clean2: true, // set to true if you want to view benthic clean 2
  geo_raw_depthCutoff: true, //added functionality to apply cut-offs  to raw geomorphic map based on a depth composite slider (ask RB if its not working)
  Depth_composite : ee.ImageCollection(region_params.pixels).mosaic(),
};


var mapPanel=ui.Map().centerObject(centre_map, 6)

//load image sr
var low_tide_image_dove = ee.Image(region_params.pixels);
var sr_Dove= ui.Map.Layer(low_tide_image_dove, {bands: ['b3','b2','b1'], min: 0, max: 3000}, sensor_params.sname + ' low tide', false); // image data
//UnEp layer
var unepClipped= wcmc.filterBounds(geometry)
var Unep= ui.Map.Layer(unepClipped, {color:'#FFFF33'}, 'UNEP_layer', false)


// Load the raw classifications
if (vars.raw) {
// geo raw (test if more than one map exists for the region)
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0, false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }

  // benthic raw (test if more than one map exists for the region)
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
    var benthic_map_raw = ee.Image(region_params.benthic_map[0]).unmask(0, false)
                  .add(ee.Image(region_params.benthic_map[1]).unmask(0, false))
                     .selfMask();
  } else {
      var benthic_map_raw = ee.Image(region_params.benthic_map);
  }

  // Add the raw region classification to the viewer
var geo_raw= ui.Map.Layer(geo_map_raw, map_palettes.geo, 'Geomorphic RAW', false);
var benthic_raw=ui.Map.Layer(benthic_map_raw.updateMask(geo_map_raw.gt(2)), map_palettes.benthic, 'Benthic RAW', false);

}

//add masks to the viewer

var mid_mask=ui.Map.Layer(ee.FeatureCollection(region_params.midMask), {color:'#800080'},'mid_mask',false)


// Load the clean classifications to the ui viewer
var geo_clean1 = ee.Image(region_params.geo_map_clean1);
var geo_clean2 = ee.Image(region_params.geo_map_clean2);
var geo_clean3 = ee.Image(region_params.geo_map_clean3).selfMask();
var benthic_clean1 = ee.Image(region_params.benthic_map_clean1).selfMask();
var benthic_clean2 = ee.Image(region_params.benthic_map_clean2).selfMask();


var geo1= ui.Map.Layer(geo_clean1, map_palettes.geo, 'Geomorphic clean - stage 1', false);
var geo2=ui.Map.Layer(geo_clean2, map_palettes.geo, 'Geomorphic clean - stage 2', false);
var geo3 = ui.Map.Layer(geo_clean3.updateMask(geo_clean3.gt(2)), map_palettes.geo, 'Geomorphic clean - stage 3', false);
var benthic1= ui.Map.Layer(benthic_clean1, map_palettes.benthic, 'Benthic clean - stage 1', false);
var benthic2= ui.Map.Layer (benthic_clean2, map_palettes.benthic, 'Benthic clean - stage 2', false);
var geo_nw=ui.Map.Layer(soa_geo_missingNW, map_palettes.geo, 'Geomorphic_missing_NW', false)
var ben_nw=ui.Map.Layer(soa_ben_missingNW, map_palettes.benthic, 'Benthic_missing_NW', false)
//load depth composite used to slice geo raw map
var Comp_depth=ee.Image(vars.Depth_composite)
var Comp_depth=Comp_depth.expression( 
'(B1)/100', {
 'B1' :Comp_depth.select('depth') })

 
var imageVisParam = {"opacity":1,"bands":["depth"],"min":0.5704,"max":23.1496,"palette":["ff0ef8","8f348c","ad1ddc","dc19ff"]};
var depthComposite1=ui.Map.Layer(Comp_depth, imageVisParam, 'DepthComposite', false)

//load the ui layers
var layers = mapPanel.layers(); 
   layers.add(sr_Dove)
   layers.add(geo_nw)
   layers.add(ben_nw)
   
if (vars.benthic_clean2) {
    layers.add(benthic2)}
if (vars.benthic_clean1) {
    layers.add(benthic1)}
if (vars.geo_clean1) {
    layers.add(geo1)}   
if (vars.geo_clean2) {
    layers.add(geo2)}    
if (vars.geo_clean3) {  
   layers.add(geo3)}
if (vars.raw){ 
  layers.add(benthic_raw) && layers.add(geo_raw) && layers.add(depthComposite1)} 
  layers.add(Unep)
  layers.add(mid_mask)

 // layers.add(mid_maskCR)
////////// UI SET UP //////////

if(vars.geo_raw_depthCutoff) {
//slider params
var label = ui.Label('DepthComposite_threshold_slider for geo raw:',
               {color: '#0000ff', fontWeight: 'bold', position: 'top-right', backgroundColor:  '#c6c6cc', fontSize: 48}
);

 var slider = ui.Slider({
  min:-2,
  max: 25,
  step: 0.01,
  value: false,
  style: {stretch: 'horizontal', width:'670px', fontWeight:'bold'},

});

slider.setValue(25);



var add_thresh = function(inputDepth, geoCut) {
  
  var outputGeoCut = ui.Map.Layer(geoCut, map_palettes.geo, 'geo_raw_cutBasedOnDepthComposite', false) //basically here is to create the layer than will be resetetet with the callback slider.onChange
  mapPanel.add(outputGeoCut)
  slider.onChange(function(value) {
    var thresholded = geoCut.updateMask(inputDepth.updateMask(inputDepth.lte(value))).selfMask()
    outputGeoCut.setEeObject(thresholded)
    
  })
 
}

//calling the slider function and mask with depth composite


add_thresh(Comp_depth, geo_map_raw)


//putting slider in the panel
var panel1 = ui.Panel({
      widgets: [label,slider],
     layout: ui.Panel.Layout.flow('vertical'),
      style: {position: 'bottom-left',width: '700px', backgroundColor:  '#c6c6cc', height: '90px'
          }
    });
    
mapPanel.widgets().add(panel1)

}

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);

var panel2 = ui.Panel({
     // widgets: [geo_legend, benthic_legend],
      widgets: [geo_legend, benthic_legend],
     layout: ui.Panel.Layout.flow('vertical'),
      style: {position: 'top-left',width: '350px', backgroundColor:  '#c6c6cc', height: '447px'
          }
    });

mapPanel.widgets().add(panel2)

//callig the app
ui.root.clear();
ui.root.add(mapPanel)



