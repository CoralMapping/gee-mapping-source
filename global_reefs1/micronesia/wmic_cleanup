/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var global_not_applied = /* color: #98ff00 */ee.Geometry.MultiPoint(),
    RC_landDist_not_applied = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[131.81525259885308, 2.667368290882042],
                  [132.51288443479058, 4.372456104893255],
                  [132.27118521604058, 4.531277180999651],
                  [130.96930533322808, 3.0184975541332095]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[134.3580800286676, 7.1042837814430415],
                  [134.37249958433165, 7.107690638417656],
                  [134.3755894891168, 7.114163597069858],
                  [134.3635731927301, 7.113482237297729],
                  [134.3580800286676, 7.109734740478645]]]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[134.59271495384885, 8.21307748957062],
                  [134.58722178978635, 8.163463374227785],
                  [134.6558863405676, 8.034301937760919],
                  [134.72455089134885, 8.015264129631634],
                  [134.74652354759885, 8.076453904022506],
                  [134.63254039330198, 8.234144624033856]]]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[139.93662542008903, 8.232755792287188],
                  [140.48594182633903, 8.058748098929417],
                  [140.79355901383903, 9.81143720093744],
                  [139.45322698258903, 10.330653579105554]]]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[142.84951610315667, 6.476047511853036],
                  [149.48525829065667, 6.443297775064691],
                  [150.91348094690667, 7.566424628635445],
                  [152.42959422815667, 8.404161630158022],
                  [152.50649852503167, 8.968895285521304],
                  [144.53940385183228, 9.738765767397842],
                  [142.72665971120728, 6.705456007106516]]]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[151.45836376096756, 7.371289001158086],
                  [151.6259052648738, 7.461167986018072],
                  [151.74538158323318, 7.6381481521389585],
                  [151.8950703039363, 7.605480357080022],
                  [151.97060130979568, 7.461167986018072],
                  [151.97666573166822, 7.348720392525016],
                  [151.99451851487134, 7.260180900722418],
                  [151.92722725510572, 7.189336744876129],
                  [151.87504219651197, 7.1879742486177145],
                  [151.8104975187776, 7.246557887847813],
                  [151.63608955979322, 7.24383323582309],
                  [151.57841133713697, 7.306496053435866],
                  [151.50425362229322, 7.318755144586099],
                  [151.44657539963697, 7.335100075331237],
                  [151.40674996018384, 7.321479341335015],
                  [152.05631661057447, 6.819953254943671],
                  [152.67704414963697, 6.716310485583735],
                  [152.90501045823072, 6.91812046880437],
                  [151.81461739182447, 7.808836678473407],
                  [151.38065743088697, 7.5475290813870375],
                  [151.37516426682447, 7.348720392525016]]]),
            {
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[154.98417305588697, 3.3679872378416107],
                  [157.71976875901197, 5.722451570541001],
                  [156.44535469651197, 7.686368754287952],
                  [154.14921211838697, 8.64335412679583],
                  [152.80888008713697, 5.875473008386261]]]),
            {
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[157.89142930239655, 6.704244534779867],
                  [158.2786973688028, 6.734931327573999],
                  [158.36864793032623, 6.8051626677073305],
                  [158.38032090395905, 6.863112838385419],
                  [158.3590348570846, 6.867544324306227],
                  [158.35422831424734, 6.86549909755875],
                  [158.34667527407623, 6.861067657984299],
                  [158.32470261782623, 6.823571129865972],
                  [158.3068498346231, 6.788798997634655],
                  [158.28831040591217, 6.779935110624624],
                  [158.23131882876373, 6.781298796165968],
                  [158.1969865533731, 6.784026155669439],
                  [158.1468614313028, 6.802435428054463],
                  [158.1084092828653, 6.886290934893722],
                  [158.1029161188028, 6.933325351952949],
                  [158.1468614313028, 6.974221030010744],
                  [158.21758591860748, 7.010342576394381],
                  [158.25329148501373, 7.021928140352687],
                  [158.3119996759317, 6.990919073093987],
                  [158.3343156549356, 6.907422918465479],
                  [158.3453019830606, 6.866521452860252],
                  [158.37311112612701, 6.870952615169137],
                  [158.38547074526764, 6.943208800212902],
                  [158.2563813897989, 7.090413357736471],
                  [157.88696610659576, 7.057705264305598],
                  [157.74277054995514, 7.117668328677203]]]),
            {
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[162.90641281420758, 5.272562004019515],
                  [162.94143173510602, 5.26128018851906],
                  [162.9649493437486, 5.267092058442494],
                  [163.0011698942857, 5.2552973245388195],
                  [163.01541778857282, 5.258887049826765],
                  [163.0418536406236, 5.300423790328648],
                  [163.03721878344587, 5.324694997131524],
                  [163.0308673124986, 5.324694997131524],
                  [163.02846405322126, 5.3228148674081694],
                  [162.8957698088365, 5.29717616203746]]]),
            {
              "system:index": "8"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[159.6821248863637, 6.670618493887415],
                  [160.72994593128558, 6.120628728377381],
                  [160.8137166832387, 6.210741632007117],
                  [159.71645716175433, 6.77154362365958]]]),
            {
              "system:index": "9"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[144.6258829554146, 13.347237415941567],
                  [144.65575203500444, 13.268723112788566],
                  [144.67257484994585, 13.271396358205886],
                  [144.64699730477983, 13.355922539472866],
                  [144.63034615121538, 13.351580016765364]]]),
            {
              "system:index": "10"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[145.12169661386238, 14.097561962607317],
                  [145.15431227548348, 14.088238256818716],
                  [145.30812086923348, 14.141511439643857],
                  [145.29438795907723, 14.203758656024167],
                  [145.19070448739754, 14.208751007791397],
                  [145.10487379892098, 14.14550642590996]]]),
            {
              "system:index": "11"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[137.27143321096122, 8.43569383517332],
                  [137.49939951955497, 8.256339278437904],
                  [137.60239634572685, 8.365048849498981],
                  [137.5996497636956, 8.662485055946542],
                  [137.28379283010185, 8.55793342068816]]]),
            {
              "system:index": "12"
            })]),
    segments = ee.Image("projects/coral_atlas/Micronesia/in_out/wmic_segmentation"),
    segments_sld = ee.Image("projects/coral_atlas/Micronesia/in_out/wmic_segmentation_sld");
/***** End of imports. If edited, may not auto-convert in the playground. *****/

///////////////////////////////
// Global coral atlas project - west Micronesia
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Mitchell Lyons (mitchell.lyons@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICSgeo_depth_cutoff
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.wmic;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: true, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 200, //distance to land in meters to convert reef crest to TRF
  wave_height: 0.6, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1400, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 1000, //depth in centimetres
  lagoon_region: "West Micronesia",
  
  //############
  // Clean-up stage selection
  cleanup_stage: 3, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  // should the global extent + depth cleanup be applied?
  global_extent_clean: true,
  global_depth_thresh: 500, // this is the depth limit for ADDING to the global extent (i.e. 5 = everything <5m will be added to the global extent layer)
  global_land_dist: -1, // [-1 (don't apply) OR +ve distance in meters] WITHIN this distance, the global extent/depth mask will be applied
  global_not_applied: true, // true = EXCLUDE reefs within 'global_not_applied' geometry polygons - mutually exclusive to land distance rule
 
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: false, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset, // asset path
  local_epsg: region_params.epsg

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.ImageCollection([segments_sld.select('depth'),segments.select('depth')]).mosaic();
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);

  // the "GLOBAL MASK" clean
  // currently uses GCRMN extent + bathymetry threhold < vars.global_depth_thresh
  if (vars.global_extent_clean) {
    var blanket_mask = ee.Image([param_module.global_extent_mask.gcrmn]).unmask(0, false)
              .eq(1) // extent according to global extent layer
              .add(depth.lt(vars.global_depth_thresh)) // combine with areas less than depth thrshold
              .eq(0) // get leftovers
              .selfMask().connectedPixelCount(100, false).gte(100).unmask(0, false);
    
    blanket_mask = blanket_mask.where({
      test: blanket_mask.eq(0).connectedPixelCount(100,false).lt(100),
      value: ee.Image(1)
    });
    
    Map.addLayer(blanket_mask.selfMask(), {min:0,max:1}, "Global clean mask", false);
    
    if (vars.global_land_dist > 0) {
      var distToLand = ee.Image(region_params.distToLand);
      man_geo = man_geo.where({
        test: blanket_mask.eq(1)
                          .and(distToLand.lte(vars.global_land_dist)),
        value: ee.Image(0)
      });
    } else if (vars.global_not_applied) {
      var global_not_applied_i = ee.Image().byte().paint(ee.Feature(global_not_applied, {zone: 1}), 'zone').unmask(0, false);
      man_geo = man_geo.where({
        test: blanket_mask.eq(1)
                          .and(global_not_applied_i.eq(0)),
        value: ee.Image(0)
      });
    } else {
      man_geo = man_geo.where({
        test: blanket_mask.eq(1),
        value: ee.Image(0)
      });
    }
  }
  
  // the "MID MASK" CLEAN
  //  - import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", false, 0.4);
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone");
  
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });
  
  
  // the "LAGOONS MASK" CLEAN
  // - import the global lagoon mask from asset
  
  // LAGOON clean stage 1 - clean inside the lagoon extent
  var lagoons_mask = ee.FeatureCollection(region_params.lagoons_mask).filterBounds(region_extent).geometry();
  var lagoons_mask_i = ee.Image().byte().paint(ee.Feature(lagoons_mask,{zone: 1}), "zone");
  Map.addLayer(lagoons_mask, {}, "lagoon mask", false);
  
  var ocean_lagoon_mask = ee.FeatureCollection(region_params.lagoons_mask)
                                    .filterBounds(region_extent).filter(ee.Filter.neq("LagoonType", "ClosedTerrestrial"))
                                    .geometry();
  var ocean_lagoon_mask_i = ee.Image().byte().paint(ee.Feature(ocean_lagoon_mask,{zone: 1}), "zone");
  Map.addLayer(ocean_lagoon_mask, {}, "ocean lagoon mask", false);
  
  // RC within Lagoon -> ORF
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(15)),
    value: ee.Image(14)
  });
  // Reef slope, sheltered slope (within lagoon mask) -> Back Reef Slope
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(21).or(man_geo.eq(22))),
    value: ee.Image(24)
  });
  /*// Plateau within lagoon mask -> Deep
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(23)),
    value: ee.Image(2)
  });*/
  // TRF within oceanic/closed lagoons -> ORF
  man_geo = man_geo.where({
    test: ocean_lagoon_mask_i.eq(1)
                             .and(man_geo.eq(16)),
    value: ee.Image(14)
  });
  

  // LAGOON clean stage 2 - buffer the lagoon mask, and clean inside buffer
  var lagoon_buffered = lagoons_mask.buffer(1000); // buffer 1000 m wide around reef mask
  var reef_band_mask = lagoon_buffered.difference(lagoons_mask);//substract buffered lagoon mask - lagoon mask resulting in band around reef of 1000 m
  var reef_band_mask_i = ee.Image().byte().paint(ee.Feature(reef_band_mask.dissolve(),{zone: 1}), "zone");

  // BRS, DL and SL should not be present on outside of reef on within reef_band_mask_i  -> Reef Slope
  man_geo = man_geo.where({
   test: reef_band_mask_i.eq(1)
                         .and(man_geo.eq(24).or(man_geo.eq(12)).or(man_geo.eq(11))),
    value: ee.Image(22)
  });    
  // IRF or TRF on within reef_band_mask_i  -> ORF as RC would get artefacts
  man_geo = man_geo.where({
    test: reef_band_mask_i.eq(1)
                          .and(man_geo.eq(13).or(man_geo.eq(16))),
    value: ee.Image(14)
  });   
  
  
  // The 'TURBID WATER' clean
  var turbid_mask = ee.FeatureCollection(region_params.turbid_mask).filterBounds(region_extent).geometry();
  var turbid_mask_i = ee.Image().byte().paint(ee.Feature(turbid_mask,{zone: 1}), "zone");
  Map.addLayer(turbid_mask, {}, "turbid mask", false);
  
  // leave only TRF within turbid mask (after changing ORF to TRF)
  man_geo = man_geo.where({
    test: turbid_mask_i.eq(1)
                       .and(man_geo.eq(14)),
    value: ee.Image(16)
  });
  
  man_geo = man_geo.where({
    test: turbid_mask_i.eq(1)
                       .and(man_geo.neq(16)),
    value: ee.Image(2)
  });
  
  
  // The 'HARBOUR & SHIPPING' clean
  var harbour_mask = ee.FeatureCollection(region_params.harbour_mask).filterBounds(region_extent).geometry();
  var harbour_mask_i = ee.Image().byte().paint(ee.Feature(harbour_mask,{zone: 1}), "zone");
  Map.addLayer(harbour_mask, {}, "harbour mask", false);
  
  // remove mapping within harbour mask
  man_geo = man_geo.where({
    test: harbour_mask_i.eq(1)
                        .and(man_geo.gt(2)),
    value: ee.Image(2)
  });
  
  /*// BRS and DL should not be present on outside of a reef -> Reef Slope RULE CHRIS
   man_geo = man_geo.where({
    test: lagoons_mask_i.neq(1) //Requires a mask that reprsent all areas excepth the lagoon mask
                        .and(man_geo.eq(12)),
    value: ee.Image(22)
  }); */
  
  // the 'WAVE' clean (un-comment this sectio nbased on whether you have waves or not)
  var waves = ee.Image(region_params.waves);
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false);
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  });
  
  
  /*// the "DISTANCE TO DEEP WATER" CLEAN
  // use a distance to deepwater to cut out RC/slope
  var dist_to_deep = man_geo.eq(2).fastDistanceTransform(256).sqrt()
                                  .multiply(ee.Image.pixelArea().sqrt())
                                  .uint16()
                                  .selfMask();
  Map.addLayer(dist_to_deep, {}, "distance to deepwater", false);
  
  // reef crest too far from deep water -> ORF
  man_geo = man_geo.where({
    test: man_geo.eq(15)
                 .and(dist_to_deep.gte(300)),
    value: ee.Image(14)
  });
  // reef slope too far from deep wter -> BRS
  man_geo = man_geo.where({
    test: man_geo.eq(21).or(man_geo.eq(22))
                 .and(dist_to_deep.gte(1500)),
    value: ee.Image(24)
  });*/
  
  /*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone");
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone");
  
  
  // Reef crest -> Inner reef flat (inside the reef)
  man_geo = man_geo.where({
    test: notreefcrest.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(13)
  });
  
  // Deep water -> Deep lagoon (inside the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(2)),
    value: ee.Image(12)
  });
  
  ##############
  */
  
  /*
  
  /*
  // TRF -> ORF within manual mask
  var trf_to_orf_i = ee.Image().byte().paint(ee.Feature(trf_to_orf,{zone: 1}), "zone");
  man_geo = man_geo.where({
    test: trf_to_orf_i.eq(1)
                      .and(man_geo.eq(16)),
    value: ee.Image(14)
  });*/
  
  // attempt to gain back missing reef crest
  var reef_crest_smooth = man_geo.eq(15).selfMask().focalMode(10);
  Map.addLayer(reef_crest_smooth, {colour: 'red'}, "reef crest smooth", false);
  //var reef_crest_holes = man_geo.gt(2).unmask(0,false).connectedComponents(ee.Kernel.plus(1), 512);
  //Map.addLayer(reef_crest_holes, {}, "reef crest holes", false);
  var distToLand = ee.Image(region_params.distToLand);
  
  man_geo = man_geo.unmask(0, false).where({
    test: reef_crest_smooth.eq(1)
                           //.and(reef_crest_holes.select('labels').gt(1))
                           .and(man_geo.unmask(0, false).eq(0)),
    value: ee.Image(15)
  }).selfMask();
  
  // special case in WMIC to deal with poorly mixed Dove/S-2 data
  man_geo = man_geo.where({
    test: depth.gt(1400),
    value: ee.Image(2)
  });
  
  // special WMIC case to deal with S2 data
  man_geo = man_geo.where({
    test: man_geo.eq(12).or(man_geo.eq(22))
                 .and(segments.select('depth').unmask(0,false).eq(0)),
                 //.and(lagoons_mask_i.uint8().unmask(0,false).lt(1)),
    value: ee.Image(2)
  })
  
  // mask to deep and anything removed to this point + re-do land
  man_geo = man_geo.where({
    test: distToLand.eq(0),
    value: ee.Image(0)
  });
  
  man_geo = man_geo.updateMask(man_geo.gt(2)).selfMask();
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.Image(region_params.pixels).select(['b1','b2','b3']);
  Map.addLayer(lowtide_image, region_params.visParams, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);

  // display distance to land mask for assessing cut-off distances
  Map.addLayer(distToLand, {}, 'Distance to land mask', false);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: vars.local_epsg,
    maxPixels: 1e13,
    shardSize: 256, // SWP specific cuase of size?
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.ImageCollection([segments_sld.select('depth'),segments.select('depth')]).mosaic();
  var dove_b1 = ee.Image(region_params.pixels).select('b1');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // Deep (or land or missing) in geo == masked from benthic
  man_benthic = man_benthic.where({
    test: geo_map.unmask(0).lte(2),
    value: ee.Image(0)
  });
  
  
  /*
  ** Generic benthic rules **
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  /*// Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });*/
  // Rubble on Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(15)),
    value: ee.Image(13)
  });
  
  // Sand in benthic and reef crest in geo --> coral/aglae
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(15)),
    value: ee.Image(15)
  });
    
  // Seagrass on RC or ORF -> Coral/Algae
  /*// except for these two areas (use if there are exceptions, e.g. in Indonesia this can occur)
  var sg_orf = ee.Image().byte().paint(ee.Feature(sg_on_orf, {zone: 1}), "zone").unmask(geo_map.eq(42));*/
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
                     //.and(sg_orf.eq(0)),
    value: ee.Image(15)
  });  
  
  // Sand on slope --> rubble
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
    value: ee.Image(12)
  });  
  
  // Rubble on slope --> rock
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
    value: ee.Image(13)
  });  
  
  /*
  ** Manual polygon guided rules **
   - same as per geomorphic clean section (add a geometry, paint the layer, create a rule)
          - OR -
  ** Region-specific clean-up rules **
  */
  
  /*// Seagrass in turbid water & TRF --> rubble
  var turbid_mask = ee.FeatureCollection(region_params.turbid_mask).filterBounds(region_extent).geometry();
  var turbid_mask_i = ee.Image().byte().paint(ee.Feature(turbid_mask,{zone: 1}), "zone");
  Map.addLayer(turbid_mask, {}, "turbid mask", false);
  
  man_benthic = man_benthic.where({
    test: turbid_mask_i.eq(1)
                       .and(man_benthic.eq(14))
                       .and(geo_map.neq(16)),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef (and dark) -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14))
                     .and(dove_b1.lt(750)),
    value: ee.Image(13)
  });*/
  
  
  // Add the manual layer to the map
  var dove_image = ee.Image(region_params.pixels).select(['b1','b2','b3']);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: vars.local_epsg,
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.Image(region_params.segments).select('depth');
  var image = ee.Image(region_params.pixels).select('b3','b2','b1');
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(image, {bands: ['b3','b2','b1'], min:200, max:1200}, 'Dove low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geomorphic map - stage 1 clean', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    if (!vars.manual_clean) Map.addLayer(geo_map, map_palettes.geo, 'Final geo map (manual clean - stage 3)', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
    // 3. Object-based re-classificaiton and cleaning
    
    /* OUTPUT EXTENT
      - to the mapping extent just so it doesn't balloon out
      - to the 'reef boundary' extent for noise/deep removal
    */  
    var class_extent_mask = geo_map.gt(0);
    
    /*
    
    ########
    Initial small object clean
     - this was originally at the end, but we needed to massively reduce the number of objects to 
       iterate through in the OBIA cleaning, so this happens first now
     - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
     
     - includes a possible special case for:
          - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
          - benthic to allow breaking waves (temporal class) to grow into surrounding class
    ########
    
    */
    
    // ##############################################################################################
    // START OF CLEAN 1
    // ##############################################################################################
    
    if (vars.geomorphic && !vars.obia_2nd_pass) {
      
      // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
      clean_map = geo_map.where({
        test: depth.gt(vars.geo_depth_cutoff),
        value: ee.Image(2)
      });
      
      // shallow lagoon > 5m == deep lagoon
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                      .and(depth.gt(vars.shallowlag_depth_cutoff)),
        value: ee.Image(12)
      });
      
      // the "LAND MASK" CLEAN
      var distToLand = ee.Image(region_params.distToLand);
      // display distance to land mask for assessing cut-off distances
      Map.addLayer(distToLand.unmask(8000, false).lte(vars.dist_to_land_RC).selfMask(), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
      Map.addLayer(distToLand.unmask(8000, false).gte(vars.dist_to_land_ORF).selfMask(), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
      // only apply RC distance rules to non-terrestrial lagoons
      var ocean_lagoon_mask = ee.FeatureCollection(region_params.lagoons_mask)
                                    .filter(ee.Filter.eq("MappingReg", vars.lagoon_region))
                                    .filter(ee.Filter.neq("LagoonType", "ClosedTerrestrial"))
                                    .geometry().buffer(1000);
      // add in manual areas for not applying land distance rules 
      var skip_rc_dist = ee.FeatureCollection(ocean_lagoon_mask).merge(RC_landDist_not_applied).geometry().dissolve();
      var skip_rc_dist_i = ee.Image().byte().paint(ee.Feature(skip_rc_dist,{zone: 1}), "zone").unmask(0, false);
      Map.addLayer(skip_rc_dist_i, {min:0,max:1}, "Skip RC landDist rule", false);
      
      
      // reef crest close to land -> TRF (check if needed or not)
      clean_map = clean_map.where({
        test: clean_map.eq(15)
                       .and(distToLand.unmask(8000, false).lte(vars.dist_to_land_RC))
                       .and(skip_rc_dist_i.eq(0)),
        value: ee.Image(16)
      });
      
      // TRF outside of specified distance from land -> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(16)
                       .and(distToLand.unmask(8000, false).gt(vars.dist_to_land_ORF)),
        value: ee.Image(14)
      });
      
      // mask out land areas
      clean_map = clean_map.updateMask(distToLand.unmask(8000, false));
      
      
      // the "DISTANCE TO DEEP WATER" CLEAN
      // use a distance to deepwater to cut out RC/slope
      var dist_to_deep = clean_map.eq(2).or(clean_map.eq(22))
                                  .fastDistanceTransform(50).sqrt()
                                  .multiply(ee.Image.pixelArea().sqrt())
                                  .uint8()
                                  //.selfMask();
      Map.addLayer(dist_to_deep, {}, "distance to deepwater", false);
  
      // reef crest too far from deep water -> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(15)
                       .and(dist_to_deep.gte(250)),
        value: ee.Image(14)
      });
      
    }
    
    if (!vars.geomorphic && vars.cleanup_stage == 1) {
      // BENTHIC CLEAN 1 rules (pre-manual)
      
      // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
      var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
      // replace small objects with smooth underneath
      var clean_map = benthic_map.where({
        test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
        value: smooth_map
      }).updateMask(class_extent_mask);
      
      // replace small missing 
      var clean_map = benthic_map.unmask(0, false).where({
        test: geo_map.gt(2),
        value: smooth_map
      }).selfMask();
      
      // Deep (or land or missing) in geo == masked from benthic
      clean_map = clean_map.where({
        test: geo_map.unmask(0).lte(2),
        value: ee.Image(0)
      });
        
      // cut benthic off to < 10 - 15 m
      clean_map = clean_map.where({
        test: depth.gt(vars.benthic_depth_cutoff),
        value: ee.Image(0)
      });
     
     
     
      // #####################
      // special case for SWP, remap separate coral (16) & algae (17) classes back to coral/algae (15)
      clean_map = clean_map.where({
        test: clean_map.eq(16), 
        value: ee.Image(15)
      });
      clean_map = clean_map.where({
        test: clean_map.eq(17), 
        value: ee.Image(15)
      });
    
    }
  
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      // get rid of patch reef
      geo_map = geo_map.where({
        test: geo_map.eq(25),
        value: smooth_map
      });
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }
  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: vars.local_epsg,
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend