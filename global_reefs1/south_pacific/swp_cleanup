/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var global_not_applied = 
    /* color: #0b4a8b */
    /* shown: false */
    ee.Geometry.MultiPolygon(
        [[[[-179.1810777017912, -23.954192128211222],
           [-179.16305325721112, -23.9675259193888],
           [-179.09198544715252, -23.953250867319667],
           [-179.08134244178143, -23.923754547278577],
           [-179.11601803992596, -23.910259303270298],
           [-179.18588422034588, -23.93928802417506]]],
         [[[-178.93017076367227, -23.611857748687477],
           [-178.95334504956094, -23.642053921875306],
           [-178.93583558911172, -23.671614259319398],
           [-178.89772676342812, -23.672714781148425],
           [-178.87489580029336, -23.64740043517314],
           [-178.88725541943398, -23.614374362311715],
           [-178.91145967358437, -23.604307617905025]]]]),
    trf_to_orf = 
    /* color: #93d600 */
    /* shown: false */
    ee.Geometry({
      "type": "GeometryCollection",
      "geometries": [
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                177.41567364769196,
                -18.17740928668025
              ],
              [
                177.53240338402009,
                -18.1884993695376
              ],
              [
                177.75007000999665,
                -18.2374177817229
              ],
              [
                177.8798460109732,
                -18.301969013918114
              ],
              [
                177.9067664047978,
                -18.29428597486172
              ],
              [
                177.9103712937138,
                -18.28678849997783
              ],
              [
                177.91706608741498,
                -18.279616698873525
              ],
              [
                177.91740941016894,
                -18.278557203113685
              ],
              [
                177.9168085953496,
                -18.278231203116416
              ],
              [
                177.91672276466113,
                -18.27782370225828
              ],
              [
                177.91614372193737,
                -18.27799920275817
              ],
              [
                177.91047889649792,
                -18.276939697118955
              ],
              [
                177.90927726685925,
                -18.275961686170213
              ],
              [
                177.9079898065321,
                -18.275635681295437
              ],
              [
                177.90386993348523,
                -18.277469450747436
              ],
              [
                177.89927799165173,
                -18.275228174340523
              ],
              [
                177.89618808686657,
                -18.27714344870597
              ],
              [
                177.8915103143446,
                -18.277184198994654
              ],
              [
                177.88631755769177,
                -18.276613694081977
              ],
              [
                177.8837855523817,
                -18.274127900781373
              ],
              [
                177.87970859467907,
                -18.271153052151544
              ],
              [
                177.8773911660902,
                -18.26968598473619
              ],
              [
                177.87494499146862,
                -18.269278463808817
              ],
              [
                177.87164050996228,
                -18.269278463808817
              ],
              [
                177.87056762635632,
                -18.265162448807892
              ],
              [
                177.87061054170056,
                -18.263043274313496
              ],
              [
                177.8651602929823,
                -18.26426587814026
              ],
              [
                177.85960275590344,
                -18.26426587814026
              ],
              [
                177.8583152955763,
                -18.263654577303072
              ],
              [
                177.85535413682385,
                -18.264225124818083
              ],
              [
                177.85458166062756,
                -18.26328779576761
              ],
              [
                177.84754354417248,
                -18.260516532456712
              ],
              [
                177.8423937028639,
                -18.26067954916994
              ],
              [
                177.8408487504713,
                -18.259293902229537
              ],
              [
                177.8384884065382,
                -18.257174656111783
              ],
              [
                177.8368147081129,
                -18.256644840541757
              ],
              [
                177.833767718672,
                -18.25640030973357
              ],
              [
                177.83145029008313,
                -18.254321783964667
              ],
              [
                177.82853204667492,
                -18.252732306301116
              ],
              [
                177.8275020784132,
                -18.251550377585357
              ],
              [
                177.82677251756115,
                -18.24906422542227
              ],
              [
                177.8275020784132,
                -18.246781824905945
              ],
              [
                177.82707292497082,
                -18.245681371089237
              ],
              [
                177.8252704805128,
                -18.245436824850373
              ],
              [
                177.82140809953137,
                -18.246537280215527
              ],
              [
                177.81703073441906,
                -18.246292735180997
              ],
              [
                177.8161724275343,
                -18.245885159358778
              ],
              [
                177.8148420518629,
                -18.245355309360953
              ],
              [
                177.8134687608473,
                -18.243928782107474
              ],
              [
                177.8101213639967,
                -18.244254846511918
              ],
              [
                177.8093488878004,
                -18.242950585224182
              ],
              [
                177.8074176973097,
                -18.240790380939796
              ],
              [
                177.80286867082043,
                -18.240627345564796
              ],
              [
                177.8014953798048,
                -18.24054582781994
              ],
              [
                177.8014953798048,
                -18.23871166845597
              ],
              [
                177.78719866609686,
                -18.23308897590501
              ],
              [
                177.78569662904852,
                -18.23359848303205
              ],
              [
                177.78447354173773,
                -18.233557722516817
              ],
              [
                177.78419459200018,
                -18.23304821527036
              ],
              [
                177.781641129018,
                -18.233027834949453
              ],
              [
                177.78144800996893,
                -18.231927294074374
              ],
              [
                177.7806326184284,
                -18.231010171359237
              ],
              [
                177.77919495439642,
                -18.230052282471984
              ],
              [
                177.7805627629807,
                -18.224484975897234
              ],
              [
                177.70692003226782,
                -18.202145612776192
              ],
              [
                177.6099313542893,
                -18.181108119538393
              ],
              [
                177.59853555128643,
                -18.182449829486618
              ],
              [
                177.594673170305,
                -18.18369338573799
              ],
              [
                177.58870793745587,
                -18.183122574133126
              ],
              [
                177.5884075300462,
                -18.182470215726145
              ],
              [
                177.58596135542462,
                -18.181736309602226
              ],
              [
                177.54118704988218,
                -18.167927545303822
              ],
              [
                177.52728247834898,
                -18.16743823412592
              ],
              [
                177.5231626053021,
                -18.173472976139614
              ],
              [
                177.51784110261656,
                -18.17363607437964
              ],
              [
                177.47655654145933,
                -18.163931463890552
              ],
              [
                177.43039258471197,
                -18.147887556073684
              ],
              [
                177.41983541002935,
                -18.140873160398357
              ],
              [
                177.41056569567388,
                -18.137773686627714
              ],
              [
                177.4035275792188,
                -18.138670908368134
              ],
              [
                177.3973477696485,
                -18.135979229339462
              ],
              [
                177.38181241503423,
                -18.128964356050975
              ],
              [
                177.37872251024908,
                -18.128882786102814
              ],
              [
                177.37503179064458,
                -18.126272527686893
              ],
              [
                177.37305768480962,
                -18.126354098851667
              ],
              [
                177.36893781176275,
                -18.124804240220115
              ],
              [
                177.33340390673345,
                -18.1173810428478
              ],
              [
                177.32310422411626,
                -18.104654829581037
              ],
              [
                177.29612341982818,
                -18.11650313240474
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                177.59392621708514,
                -18.512175964218542
              ],
              [
                177.6080024499953,
                -18.54375216821924
              ],
              [
                177.6306617517531,
                -18.588664955091243
              ],
              [
                177.6467979211867,
                -18.6081885630139
              ],
              [
                177.66430738163592,
                -18.607537812155726
              ],
              [
                177.6461112756789,
                -18.59029200791243
              ],
              [
                177.61074903202655,
                -18.517384811828244
              ],
              [
                177.60079267216327,
                -18.502408947605048
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                177.94563762218263,
                -19.109323601450907
              ],
              [
                177.93739787608888,
                -19.136895656726676
              ],
              [
                177.9900979188135,
                -19.180839236091913
              ],
              [
                178.0288933900049,
                -19.172570305836516
              ],
              [
                178.02906505138185,
                -19.16324699466422
              ],
              [
                178.0112980988672,
                -19.158787833359845
              ],
              [
                178.0063753500524,
                -19.154658633000697
              ],
              [
                178.00534538179068,
                -19.14655055514577
              ],
              [
                178.0012255087438,
                -19.139901634023268
              ],
              [
                177.9653482809606,
                -19.126927358418886
              ],
              [
                177.95813850312857,
                -19.105841987526198
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                178.0912081100421,
                -19.193550017347643
              ],
              [
                178.1076017715411,
                -19.189253799772523
              ],
              [
                178.1361833908038,
                -19.163068767837537
              ],
              [
                178.1329218246417,
                -19.159744673622015
              ],
              [
                178.12502540130185,
                -19.1522854866449
              ],
              [
                178.11669982451963,
                -19.148636848435384
              ],
              [
                178.11103499908018,
                -19.157717754018663
              ],
              [
                178.1091467239337,
                -19.169068182875833
              ],
              [
                178.1032244064288,
                -19.177985828672696
              ],
              [
                178.10116446990537,
                -19.1794450338504
              ],
              [
                178.09034980315732,
                -19.185362788990844
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                178.1257310181063,
                -19.151570524171714
              ],
              [
                178.13259747318443,
                -19.15919189667602
              ],
              [
                178.13869145206627,
                -19.16397534419479
              ],
              [
                178.1594624786776,
                -19.165191452793657
              ],
              [
                178.20624020389732,
                -19.14419205154373
              ],
              [
                178.20675518802818,
                -19.130488298726565
              ],
              [
                178.20349362186607,
                -19.12797446915642
              ],
              [
                178.19516804508385,
                -19.13040720804723
              ],
              [
                178.1895032196444,
                -19.136326723007834
              ],
              [
                178.17989018253502,
                -19.141597345406847
              ],
              [
                178.15002110294517,
                -19.151651604455722
              ],
              [
                178.14281132511314,
                -19.146138054377946
              ]
            ]
          ],
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                167.04003729775886,
                -15.568865864743458
              ],
              [
                166.8889752860401,
                -15.563574184739297
              ],
              [
                166.82031073525886,
                -15.60590380982953
              ],
              [
                166.67748846963386,
                -15.033725725285308
              ],
              [
                167.0208112235401,
                -14.959440697885945
              ],
              [
                167.0922223563526,
                -15.168964071509325
              ],
              [
                167.1416608329151,
                -15.184868792701485
              ],
              [
                167.1910993094776,
                -15.330606094420444
              ],
              [
                167.25976386025886,
                -15.444475476053801
              ],
              [
                167.2844830985401,
                -15.563574184739297
              ],
              [
                167.25427069619636,
                -15.603258463895392
              ],
              [
                167.32568182900886,
                -15.642935068572323
              ],
              [
                167.38061346963386,
                -15.595322221460952
              ],
              [
                167.1032086844776,
                -14.428091655036969
              ],
              [
                166.1858502860401,
                -14.523829509985227
              ],
              [
                166.5703717704151,
                -15.740771102507809
              ],
              [
                167.23229803994636,
                -15.790992955136081
              ],
              [
                167.3833600516651,
                -15.70375758341875
              ],
              [
                167.2295514579151,
                -15.656158894992913
              ],
              [
                167.21581854775886,
                -15.711689618330658
              ],
              [
                167.1141950126026,
                -15.672026357620869
              ],
              [
                167.0647565360401,
                -15.592676739122798
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                167.3668805594776,
                -16.073587852242174
              ],
              [
                167.43005194619636,
                -15.989115238694875
              ],
              [
                167.32018866494636,
                -15.833275389437198
              ],
              [
                167.0647565360401,
                -15.894040883278965
              ],
              [
                167.4382916922901,
                -16.674407074671347
              ],
              [
                167.89147772744636,
                -16.548073141022872
              ],
              [
                167.84753241494636,
                -16.35051077564582
              ],
              [
                167.5426618094776,
                -16.086783462243414
              ],
              [
                167.4492780204151,
                -16.04455442862918
              ],
              [
                167.4382916922901,
                -16.081505323369708
              ],
              [
                167.48498358682136,
                -16.118449349492327
              ],
              [
                167.48498358682136,
                -16.171214586806887
              ],
              [
                167.3833600516651,
                -16.107894615157935
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                168.21847284739863,
                -17.70201253872417
              ],
              [
                168.20405329173457,
                -17.677807972202043
              ],
              [
                168.217099556383,
                -17.63658729384963
              ],
              [
                168.2006200641955,
                -17.605174732044468
              ],
              [
                168.20748651927363,
                -17.59143001701311
              ],
              [
                168.21435297435175,
                -17.56655597084207
              ],
              [
                168.2328924030627,
                -17.54822553823011
              ],
              [
                168.23495233958613,
                -17.53054800742949
              ],
              [
                168.28988398021113,
                -17.51024945843946
              ],
              [
                168.31116999095332,
                -17.53578597403129
              ],
              [
                168.27615107005488,
                -17.65032856872933
              ],
              [
                168.38052118724238,
                -17.73929426751737
              ],
              [
                168.35786188548457,
                -17.768067840428717
              ],
              [
                168.32215631907832,
                -17.767413946980046
              ],
              [
                168.26173151439082,
                -17.743218208930937
              ],
              [
                168.2383855671252,
                -17.77852981032653
              ],
              [
                168.38052118724238,
                -17.8641641234208
              ],
              [
                168.5405095905627,
                -17.8491320705274
              ],
              [
                168.623593697008,
                -17.705937296175144
              ],
              [
                168.5741552204455,
                -17.533821754284723
              ],
              [
                168.4306463093127,
                -17.381202522412398
              ],
              [
                168.31734980052363,
                -17.411998661744374
              ],
              [
                168.1834539265002,
                -17.518762029565238
              ],
              [
                168.11616266673457,
                -17.62546263718094
              ],
              [
                168.13538874095332,
                -17.703320800743295
              ],
              [
                168.14156855052363,
                -17.735370240134895
              ],
              [
                168.17040766185175,
                -17.756297392544102
              ],
              [
                168.2054265827502,
                -17.747796031902897
              ],
              [
                168.22396601146113,
                -17.71182427141816
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                168.68931282691477,
                -18.626179559226998
              ],
              [
                169.62315071753977,
                -20.674650704645785
              ],
              [
                170.65586556128977,
                -20.1907828847593
              ],
              [
                169.49131478003977,
                -18.04217879490791
              ],
              [
                168.97495735816477,
                -18.40741069856909
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                168.27082330815614,
                -17.226257933873836
              ],
              [
                168.85309869878114,
                -16.984750204536972
              ],
              [
                168.21589166753114,
                -13.956916078562617
              ],
              [
                167.17219049565614,
                -12.845468555589617
              ],
              [
                166.18342096440614,
                -12.866890393542658
              ],
              [
                167.43586237065614,
                -14.54256975163305
              ],
              [
                167.58967096440614,
                -15.158489241144393
              ],
              [
                167.76545221440614,
                -15.857183918610932
              ],
              [
                167.99616510503114,
                -16.63769630283506
              ],
              [
                168.16096002690614,
                -17.142290800379943
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                167.1360053592271,
                -20.46781101890515
              ],
              [
                166.46889644179754,
                -20.18307414485462
              ],
              [
                166.04123534998453,
                -20.62993982583119
              ],
              [
                166.7789496951646,
                -20.994401627437412
              ],
              [
                167.94075389438336,
                -21.894258176219804
              ],
              [
                168.51753612094586,
                -21.478253654424545
              ],
              [
                167.8171577029771,
                -20.845601114047223
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -172.75571937278846,
                -13.289129229254513
              ],
              [
                -172.9946720095072,
                -13.687081530812133
              ],
              [
                -172.57444495872596,
                -13.935128396436047
              ],
              [
                -172.35471839622596,
                -13.823139929108786
              ],
              [
                -172.24485511497596,
                -13.382667389651324
              ],
              [
                -172.6870548220072,
                -13.257050684870153
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -170.86387268106978,
                -14.097179683609177
              ],
              [
                -170.99296203653853,
                -14.424598251303685
              ],
              [
                -170.53702941935103,
                -14.485769830014103
              ],
              [
                -170.31455627481978,
                -14.139797554474745
              ],
              [
                -170.66062561075728,
                -14.05188947195039
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        },
        {
          "type": "Polygon",
          "coordinates": [
            [
              [
                -170.23077374276085,
                -19.379733920453862
              ],
              [
                -169.45623760994835,
                -19.441905102589224
              ],
              [
                -169.39581280526085,
                -18.767129640618343
              ],
              [
                -170.13189678963585,
                -18.79313320663828
              ]
            ]
          ],
          "geodesic": true,
          "evenOdd": true
        }
      ],
      "coordinates": []
    }),
    RC_landDist_not_applied = 
    /* color: #0c74d6 */
    /* shown: false */
    ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-175.4303032768438, -20.897551518054673],
                  [-175.4467827690313, -21.420078250803552],
                  [-174.86725396043755, -21.614270769368602],
                  [-174.61456841356255, -21.048863758614168],
                  [-175.3753716362188, -20.897551518054673]]]),
            {
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-174.5027938744292, -19.80747692491881],
                  [-174.34074553458544, -19.910806686849384],
                  [-174.11552580802294, -19.660116044262914],
                  [-174.34074553458544, -19.541094367447478]]]),
            {
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-170.3247984536922, -18.700998060280174],
                  [-170.4346617349422, -19.562488611387447],
                  [-169.2371519693172, -19.75905940020655],
                  [-169.2261656411922, -18.63854874587682]]]),
            {
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-169.70352393041435, -14.324636869809428],
                  [-169.28741675267997, -14.353908040724235],
                  [-169.30801611791435, -14.100986151572547],
                  [-169.69665747533622, -14.100986151572547]]]),
            {
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[178.35118763146204, -7.248519972068134],
                  [177.90074817833704, -8.086895498582626],
                  [179.07628528771204, -8.983220161666306],
                  [179.73546497521204, -8.293506593191426],
                  [178.96642200646204, -7.1885740924842025]]]),
            {
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-172.71719446503033, -8.55166508006967],
                  [-172.09372034393658, -9.259876021375213],
                  [-171.17361536346783, -9.482089987577291],
                  [-170.98684778534283, -9.330349485441316],
                  [-172.48098841034283, -8.361494766115516]]]),
            {
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[162.6502976772457, -17.722795981788224],
                  [162.63656476708945, -18.690748712526844],
                  [163.44405988427695, -18.695952098344755],
                  [163.46053937646445, -17.712330754574737]]]),
            {
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-179.39494031507206, -16.162893811099092],
                  [-179.13607495862675, -16.152341445193823],
                  [-179.12646192151738, -16.038868028003638],
                  [-179.3976868971033, -16.025669241483786]]]),
            {
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-179.13974127079882, -16.82282167673468],
                  [-179.0449841907207, -16.809676020309407],
                  [-179.05185064579882, -16.725522268196297],
                  [-179.1445477893535, -16.72946780669792]]]),
            {
              "system:index": "8"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[178.91767330188145, -17.579239080832775],
                  [179.01655025500645, -17.73757770780737],
                  [179.1511327745377, -17.656462919734356],
                  [179.02753658313145, -17.378827264971928],
                  [178.8764745714127, -17.397174763900058]]]),
            {
              "system:index": "9"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/

///////////////////////////////
// Global coral atlas project - South West Pacific
// Contact: mitchell.lyons@gmail.com
// Region coordinator: Mitchell Lyons (mitchell.lyons@gmail.com)
// Description:
// - Developing a process to combine OBIA and supervised classification
// - This script loads the raw classification data (from *_classification script)
// - Then applied some cleanup and object-based relational rules
///////////////////////////////

// Table of contents
// 1. Setting constants
// 2. Data loads & vis
// 3. OBIA clean up rules
// 4. Export

// Load and libraries needed
var map_palettes = require('users/mitchest/global_reefs_modules:colour_pals');
var pkg_vis = require('users/mitchest/global_reefs_modules:pkg_vis');
var param_module = require('users/mitchest/global_reefs_modules:reef_params');

// ###########################################
// SENSOR GENERICSgeo_depth_cutoff
var sensor_params = param_module.dove;         //<------------ THIS IS WHERE YOU CHOOSE THE SENSOR
// REGION AND SENSOR SPECIFIC LOAD PATHS
var region_params = param_module.swpac;  //<------------ THIS IS WHERE YOU CHOOSE THE REGION
//  ^^ all the data paths are in this module ^^
// ###########################################

// 1. Setting constants

// These will get written to the asset metadata 

var vars = {
  
  // analysis type
  geomorphic: false, // map geomorphic zonation (when set to true) or benthic habitat (when set to false)

  // analysis parameters
  image_data_scale: sensor_params.pixel,
  small_object_geo: ee.Number(400).int(), // smallest object szie in pixels (geomorphic)
  small_object_benthic: ee.Number(130).int(), // smallest object szie in pixels (benthic)
  smooth_radius: ee.Number(3), // radius in pixels for initial smooth 
  dist_to_land_ORF: 1000, //distance to land in meters to convert terrestrial reef flat to ORF
  dist_to_land_RC: 200, //distance to land in meters to convert reef crest to TRF
  wave_height: 0.4, //cut off height for waves in metres, Hs95 threshold
  geo_depth_cutoff: 1400, //depth in centimetres
  shallowlag_depth_cutoff: 500, //depth in centimetres
  benthic_depth_cutoff: 1000, //depth in centimetres
  lagoon_region: "South West Pacific",
  
  //############
  // Clean-up stage selection
  cleanup_stage: 1, // set to 1, 2 or 3
  geo_refinement: false, // set to true to apply the refinement_mask (the other stage 3 masks will still run)
  
  // should the global extent + depth cleanup be applied?
  global_extent_clean: true,
  global_depth_thresh: 500, // this is the depth limit for ADDING to the global extent (i.e. 5 = everything <5m will be added to the global extent layer)
  global_land_dist: -1, // [-1 (don't apply) OR +ve distance in meters] WITHIN this distance, the global extent/depth mask will be applied
  global_not_applied: true, // true = EXCLUDE reefs within 'global_not_applied' geometry polygons - mutually exclusive to land distance rule
 
  /*
  - GEOMORPHIC 1: The first pass does a small object filter, just to generally clean noise and reduce the amount of cleaning needed
  -            2: The second pass runs the OBIA cleanup rules
  -            3: The third pass is the MANUAL cleanup stage, which includes AT LEAST the no_reef masking
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY

  - BENTHIC 1: This is the main benthic stge - it does noise removal, no data reclaim and OBIA rules - review those if needed
            2: The second mas is the MANUAL stage - it's optional, but shuold include ALL region specific stuff
                        - see below where it starts/ends (only that section is run)
                        - please put region specific stuff in here ONLY
  */
  
  // DON'T TOUCH --->
  obia_2nd_pass: null,
  obia_clean: null, // run object-based relationship rules + small object clean up
  fast_clean: null, // run a faster (but less precise) version of the OBIA clean; only applies to geomorphic (`obia_clean: true` also)
  manual_clean: false, // apply manual touch ups
  // --------------<
  //############
  
  reproject_display: true,
  
  // export options
  do_export: true, // export the results?
  geomorph_output_name: region_params.sname + '_geo_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  benthic_output_name: region_params.sname + '_benthic_clean', // DO NOT CHANGE - change in the pop up dialouge if you must
  asset_output: region_params.asset, // asset path
  local_epsg: region_params.epsg

};


// Clean up stage auto-parameterisation (DON'T TOUCH) --->

if (vars.geomorphic) {
  var temp_outname = vars.geomorph_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.obia_2nd_pass = true;
    vars.obia_clean = true;
    vars.fast_clean = true;
    vars.manual_clean = false;
    vars.geomorph_output_name = temp_outname + '2';
  } else if (vars.cleanup_stage == 3) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false;
    vars.obia_clean = false;
    vars.fast_clean = false;
    vars.do_export = false;
    vars.geomorph_output_name = temp_outname + '3';
  }
}

if (!vars.geomorphic) {
  var temp_outname = vars.benthic_output_name;
  if (vars.cleanup_stage == 1) {
    vars.obia_2nd_pass = true,
    vars.obia_clean = true, 
    vars.fast_clean = false, 
    vars.manual_clean = false;
    vars.benthic_output_name = temp_outname + '1';
  } else if (vars.cleanup_stage == 2) {
    vars.manual_clean = true;
    vars.obia_2nd_pass = false,
    vars.obia_clean = false, 
    vars.fast_clean = false,
    vars.do_export = false;
    vars.benthic_output_name = temp_outname + '2';
  }
}

//Region extent is created in map viewer and exported to GEE asset
var region_extent = ee.FeatureCollection(region_params.extent_mask).geometry();
Map.addLayer(region_extent, {}, "Manual reef outline", false);
// -----------------------------------------<

//################################################################################################
//START OF CLEAN 3 - Manual Cleanup
//Review everything in this section
//This is the section to add/remove manual cleanups
//You MUST review it for each region

//###############################################################################################

if (vars.manual_clean && vars.geomorphic) {
  
  print("Doing GEOMORPHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.ImageCollection(region_params.pixels).mosaic().select('depth');
  
  // define the manually edited map - uses the output from the second pass of cleaning
  var man_geo = ee.Image(region_params.geo_map_clean2);

  // the "GLOBAL MASK" clean
  // currently uses GCRMN extent + bathymetry threhold < vars.global_depth_thresh
  if (vars.global_extent_clean) {
    var blanket_mask = ee.Image([param_module.global_extent_mask.gcrmn]).unmask(0, false)
              .eq(1) // extent according to global extent layer
              .add(depth.lt(vars.global_depth_thresh)) // combine with areas less than depth thrshold
              .eq(0) // get leftovers
              .selfMask().connectedPixelCount(100, false).gte(100).unmask(0, false);
    
    blanket_mask = blanket_mask.where({
      test: blanket_mask.eq(0).connectedPixelCount(100,false).lt(100),
      value: ee.Image(1)
    });
    
    Map.addLayer(blanket_mask.selfMask(), {min:0,max:1}, "Global clean mask", false);
    
    if (vars.global_land_dist > 0) {
      var distToLand = ee.Image(region_params.distToLand);
      man_geo = man_geo.where({
        test: blanket_mask.eq(1)
                          .and(distToLand.lte(vars.global_land_dist)),
        value: ee.Image(0)
      });
    } else if (vars.global_not_applied) {
      var global_not_applied_i = ee.Image().byte().paint(ee.Feature(global_not_applied, {zone: 1}), 'zone').unmask(0, false);
      man_geo = man_geo.where({
        test: blanket_mask.eq(1)
                          .and(global_not_applied_i.eq(0)),
        value: ee.Image(0)
      });
    } else {
      man_geo = man_geo.where({
        test: blanket_mask.eq(1),
        value: ee.Image(0)
      });
    }
  }
  
  // the "MID MASK" CLEAN
  //  - import the mid mask from asset ****only use ee.FC if mid_mask created in map viewer****
  var mid_mask = ee.FeatureCollection(region_params.mid_mask).geometry();
  Map.addLayer(mid_mask, {color: 'red'}, "mid mask import", false, 0.4);
  var midmask = ee.Image().byte().paint(ee.Feature(mid_mask.dissolve(),{zone: 1}), "zone");
  
  man_geo = man_geo.where({
    test: midmask.eq(1),
    value: ee.Image(0)
  });
  
  
  // the "LAGOONS MASK" CLEAN
  // - import the global lagoon mask from asset
  
  // LAGOON clean stage 1 - clean inside the lagoon extent
  var lagoons_mask = ee.FeatureCollection(region_params.lagoons_mask).filterBounds(region_extent).geometry();
  var lagoons_mask_i = ee.Image().byte().paint(ee.Feature(lagoons_mask,{zone: 1}), "zone");
  Map.addLayer(lagoons_mask, {}, "lagoon mask", false);
  
  var ocean_lagoon_mask = ee.FeatureCollection(region_params.lagoons_mask)
                                    .filterBounds(region_extent).filter(ee.Filter.neq("LagoonType", "ClosedTerrestrial"))
                                    .geometry();
  var ocean_lagoon_mask_i = ee.Image().byte().paint(ee.Feature(ocean_lagoon_mask,{zone: 1}), "zone");
  Map.addLayer(ocean_lagoon_mask, {}, "ocean lagoon mask", false);
  
  // RC within Lagoon -> ORF
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(15)),
    value: ee.Image(14)
  });
  // Reef slope, sheltered slope (within lagoon mask) -> Back Reef Slope
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(21).or(man_geo.eq(22))),
    value: ee.Image(24)
  });
  /*// Plateau within lagoon mask -> Deep
  man_geo = man_geo.where({
    test: lagoons_mask_i.eq(1)
                        .and(man_geo.eq(23)),
    value: ee.Image(2)
  });*/
  // TRF within oceanic/closed lagoons -> ORF
  man_geo = man_geo.where({
    test: ocean_lagoon_mask_i.eq(1)
                             .and(man_geo.eq(16)),
    value: ee.Image(14)
  });
  

  // LAGOON clean stage 2 - buffer the lagoon mask, and clean inside buffer
  var lagoon_buffered = lagoons_mask.buffer(1000); // buffer 1000 m wide around reef mask
  var reef_band_mask = lagoon_buffered.difference(lagoons_mask);//substract buffered lagoon mask - lagoon mask resulting in band around reef of 1000 m
  var reef_band_mask_i = ee.Image().byte().paint(ee.Feature(reef_band_mask.dissolve(),{zone: 1}), "zone");

  // BRS, DL and SL should not be present on outside of reef on within reef_band_mask_i  -> Reef Slope
  man_geo = man_geo.where({
   test: reef_band_mask_i.eq(1)
                         .and(man_geo.eq(24).or(man_geo.eq(12)).or(man_geo.eq(11))),
    value: ee.Image(22)
  });    
  // IRF or TRF on within reef_band_mask_i  -> ORF as RC would get artefacts
  man_geo = man_geo.where({
    test: reef_band_mask_i.eq(1)
                          .and(man_geo.eq(13).or(man_geo.eq(16))),
    value: ee.Image(14)
  });   
  
  
  // The 'TURBID WATER' clean
  var turbid_mask = ee.FeatureCollection(region_params.turbid_mask).filterBounds(region_extent).geometry();
  var turbid_mask_i = ee.Image().byte().paint(ee.Feature(turbid_mask,{zone: 1}), "zone");
  Map.addLayer(turbid_mask, {}, "turbid mask", false);
  
  // leave only TRF within turbid mask (after changing ORF to TRF)
  man_geo = man_geo.where({
    test: turbid_mask_i.eq(1)
                       .and(man_geo.eq(14)),
    value: ee.Image(16)
  });
  
  man_geo = man_geo.where({
    test: turbid_mask_i.eq(1)
                       .and(man_geo.neq(16)),
    value: ee.Image(2)
  });
  
  
  // The 'HARBOUR & SHIPPING' clean
  var harbour_mask = ee.FeatureCollection(region_params.harbour_mask).filterBounds(region_extent).geometry();
  var harbour_mask_i = ee.Image().byte().paint(ee.Feature(harbour_mask,{zone: 1}), "zone");
  Map.addLayer(harbour_mask, {}, "harbour mask", false);
  
  // remove mapping within harbour mask
  man_geo = man_geo.where({
    test: harbour_mask_i.eq(1)
                        .and(man_geo.gt(2)),
    value: ee.Image(2)
  });
  
  
  // the 'WAVE' clean (un-comment this sectio nbased on whether you have waves or not)
  var waves = ee.Image(region_params.waves);
  Map.addLayer(waves.lt(vars.wave_height), {}, vars.wave_height + "m Hs95 threshold", false);
  
  man_geo = man_geo.where({
    test: waves.lte(vars.wave_height)
               .and(man_geo.eq(22)),
    value: ee.Image(21)
  });
  
  
  /*// the "DISTANCE TO DEEP WATER" CLEAN
  // use a distance to deepwater to cut out RC/slope
  var dist_to_deep = man_geo.eq(2).fastDistanceTransform(256).sqrt()
                                  .multiply(ee.Image.pixelArea().sqrt())
                                  .uint16()
                                  .selfMask();
  Map.addLayer(dist_to_deep, {}, "distance to deepwater", false);
  
  // reef crest too far from deep water -> ORF
  man_geo = man_geo.where({
    test: man_geo.eq(15)
                 .and(dist_to_deep.gte(300)),
    value: ee.Image(14)
  });
  // reef slope too far from deep wter -> BRS
  man_geo = man_geo.where({
    test: man_geo.eq(21).or(man_geo.eq(22))
                 .and(dist_to_deep.gte(1500)),
    value: ee.Image(24)
  });*/
  
  /*
  ##############
  
  The rest of the manual geometry paintings and rules should go here
      - make the geom, paint the layer, use it in a rule
      - consult previous regions *_cleanup script for ideas/hints/existing rules etc.
  e.g. 
  var notreefcrest = ee.Image().byte().paint(ee.Feature(not_reef_crest, {zone: 1}), "zone");
  var notdeepwater = ee.Image().byte().paint(ee.Feature(not_deep_water, {zone: 1}), "zone");
  
  
  // Reef crest -> Inner reef flat (inside the reef)
  man_geo = man_geo.where({
    test: notreefcrest.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(13)
  });
  
  // Deep water -> Deep lagoon (inside the reef)
  man_geo = man_geo.where({
    test: notdeepwater.eq(1)
                     .and(man_geo.eq(2)),
    value: ee.Image(12)
  });
  
  ##############
  */
  
  /*
  
  These two rules realate to:
  'projects/coral_atlas/sw_pacific/in_out/swp_trftorc'
  'projects/coral_atlas/sw_pacific/in_out/swp_rctotrf'
  
  Check whether these are needed in this version
  
  // RC -> TRF
  man_geo = man_geo.where({
    test: rc_to_trf_i.eq(1)
                     .and(man_geo.eq(15)),
    value: ee.Image(16)
  });
  
  // TRF -> RC
  man_geo = man_geo.where({
    test: trf_to_rc_i.eq(1)
                     .and(man_geo.eq(16)),
    value: ee.Image(15)
  });*/
  
  
  // TRF -> ORF within manual mask
  var trf_to_orf_i = ee.Image().byte().paint(ee.Feature(trf_to_orf,{zone: 1}), "zone");
  man_geo = man_geo.where({
    test: trf_to_orf_i.eq(1)
                      .and(man_geo.eq(16)),
    value: ee.Image(14)
  });
  
  
  //mask to deep and anything removed to this point
  man_geo = man_geo.updateMask(man_geo.gt(2)).selfMask();
  
  
  if (vars.geo_refinement) {
    // make the mask image layer
    var refine = ee.Image().byte().paint(ee.Feature(refinement_mask, {zone: 1}), "zone").clip(refinement_mask);
    // apply
    man_geo = man_geo.where({
      test: refine.eq(1),
      value: ee.Image(0)
    });
  }
  
  // Add data + the manual layer to the map
  var lowtide_image = ee.ImageCollection(region_params.pixels).mosaic().select(['b1','b2','b3']);
  Map.addLayer(lowtide_image, region_params.visParams, sensor_params.sname + ' low tide', false);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean2, map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(man_geo.updateMask(man_geo), map_palettes.geo, 'Geo clean stage 3', false);

  // display distance to land mask for assessing cut-off distances
  var distToLand = ee.Image(region_params.distToLand);
  Map.addLayer(distToLand, {}, 'Distance to land mask', false);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_geo,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: vars.local_epsg,
    maxPixels: 1e13,
    shardSize: 256, // SWP specific cuase of size?
    pyramidingPolicy: {'.default': 'mode'}
  });
  
} 

if (vars.manual_clean && !vars.geomorphic) {
  
  print("Doing BENTHIC manual clean ups - make sure this is what you want to do");
  print("Export the manual map, check 'manual' layer in the viewer for effects");
  
  var depth = ee.ImageCollection(region_params.segments).mosaic().select('depth');
  var dove_b1 = ee.ImageCollection(region_params.pixels).mosaic().select('b1');
  
  // define the final geomorphic map (the manually edited geo map - stage 3)
  var geo_map = ee.Image(region_params.geo_map_clean3);
  
  // define the clean benthic map to apply 2nd stage rules to
  var man_benthic = ee.Image(region_params.benthic_map_clean1);
  
  // Deep (or land or missing) in geo == masked from benthic
  man_benthic = man_benthic.where({
    test: geo_map.unmask(0).lte(2),
    value: ee.Image(0)
  });
  
  
  /*
  ** Generic benthic rules **
    - should be generally applicable, but still review
  */
  
  // BMA on inner RF, outer RF,reef crest, reef slope -> rubble 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(18)
                     .and(geo_map.eq(13).or(geo_map.eq(14)).or(geo_map.eq(15)).or(geo_map.eq(22))),
    value: ee.Image(12)
  });
  
  /*// Rubble on Outer reef flat and Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
    value: ee.Image(13)
  });*/
  // Rubble on Reef crest -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(15)),
    value: ee.Image(13)
  });
  
  // Sand in benthic and reef crest in geo --> coral/aglae
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(15)),
    value: ee.Image(15)
  });
    
  // Seagrass on RC or ORF -> Coral/Algae
  /*// except for these two areas (use if there are exceptions, e.g. in Indonesia this can occur)
  var sg_orf = ee.Image().byte().paint(ee.Feature(sg_on_orf, {zone: 1}), "zone").unmask(geo_map.eq(42));*/
  
  man_benthic = man_benthic.where({
    test: man_benthic.eq(14)
                     .and(geo_map.eq(14).or(geo_map.eq(15))),
                     //.and(sg_orf.eq(0)),
    value: ee.Image(15)
  });  
  
  // Sand on slope --> rubble
  man_benthic = man_benthic.where({
    test: man_benthic.eq(11)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
    value: ee.Image(12)
  });  
  
  // Rubble on slope --> rock
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(21).or(geo_map.eq(22))),
    value: ee.Image(13)
  });  
  
  /*
  ** Manual polygon guided rules **
   - same as per geomorphic clean section (add a geometry, paint the layer, create a rule)
          - OR -
  ** Region-specific clean-up rules **
  */
  
  // Seagrass in turbid water & TRF --> rubble
  var turbid_mask = ee.FeatureCollection(region_params.turbid_mask).filterBounds(region_extent).geometry();
  var turbid_mask_i = ee.Image().byte().paint(ee.Feature(turbid_mask,{zone: 1}), "zone");
  Map.addLayer(turbid_mask, {}, "turbid mask", false);
  
  man_benthic = man_benthic.where({
    test: turbid_mask_i.eq(1)
                       .and(man_benthic.eq(14))
                       .and(geo_map.neq(16)),
    value: ee.Image(12)
  });
  
  // Rubble on Outer reef (and dark) -> rock 
  man_benthic = man_benthic.where({
    test: man_benthic.eq(12)
                     .and(geo_map.eq(14))
                     .and(dove_b1.lt(750)),
    value: ee.Image(13)
  });
  
  /* 2020 rules - no longer needed
  // Coral in benthic & Deep lagoon in geo == sand
  man_benthic = man_benthic.where({
    test: man_benthic.eq(15)
                     .and(geo_map.eq(12)),
    value: ee.Image(11)
  });
  
  // within New Caledonia: CA in benthic && BRS/PL/DL == sand
  man_benthic = man_benthic.where({
    test: man_benthic.eq(15)
                     .and(newcal_lagoon_i.eq(1))
                     .and(geo_map.gte(23).or(geo_map.eq(12))),
    value: ee.Image(11)
  });*/
  
  
  // Add the manual layer to the map
  var dove_image = ee.ImageCollection(region_params.pixels).mosaic().select(['b1','b2','b3']);
  Map.addLayer(dove_image, {bands: ['b3','b2','b1'], min:0, max:4000, gamma:1.5}, sensor_params.sname + ' low tide', true);
  
  var benthic_clean1 = ee.Image(region_params.benthic_map_clean1);
  var geo_clean1 = ee.Image(region_params.geo_map_clean1);
  var geo_clean2 = ee.Image(region_params.geo_map_clean2);
  Map.addLayer(geo_clean1, map_palettes.geo, 'Geo clean stage 1', false);
  Map.addLayer(geo_clean2.updateMask(geo_clean2.gt(2)), map_palettes.geo, 'Geo clean stage 2', false);
  Map.addLayer(geo_map.updateMask(geo_map.gt(2)), map_palettes.geo, 'Geo clean stage 3 - MANUAL', true);
  Map.addLayer(benthic_clean1, map_palettes.benthic, 'Benthic clean stage 1', false);
  Map.addLayer(man_benthic.reproject({crs:'EPSG:4326', scale: 5}), map_palettes.benthic, 'Benthic clean stage 2 - MANUAL', true);
  
  // Export
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  Export.image.toAsset({
    image: man_benthic,
    description: output_name,
    assetId: vars.asset_output + 'in_out/' + output_name,
    region: region_extent,
    scale: vars.image_data_scale,
    crs: vars.local_epsg,
    maxPixels: 1e13,
    pyramidingPolicy: {'.default': 'mode'}
  });
  
}

// #################################################################################################
// END OF MANUAL SECTION
// #################################################################################################


// 2. Data loads & vis

if (!vars.manual_clean) {

  // load input data
  
  // define raw geo/benthic outputs
  // Run check to see if the region has been split into multiple areas
  
  // geo
  if (ee.List(region_params.geo_map).length().getInfo() > 1) {
    var geo_map_raw = ee.Image(region_params.geo_map[0]).unmask(0, false)
                 .add(ee.Image(region_params.geo_map[1]).unmask(0,false))
                 .selfMask();
  } else {
    var geo_map_raw = ee.Image(region_params.geo_map);
  }
  
  // benthic
  if (ee.List(region_params.benthic_map).length().getInfo() > 1) {
      var benthic_map = ee.Image(region_params.benthic_map[0]).unmask(0, false)
               .add(ee.Image(region_params.benthic_map[1]).unmask(0,false))
               .selfMask();
  } else {
      var benthic_map = ee.Image(region_params.benthic_map);
  }
  
  // set the geo map for further processing
  if (vars.geomorphic && vars.obia_2nd_pass) {
    // if it's 2nd pass, you want to make sure you're loading the latest geo clean map
    var geo_map = ee.Image(region_params.geo_map_clean1);
  } else if (vars.geomorphic) {
    var geo_map = geo_map_raw;
  }
  
  var depth = ee.ImageCollection(region_params.segments).mosaic().select('depth');
  var image = ee.ImageCollection(region_params.pixels).mosaic().select('b3','b2','b1');
  
  var display_pal = (vars.geomorphic) ? map_palettes.geo : map_palettes.benthic;
  Map.addLayer(depth, {min:0, max:2500}, 'Depth data', false);
  Map.addLayer(image, {bands: ['b3','b2','b1'], min:200, max:1200}, 'Dove low tide', false);
  
  // load for display purposes
  if (vars.geomorphic) {
    Map.addLayer(geo_map_raw, display_pal, 'Geomorphic map RAW', false);
    if (vars.cleanup_stage == 2) Map.addLayer(ee.Image(region_params.geo_map_clean1), display_pal, 'Geomorphic map - stage 1 clean', false);
  }
  if (!vars.geomorphic) {
    // Use the manually cleaned geomorphic map as input for the benthic clean
    var geo_map = ee.Image(region_params.geo_map_clean3);
    if (!vars.manual_clean) Map.addLayer(geo_map, map_palettes.geo, 'Final geo map (manual clean - stage 3)', false);
    Map.addLayer(benthic_map, display_pal, 'Benthic map RAW', false);
  }
  
    // 3. Object-based re-classificaiton and cleaning
    
    /* OUTPUT EXTENT
      - to the mapping extent just so it doesn't balloon out
      - to the 'reef boundary' extent for noise/deep removal
    */  
    var class_extent_mask = geo_map.gt(0);
    
    /*
    
    ########
    Initial small object clean
     - this was originally at the end, but we needed to massively reduce the number of objects to 
       iterate through in the OBIA cleaning, so this happens first now
     - future collabs with google might fix this, but need to change the parallel serialisation of vector procesing
     
     - includes a possible special case for:
          - geomorphic to clean up turbid areas over size threshold; fix shallow vs. deep lagoon
          - benthic to allow breaking waves (temporal class) to grow into surrounding class
    ########
    
    */
    
    // ##############################################################################################
    // START OF CLEAN 1
    // ##############################################################################################
    
    if (vars.geomorphic && !vars.obia_2nd_pass) {
      
      // deep water in depth data == deep (s2 + ls8 data should be good enough for this)
      clean_map = geo_map.where({
        test: depth.gt(vars.geo_depth_cutoff),
        value: ee.Image(2)
      });
      
      // shallow lagoon > 5m == deep lagoon
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                      .and(depth.gt(vars.shallowlag_depth_cutoff)),
        value: ee.Image(12)
      });
      
      // the "LAND MASK" CLEAN
      var distToLand = ee.Image(region_params.distToLand);
      // display distance to land mask for assessing cut-off distances
      Map.addLayer(distToLand.unmask(8000, false).lte(vars.dist_to_land_RC), {}, 'RC to TRF ' + vars.dist_to_land_RC + 'm', false);
      Map.addLayer(distToLand.unmask(8000, false).gte(vars.dist_to_land_ORF), {}, 'TRF to ORF ' + vars.dist_to_land_ORF + 'm', false);
      // only apply RC distance rules to non-terrestrial lagoons
      var ocean_lagoon_mask = ee.FeatureCollection(region_params.lagoons_mask)
                                    .filter(ee.Filter.eq("MappingReg", vars.lagoon_region))
                                    .filter(ee.Filter.neq("LagoonType", "ClosedTerrestrial"))
                                    .geometry().buffer(1000);
      // add in manual areas for not applying land distance rules 
      var skip_rc_dist = ee.FeatureCollection(ocean_lagoon_mask).merge(RC_landDist_not_applied).geometry().dissolve();
      var skip_rc_dist_i = ee.Image().byte().paint(ee.Feature(skip_rc_dist,{zone: 1}), "zone").unmask(0, false);
      Map.addLayer(skip_rc_dist_i, {min:0,max:1}, "Skip RC landDist rule", false);
      
      
      // reef crest close to land -> TRF (check if needed or not)
      clean_map = clean_map.where({
        test: clean_map.eq(15)
                       .and(distToLand.unmask(8000, false).lte(vars.dist_to_land_RC))
                       .and(skip_rc_dist_i.eq(0)),
        value: ee.Image(16)
      });
      
      // TRF outside of specified distance from land -> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(16)
                       .and(distToLand.unmask(8000, false).gt(vars.dist_to_land_ORF)),
        value: ee.Image(14)
      });
      
      // mask out land areas
      clean_map = clean_map.updateMask(distToLand.unmask(8000, false));
      
      
      // the "DISTANCE TO DEEP WATER" CLEAN
      // use a distance to deepwater to cut out RC/slope
      var dist_to_deep = clean_map.eq(2).or(clean_map.eq(22))
                                  .fastDistanceTransform(50).sqrt()
                                  .multiply(ee.Image.pixelArea().sqrt())
                                  .uint8()
                                  //.selfMask();
      Map.addLayer(dist_to_deep, {}, "distance to deepwater", false);
  
      // reef crest too far from deep water -> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(15)
                       .and(dist_to_deep.gte(250)),
        value: ee.Image(14)
      });
      
    }
    
    if (!vars.geomorphic && vars.cleanup_stage == 1) {
      // BENTHIC CLEAN 1 rules (pre-manual)
      
      // make a smooth map with masked area as a value, and without temporal class (basically breaking waves)
      var smooth_map = benthic_map
                        .focal_mode({
                          radius: vars.smooth_radius, // relates to smoothness required
                          kernelType: 'circle', units: 'pixels', iterations: 1
                        });
    
      // replace small objects with smooth underneath
      var clean_map = benthic_map.where({
        test: benthic_map.connectedPixelCount(vars.small_object_benthic, false).lt(vars.small_object_benthic),
        value: smooth_map
      }).updateMask(class_extent_mask);
      
      // replace small missing 
      var clean_map = benthic_map.unmask(0, false).where({
        test: geo_map.gt(2),
        value: smooth_map
      }).selfMask();
      
      // Deep (or land or missing) in geo == masked from benthic
      clean_map = clean_map.where({
        test: geo_map.unmask(0).lte(2),
        value: ee.Image(0)
      });
        
      // cut benthic off to < 10 - 15 m
      clean_map = clean_map.where({
        test: depth.gt(vars.benthic_depth_cutoff),
        value: ee.Image(0)
      });
     
     
     
      // #####################
      // special case for SWP, remap separate coral (16) & algae (17) classes back to coral/algae (15)
      clean_map = clean_map.where({
        test: clean_map.eq(16), 
        value: ee.Image(15)
      });
      clean_map = clean_map.where({
        test: clean_map.eq(17), 
        value: ee.Image(15)
      });
    
    }
  
  
  // ##############################################################################################
  // START OF CLEAN 2
  // ##############################################################################################
  
  if (vars.geomorphic && vars.obia_2nd_pass) {
    var clean_map = geo_map;
  }
  
  if (vars.obia_clean) {
    
    if (vars.geomorphic && !vars.fast_clean) { 
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_properties = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5));
        // reduce the classes in the buffer zone
        var diff_classes = ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.frequencyHistogram(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          }).get('classification')
        );
        // calculate the percentages
        var diff_sum = diff_classes.toArray().reduce(ee.Reducer.sum(), [0]).get([0]);
        var diff_percs = diff_classes.map(function(k,v){return(ee.Number(v).divide(diff_sum).multiply(100).toUint8())});
        
        /* NOW, we can try to do the class logic right here (see /users/mitchest/global_reefs/obia_dev),
           or we can return the neighbour % and do image logic via (painted) rasters */
        
        return(f.set(diff_percs));
      };
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours = function() {
        // reduce map to vectors
        var map_fc = clean_map
              .updateMask(segment_id).updateMask(clean_map.eq(classn)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              });
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_properties));
      };
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels');
      //Map.addLayer(segment_id.reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))))
      Map.addLayer(clean_map.updateMask(segment_id).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      //var classn = ee.Number(15) // one class
      var classn = clean_map.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)), // shallow L 
        value: ee.Image(99) // 99 ensures it's ignored in logic
      });
      
      // Minimum size of object to reclass based on neighbourhood
      var max_size = ee.Number(1000).divide(vars.image_data_scale).pow(2); // the first number is the square dimension of the desired min size;
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours();
      
      // #########
      // REEF RIM
      // #########
      
      var focus_class = ee.Number(15); //RR
      
      // start the object-based neighbourhood rules
      // paint out to rasters (only paint the layers needed)
      var objsize = ee.Image(30000).paint(map_fc_neighbours, 'count').rename('count');
      //var nb24 = ee.Image().byte().paint(map_fc_neighbours, '24').unmask(0).rename('nb24') //OCL
      var nb22 = ee.Image().byte().paint(map_fc_neighbours, '22').unmask(0).rename('nb22'); //SL ex
      var nb21 = ee.Image().byte().paint(map_fc_neighbours, '21').unmask(0).rename('nb21'); //Sl sh
      var nb16 = ee.Image().byte().paint(map_fc_neighbours, '16').unmask(0).rename('nb16'); //TRF
      var nb15 = ee.Image().byte().paint(map_fc_neighbours, '15').unmask(0).rename('nb15'); //RR
      var nb14 = ee.Image().byte().paint(map_fc_neighbours, '14').unmask(0).rename('nb14'); //ORF
      var nb13 = ee.Image().byte().paint(map_fc_neighbours, '13').unmask(0).rename('nb13'); //IRF
      //var nb3 = ee.Image().byte().paint(map_fc_neighbours, '3').unmask(0).rename('nb3') //Turbid
      
      // RR surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // RR surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // RR surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // RR with decent border to TRF --> TRF (often dark, probably seagrass)
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(40)),
        value: ee.Image(16)
      });
      
      // RR surrounded by OCL --> OCL
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb24.gt(75)),
        value: ee.Image(24)
      })
      
      // small RR objects touching OCL + stuff --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(objsize.lte(max_size))
                .and(nb13.lte(75).and(nb14.lte(75))) // to ensure we're no re-writing previous rules
                .and(nb24.gt(1)),
        value: ee.Image(14)
      })
      
      // ####
      // ORF
      // ####
      
      focus_class = ee.Number(14); // ORF
      
      // ORF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // ORF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // ORF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ORF touching slope and RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb21.gt(0).or(nb22.gt(0)))
                .and(nb15.gt(0)),
        value: ee.Image(15)
      });
      
      // ####
      // IRF
      // ####
      
      focus_class = ee.Number(13); // IRF
      
      // IRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // IRF surrounded by TRF --> TRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb16.gt(75)),
        value: ee.Image(16)
      });
      
      // IRF surrounded by RR --> RR
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb15.gt(85)),
        value: ee.Image(15)
      });
      
      // ####
      // TRF
      // ####
      
      focus_class = ee.Number(16); // TRF
      
      // TRF surrounded by ORF --> ORF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb14.gt(75)),
        value: ee.Image(14)
      });
      
      // TRF surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.gt(75)),
        value: ee.Image(13)
      });
      
      // TRF surrounded by IRF + ORF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(focus_class)
                .and(nb13.add(nb14).gt(75)),
        value: ee.Image(13)
      });
      
      // ####
      // LAGOONS
      // ####
      
      var nb11 = ee.Image().byte().paint(map_fc_neighbours, '11').unmask(0).rename('nb11'); // shallow lag
      
      // SL sourrounded by DL --> DL
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(nb12.gt(75)),
        value: ee.Image(12)
      })
      
      // DL sourrounded by SL --> SL
      clean_map = clean_map.where({
        test: clean_map.eq(12)
                .and(nb11.gt(75)),
        value: ee.Image(11)
      })
      
      // DL/SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11).or(clean_map.eq(12))
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      })
      
      // SL surrounded by IRF --> IRF
      clean_map = clean_map.where({
        test: clean_map.eq(11)
                .and(objsize.lte(max_size))
                .and(nb13.gt(80)),
        value: ee.Image(13)
      });
      
    
    } else if (vars.geomorphic && vars.fast_clean) {
      print("Executing the fast version OBIA");
      
      /* fast version of the geo clean up
        - blanket version assigns the underlying most common in neighbourhood
        - mode OBIA version iterates through objects+buffers but take the mode instead of doing the class percs, to see if that speeds things up
      */
      
      
      // ## Blanket version
      
      // make a very smooth map to capture the broader neighbourhood  - *** Change to ee.kernal*** see reef mask in clean 3
      var smooth_map = clean_map
                          .focal_mode({
                            radius: vars.smooth_radius.multiply(3), // relates to smoothness required
                            kernelType: 'circle', units: 'pixels', iterations: 2
                          });
      
      // first make a make size threshold, so we're not vectorising huge objects when we don't have t
      // - the unmask(99) captures small no data values/ data gaps
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt().multiply(2)).select('labels').pow(2).log().int();
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false);
      
      // replace small objects with smooth underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: smooth_map
      }).selfMask();
      
      // get rid of patch reef
      geo_map = geo_map.where({
        test: geo_map.eq(25),
        value: smooth_map
      });
      
      // ## mode OBIA version
      
      /* A possible faster plan
            - vectorise one/few class/es at a time, thus only spending resources on what is actually needed to clean up
            - BUT, just assign the mode of the neighbours, so save resouces even further??
      
      // FUNCTION that maps over feature colleciton and assigns neighbour percentages
      var set_neighbour_mode = function(f) {
        // make the 1px buffer
        var diff = f.buffer(vars.image_data_scale).difference(f, ee.ErrorMargin(0.5))
        // reduce the classes in the buffer zone
        var diff_mode = ee.Number(ee.Dictionary(
          clean_map.unmask(ee.Image(0)).reduceRegion({
            reducer: ee.Reducer.mode(),
            geometry: diff.geometry(),
            scale: vars.image_data_scale,
            maxPixels: 1e11
          })).get('classification'))
        
        return(f.set('mode',diff_mode))
      }
      
      // FUNCTION to reduce the map to vectors and map the neighbour properties function
      var reduce_neighbours_mode = function() {
        // reduce map to vectors
        var map_fc = clean_map.unmask(0)
              .updateMask(classn.gt(0)) // only vectorise class/es of interest
              .reduceToVectors({
                scale: vars.image_data_scale, 
                eightConnected: false,
                bestEffort: true, 
                maxPixels: 1e13,
                tileScale: 1,
                geometry: region_extent
              })
        // map the function, calculate neighbour properties
        return(map_fc.map(set_neighbour_mode))
      }
      
      // first make a make size threshold, so we're not vecortising huge objects when we don't have to
      var segment_id = clean_map.unmask(0).connectedComponents(ee.Kernel.plus(1),vars.small_object_geo.sqrt()).select('labels')
      Map.addLayer(clean_map.unmask(0).updateMask(segment_id.gt(0)).reproject(ee.Projection('EPSG:4326').atScale(ee.Number(vars.image_data_scale))), display_pal, 'Map objects to be iterated through (OBIA)', false)
      
      // This is where we select the single or group of classes to vectorise for cleaning up
      var classn = segment_id.where({
        test: clean_map.neq(16) //TRF
                .and(clean_map.neq(15)) //RR
                .and(clean_map.neq(14)) //ORF
                .and(clean_map.neq(13)) //IRF
                //.and(clean_map.neq(12)) // deep L
                .and(clean_map.neq(11)) // shallow L 
                .and(clean_map.unmask(0).neq(0)), // no data values (want to reclaim the small gaps 
        value: ee.Image(0) // 99 ensures it's ignored in logic
      })
      
      // calculate neighbours
      var map_fc_neighbours = reduce_neighbours_mode()
      
      //print(map_fc_neighbours.limit(10))
      
      var mode_map = ee.Image().byte().paint(map_fc_neighbours, 'mode').unmask(0).rename('mode') // paint out the mode values to an image
      //Map.addLayer(mode_map, display_pal, "mode map", false)
      
      // replace small objects with mode underneath
      var clean_map = clean_map.unmask(0).where({
        test: segment_id.gt(0), 
        value: mode_map
      }).selfMask()
      
      */
      
    }
  }
  
  // Final clip to the classified extent and move on
  if (vars.geomorphic) {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  } else {
    clean_map = clean_map.updateMask(clean_map.gt(1)); // this ignores 0/land; make it .gt(2) if you want to mask deep too
  }
  
  
  // 4. Export data
  
  var output_name = (vars.geomorphic) ? vars.geomorph_output_name : vars.benthic_output_name;
  
  if (vars.do_export) {
    print("For export, the image data scale must be set to:", vars.image_data_scale);
    
    Map.addLayer(region_extent, {}, "Export footprint", false);
    
    Export.image.toAsset({
      image: clean_map.set(vars),
      description: output_name,
      assetId: vars.asset_output + 'in_out/' + output_name,
      region: region_extent,
      scale: vars.image_data_scale,
      crs: vars.local_epsg,
      maxPixels: 1e13,
      pyramidingPolicy: {'.default': 'mode'}
    });
    
  } else {
    if (vars.reproject_display) {
      Map.addLayer(clean_map.reproject(ee.Projection('EPSG:4326').atScale(vars.image_data_scale)), display_pal, output_name, true);
    } else {
      Map.addLayer(clean_map, display_pal, output_name, false);
    }
  }

}

//Generate title
var title = ui.Label({
  value: 'Classes',
  style: {fontWeight: 'bold', fontSize: '12px'}
});

// generate the legend
var geo_legend = pkg_vis.discrete_legend(map_palettes.geo_atlas_names, map_palettes.geo_atlas_cols, 'Geomorphic Zone', false);
var benthic_legend = pkg_vis.discrete_legend(map_palettes.benthic_atlas_names, map_palettes.benthic_atlas_cols, 'Benthic Habitat', false);
//var mask_legend = pkg_vis.discrete_legend(["Low confidence depth","Water conditions"], ["#f7f7f7","#bababa"], 'Confidence Mask reason', false)
var legend = (vars.geomorphic) ? geo_legend : benthic_legend;
pkg_vis.add_lgds([title, legend]);//, mask_legend])
// generate the legend