/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var region_extent = 
    /* color: #d63000 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[42.11276551474697, -2.863136793758789],
          [42.11276551474697, -22.3167193487775],
          [64.56882020224697, -22.3167193487775],
          [64.56882020224697, -2.863136793758789]]], null, false);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
///////////////////////////////
// Coral atlas mapping project - depth contour export script
// Contact: mitchell.lyons@gmail.com
// Description:
// - Primarily for use in generating exports for wave modelling
///////////////////////////////

var param_module = require('users/mitchest/global_reefs:Modules/reef_params')

// #############################
// load analysis params module
var region_params = param_module.wio        //<------------ THIS IS WHERE YOU CHOOSE THE REGION
// choose a depth (in cm) cutoff that oy think looks good, then export it =)
var depth_thresh = 1300 // <--- ######## CHOOSE THE DEPTH HERE
// #############################


// load data dynamically
var dove_depth = ee.Image(region_params.depth).rename('depth')
var s2_depth = ee.Image(region_params.s2_depth).rename('depth')
var ls8_depth = ee.Image(region_params.ls8_depth).rename('depth')

// make the depth data for modelling/mapping
// --> Use S2 where possible, then LS8, then Dove
// --> The GEE mosaic algorithm uses the LAST non-masked pixel in the stack 
var depth = ee.ImageCollection([dove_depth, ls8_depth, s2_depth]).mosaic()
// get back the negative retrievals as very shallow
depth = depth.where(depth.eq(-1), 10) // handle "too shallow" retrievals

var depth_binary = depth.lt(depth_thresh) 
//var depth_thresh_smooth = depth.focal_mean({radius:5, iterations: 3}).lt(depth_thresh)

// depth contour generation
var lines = ee.List.sequence(500, 1500, 100) // <- contour lines 5m to 15m @ intervals of 1m

var contour_lines = ee.ImageCollection(
  lines.map(function(line) {
    var mycontour = depth
        .convolve(ee.Kernel.gaussian(5, 3))
        .subtract(ee.Image.constant(line)).zeroCrossing() 
        .multiply(ee.Image.constant(line)).toFloat();
    return mycontour.mask(mycontour);
  })
).mosaic()

//contourlines = ee.ImageCollection(contourlines).mosaic()

var contour_thresh = contour_lines.eq(depth_thresh).selfMask()

// display it all
Map.centerObject(region_extent, 3)
Map.addLayer(depth, {bands: ['depth'], min: 0, max: 2500, palette:['#9ecae1','#6baed6','#4292c6','#2171b5','#08519c','#08306b']}, "Depth (cm)", true) // water depth
Map.addLayer(depth_binary, {min: 0, max: 1}, "Depth threshold", true)
Map.addLayer(contour_lines, {min: 0, max: 1500, palette:['00ff00', 'ff0000']}, 'all contours')
Map.addLayer(contour_thresh, {min:0, max:1}, 'threshold contour')

//Map.addLayer(depth_thresh_smooth, {min: 0, max: 1}, "Depth contour", true)


// exports

// region generation
var export_geom = depth.reduceToVectors({
  geometry: region_extent,
  scale: 5000,
  bestEffort: true,
  eightConnected: false,
  maxPixels: 1e13
}).geometry().bounds()

Map.addLayer(export_geom, {}, "export_geom", true)

// depth threshold
Export.image.toDrive({
  image: depth_thresh, // <--- ######## CHANGE TO THE NON-SMOOTH ONE IF YOU PREFER IT?
  description: 'depth_thresh_export',
  folder: 'folder/',
  fileNamePrefix: 'output_name',
  region: export_geom,
  scale: 10,
  maxPixels: 1e13,
  skipEmptyTiles: true
})